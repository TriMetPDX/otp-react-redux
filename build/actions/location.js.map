{"version":3,"sources":["location.js"],"names":["receivedPositionError","fetchingPosition","receivedPositionResponse","getCurrentPosition","setAsType","onSuccess","dispatch","getState","navigator","geolocation","type","position","console","log","error","message","enableHighAccuracy","addLocationSearch"],"mappings":";;;;;;;;;;;;;;AAAA;;AAEA;;;;;;AAEO,IAAMA,qBAAqB,GAAG,gCAAa,gBAAb,CAA9B;;AACA,IAAMC,gBAAgB,GAAG,gCAAa,mBAAb,CAAzB;;AACA,IAAMC,wBAAwB,GAAG,gCAAa,mBAAb,CAAjC;;;AAEA,SAASC,kBAAT,GAA0D;AAAA,MAA7BC,SAA6B,uEAAjB,IAAiB;AAAA,MAAXC,SAAW;AAC/D;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAO,iBAAgBC,QAAhB,EAA0BC,QAA1B;AAAA;AAAA;AAAA;AAAA;AACL,oBAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBH,kBAAAA,QAAQ,CAACL,gBAAgB,CAAC;AAAES,oBAAAA,IAAI,EAAEN;AAAR,mBAAD,CAAjB,CAAR;AACAI,kBAAAA,SAAS,CAACC,WAAV,CAAsBN,kBAAtB,EACE;AACA,4BAAAQ,QAAQ,EAAI;AACV,wBAAIA,QAAJ,EAAc;AACZC,sBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,QAA3B,EAAqCP,SAArC;AACAE,sBAAAA,QAAQ,CAACJ,wBAAwB,CAAC;AAAES,wBAAAA,QAAQ,EAARA;AAAF,uBAAD,CAAzB,CAAR;;AACA,0BAAIP,SAAJ,EAAe;AACbQ,wBAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAP,wBAAAA,QAAQ,CAAC,+BAAqB;AAAEI,0BAAAA,IAAI,EAAEN;AAAR,yBAArB,CAAD,CAAR;AACAC,wBAAAA,SAAS,IAAIA,SAAS,EAAtB;AACD;AACF,qBARD,MAQO;AACLC,sBAAAA,QAAQ,CAACN,qBAAqB,CAAC;AAAEc,wBAAAA,KAAK,EAAE;AAAEC,0BAAAA,OAAO,EAAE;AAAX;AAAT,uBAAD,CAAtB,CAAR;AACD;AACF,mBAdH,EAeE;AACA,4BAAAD,KAAK,EAAI;AACPF,oBAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CC,KAA9C;AACAR,oBAAAA,QAAQ,CAACN,qBAAqB,CAAC;AAAEc,sBAAAA,KAAK,EAALA;AAAF,qBAAD,CAAtB,CAAR;AACD,mBAnBH,EAoBE;AACA;AAAEE,oBAAAA,kBAAkB,EAAE;AAAtB,mBArBF;AAuBD,iBAzBD,MAyBO;AACLJ,kBAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAP,kBAAAA,QAAQ,CAACN,qBAAqB,CAAC;AAAEc,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,OAAO,EAAE;AAAX;AAAT,mBAAD,CAAtB,CAAR;AACD;;AA7BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BD;;AAEM,IAAME,iBAAiB,GAAG,gCAAa,qBAAb,CAA1B","sourcesContent":["import { createAction } from 'redux-actions'\n\nimport { setLocationToCurrent } from './map'\n\nexport const receivedPositionError = createAction('POSITION_ERROR')\nexport const fetchingPosition = createAction('POSITION_FETCHING')\nexport const receivedPositionResponse = createAction('POSITION_RESPONSE')\n\nexport function getCurrentPosition (setAsType = null, onSuccess) {\n  return async function (dispatch, getState) {\n    if (navigator.geolocation) {\n      dispatch(fetchingPosition({ type: setAsType }))\n      navigator.geolocation.getCurrentPosition(\n        // On success\n        position => {\n          if (position) {\n            console.log('current loc', position, setAsType)\n            dispatch(receivedPositionResponse({ position }))\n            if (setAsType) {\n              console.log('setting location to current position')\n              dispatch(setLocationToCurrent({ type: setAsType }))\n              onSuccess && onSuccess()\n            }\n          } else {\n            dispatch(receivedPositionError({ error: { message: 'Unknown error getting position' } }))\n          }\n        },\n        // On error\n        error => {\n          console.log('error getting current position', error)\n          dispatch(receivedPositionError({ error }))\n        },\n        // Options\n        { enableHighAccuracy: true }\n      )\n    } else {\n      console.log('current position not supported')\n      dispatch(receivedPositionError({ error: { message: 'Geolocation not supported by your browser' } }))\n    }\n  }\n}\n\nexport const addLocationSearch = createAction('ADD_LOCATION_SEARCH')\n"]}