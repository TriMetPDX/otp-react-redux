{"version":3,"sources":["ui.js"],"names":["routeTo","url","replaceSearch","dispatch","getState","router","search","location","window","path","matchContentToUrl","root","pathname","split","match","exact","strict","id","params","routeId","setViewedRoute","setMainPanelContent","MainPanelContent","ROUTE_VIEWER","setViewedStop","stopId","STOP_VIEWER","idToParams","lat","lon","zoom","routerId","delimiter","map","s","isNaN","handleBackButtonPress","e","otpState","otp","activeSearchId","uiUrlParams","urlParams","previousSearchId","ui_activeSearch","previousItinIndex","ui_activeItinerary","previousSearch","searches","index","type","console","warn","setMobileScreen","payload","ui","mainPanelContent","setPanel","viewRoute","viewStop","setViewedTrip","clearPanel","toggleAutoRefresh","MobileScreens","WELCOME_SCREEN","SET_INITIAL_LOCATION","SEARCH_FORM","SET_FROM_LOCATION","SET_TO_LOCATION","SET_OPTIONS","SET_DATETIME","RESULTS_SUMMARY"],"mappings":"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","sourcesContent":["import { createAction } from 'redux-actions'\nimport { matchPath } from 'react-router'\nimport { push } from 'connected-react-router'\n\nimport { findRoute } from './api'\nimport { setMapCenter, setMapZoom, setRouterId } from './config'\nimport { clearActiveSearch, parseUrlQueryString, setActiveSearch } from './form'\nimport { clearLocation } from './map'\nimport { setActiveItinerary } from './narrative'\nimport { getUiUrlParams, getUrlParams } from '../util/query'\n\n/**\n * Wrapper function for history#push that preserves the current search or, if\n * replaceSearch is provided (including an empty string), replaces the search\n * when routing to a new URL path.\n * @param  {[type]} url           path to route to\n * @param  {string} replaceSearch optional search string to replace current one\n */\nexport function routeTo (url, replaceSearch) {\n  return function (dispatch, getState) {\n    // Get search to preserve when routing to new path.\n    const { router } = getState()\n    const search = router ? router.location.search : window.location.search\n    let path = url\n    if (replaceSearch || replaceSearch === '') {\n      path = `${path}${replaceSearch}`\n    } else {\n      path = `${path}${search}`\n    }\n    dispatch(push(path))\n  }\n}\n\n/**\n * Checks URL and redirects app to appropriate content (e.g., viewed\n * route or stop).\n */\nexport function matchContentToUrl (location) {\n  return function (dispatch, getState) {\n    // This is a bit of a hack to make up for the fact that react-router does\n    // not always provide the match params as expected.\n    // https://github.com/ReactTraining/react-router/issues/5870#issuecomment-394194338\n    const root = location.pathname.split('/')[1]\n    const match = matchPath(location.pathname, {\n      path: `/${root}/:id`,\n      exact: true,\n      strict: false\n    })\n    const id = match && match.params && match.params.id\n    switch (root) {\n      case 'route':\n        if (id) {\n          dispatch(findRoute({ routeId: id }))\n          dispatch(setViewedRoute({ routeId: id }))\n        } else {\n          dispatch(setViewedRoute(null))\n          dispatch(setMainPanelContent(MainPanelContent.ROUTE_VIEWER))\n        }\n        break\n      case 'stop':\n        if (id) {\n          dispatch(setViewedStop({ stopId: id }))\n        } else {\n          dispatch(setViewedStop(null))\n          dispatch(setMainPanelContent(MainPanelContent.STOP_VIEWER))\n        }\n        break\n      case 'start':\n      case '@':\n        // Parse comma separated params (ensuring numbers are parsed correctly).\n        let [lat, lon, zoom, routerId] = id ? idToParams(id) : []\n        if (!lat || !lon) {\n          // Attempt to parse path. (Legacy UI otp.js used slashes in the\n          // pathname to specify lat, lon, etc.)\n          [,, lat, lon, zoom, routerId] = idToParams(location.pathname, '/')\n        }\n        // Update map location/zoom and optionally override router ID.\n        dispatch(setMapCenter({ lat, lon }))\n        dispatch(setMapZoom({ zoom }))\n        if (routerId) dispatch(setRouterId(routerId))\n        dispatch(setMainPanelContent(null))\n        break\n      // For any other route path, just revert to default panel.\n      default:\n        dispatch(setMainPanelContent(null))\n        break\n    }\n  }\n}\n\nfunction idToParams (id, delimiter = ',') {\n  return id.split(delimiter).map(s => isNaN(s) ? s : +s)\n}\n\n/**\n * Event listener for responsive webapp that handles a back button press and\n * sets the active search and itinerary according to the URL query params.\n */\nexport function handleBackButtonPress (e) {\n  return function (dispatch, getState) {\n    const otpState = getState().otp\n    const { activeSearchId } = otpState\n    const uiUrlParams = getUiUrlParams(otpState)\n    // Get new search ID from URL after back button pressed.\n    // console.log('back button pressed', e)\n    const urlParams = getUrlParams()\n    const previousSearchId = urlParams.ui_activeSearch\n    const previousItinIndex = +urlParams.ui_activeItinerary || 0\n    const previousSearch = otpState.searches[previousSearchId]\n    if (previousSearch) {\n      // If back button pressed and active search has changed, set search to\n      // previous search ID.\n      if (activeSearchId !== previousSearchId) {\n        dispatch(setActiveSearch(previousSearchId))\n      } else if (uiUrlParams.ui_activeItinerary !== previousItinIndex) {\n        // Active itinerary index has changed.\n        dispatch(setActiveItinerary({ index: previousItinIndex }))\n      }\n    } else {\n      // The back button was pressed, but there was no corresponding search\n      // found for the previous search ID. Derive search from URL params.\n      if (!previousSearchId && activeSearchId) {\n        // There is no search ID. Clear active search and from/to\n        dispatch(clearActiveSearch())\n        dispatch(clearLocation({ type: 'from' }))\n        dispatch(clearLocation({ type: 'to' }))\n      } else if (previousSearchId) {\n        console.warn(`No search found in state history for search ID: ${previousSearchId}. Replanning...`)\n        // Set query to the params found in the URL and perform routing query\n        // for search ID.\n        // Also, we don't want to update the URL here because that will funk with\n        // the browser history.\n        dispatch(parseUrlQueryString(urlParams))\n      }\n    }\n  }\n}\n\nexport const setMobileScreen = createAction('SET_MOBILE_SCREEN')\n\n/**\n * Sets the main panel content according to the payload (one of the enum values\n * of MainPanelContent) and routes the application to the correct path.\n * @param {number} payload MainPanelContent value\n */\nexport function setMainPanelContent (payload) {\n  return function (dispatch, getState) {\n    const { otp, router } = getState()\n    if (otp.ui.mainPanelContent === payload) {\n      console.warn(`Attempt to route from ${otp.ui.mainPanelContent} to ${payload}. Doing nothing`)\n      // Do nothing if the panel is already set. This will guard against over\n      // enthusiastic routing and overwriting current/nested states.\n      return\n    }\n    dispatch(setPanel(payload))\n    switch (payload) {\n      case MainPanelContent.ROUTE_VIEWER:\n        dispatch(routeTo('/route'))\n        break\n      case MainPanelContent.STOP_VIEWER:\n        dispatch(routeTo('/stop'))\n        break\n      default:\n        // Clear route, stop, and trip viewer focus and route to root\n        dispatch(viewRoute(null))\n        dispatch(viewStop(null))\n        dispatch(setViewedTrip(null))\n        if (router.location.pathname !== '/') dispatch(routeTo('/'))\n        break\n    }\n  }\n}\n\nconst setPanel = createAction('SET_MAIN_PANEL_CONTENT')\nexport const clearPanel = createAction('CLEAR_MAIN_PANEL')\n\n// Stop/Route/Trip Viewer actions\n\nexport function setViewedStop (payload) {\n  return function (dispatch, getState) {\n    dispatch(viewStop(payload))\n    const path = payload && payload.stopId\n      ? `/stop/${payload.stopId}`\n      : '/stop'\n    dispatch(routeTo(path))\n  }\n}\n\nconst viewStop = createAction('SET_VIEWED_STOP')\n\nexport const setViewedTrip = createAction('SET_VIEWED_TRIP')\n\nexport function setViewedRoute (payload) {\n  return function (dispatch, getState) {\n    dispatch(viewRoute(payload))\n    const path = payload && payload.routeId\n      ? `/route/${payload.routeId}`\n      : '/route'\n    dispatch(routeTo(path))\n  }\n}\n\nconst viewRoute = createAction('SET_VIEWED_ROUTE')\n\nexport const toggleAutoRefresh = createAction('TOGGLE_AUTO_REFRESH')\n\n// UI state enums\n\nexport const MainPanelContent = {\n  ROUTE_VIEWER: 1,\n  STOP_VIEWER: 2\n}\n\nexport const MobileScreens = {\n  WELCOME_SCREEN: 1,\n  SET_INITIAL_LOCATION: 2,\n  SEARCH_FORM: 3,\n  SET_FROM_LOCATION: 4,\n  SET_TO_LOCATION: 5,\n  SET_OPTIONS: 6,\n  SET_DATETIME: 7,\n  RESULTS_SUMMARY: 8\n}\n"]}