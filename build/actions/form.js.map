{"version":3,"sources":["form.js"],"names":["settingQueryParam","clearActiveSearch","setActiveSearch","clearDefaultSettings","storeDefaultSettings","resetForm","dispatch","getState","otpState","otp","transitModes","config","modes","user","defaults","userOverrides","defaultQuery","Object","assign","options","mode","map","m","join","setQueryParam","payload","searchId","parseUrlQueryString","params","planParams","keys","forEach","key","startsWith","ui_activeSearch","debouncedPlanTrip","lastDebouncePlanTimeMs","formChanged","oldQuery","newQuery","currentQuery","departArrive","time","format","OTP_API_TIME_FORMAT","fromChanged","from","toChanged","to","oneLocationChanged","ui","mobileScreen","MobileScreens","WELCOME_SCREEN","SEARCH_FORM","autoPlan","debouncePlanTimeMs","updatePlan"],"mappings":"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","sourcesContent":["import debounce from 'lodash.debounce'\nimport moment from 'moment'\nimport { createAction } from 'redux-actions'\nimport isEqual from 'lodash.isequal'\n\nimport {\n  getDefaultQuery,\n  getTripOptionsFromQuery,\n  getUrlParams,\n  planParamsToQuery\n} from '../util/query'\nimport { getItem, randId } from '../util/storage'\nimport { queryIsValid } from '../util/state'\nimport { OTP_API_TIME_FORMAT } from '../util/time'\nimport { isMobile } from '../util/ui'\nimport {\n  MobileScreens,\n  setMainPanelContent,\n  setMobileScreen\n} from '../actions/ui'\n\nimport { routingQuery } from './api'\n\nexport const settingQueryParam = createAction('SET_QUERY_PARAM')\nexport const clearActiveSearch = createAction('CLEAR_ACTIVE_SEARCH')\nexport const setActiveSearch = createAction('SET_ACTIVE_SEARCH')\nexport const clearDefaultSettings = createAction('CLEAR_DEFAULT_SETTINGS')\nexport const storeDefaultSettings = createAction('STORE_DEFAULT_SETTINGS')\n\nexport function resetForm () {\n  return function (dispatch, getState) {\n    const otpState = getState().otp\n    const { transitModes } = otpState.config.modes\n    if (otpState.user.defaults) {\n      dispatch(settingQueryParam(otpState.user.defaults))\n    } else {\n      // Get user overrides and apply to default query\n      const userOverrides = getItem('defaultQuery', {})\n      const defaultQuery = Object.assign(\n        getDefaultQuery(otpState.config),\n        userOverrides\n      )\n      // Filter out non-options (i.e., date, places).\n      const options = getTripOptionsFromQuery(defaultQuery)\n      // Default mode is currently WALK,TRANSIT. We need to update this value\n      // here to match the list of modes, otherwise the form will break.\n      options.mode = ['WALK', ...transitModes.map(m => m.mode)].join(',')\n      dispatch(settingQueryParam(options))\n    }\n  }\n}\n\n/**\n * Action to update any specified query parameter. Replaces previous series of\n * parameter-specific actions. If a search ID is provided, a routing query (OTP\n * search) will be kicked off immediately.\n */\nexport function setQueryParam (payload, searchId) {\n  return function (dispatch, getState) {\n    dispatch(settingQueryParam(payload))\n    if (searchId) dispatch(routingQuery(searchId))\n  }\n}\n\nexport function parseUrlQueryString (params = getUrlParams()) {\n  return function (dispatch, getState) {\n    // Filter out the OTP (i.e. non-UI) params and set the initial query\n    const planParams = {}\n    Object.keys(params).forEach(key => {\n      if (!key.startsWith('ui_')) planParams[key] = params[key]\n    })\n    const searchId = params.ui_activeSearch || randId()\n    // Convert strings to numbers/objects and dispatch\n    dispatch(\n      setQueryParam(\n        planParamsToQuery(\n          planParams,\n          getState().otp.config\n        ),\n        searchId\n      )\n    )\n  }\n}\n\nlet debouncedPlanTrip // store as variable here, so it can be reused.\nlet lastDebouncePlanTimeMs\n\nexport function formChanged (oldQuery, newQuery) {\n  return function (dispatch, getState) {\n    const otpState = getState().otp\n\n    // If departArrive is set to 'NOW', update the query time to current\n    if (otpState.currentQuery && otpState.currentQuery.departArrive === 'NOW') {\n      dispatch(settingQueryParam({ time: moment().format(OTP_API_TIME_FORMAT) }))\n    }\n\n    // Determine if either from/to location has changed\n    const fromChanged = !isEqual(oldQuery.from, newQuery.from)\n    const toChanged = !isEqual(oldQuery.to, newQuery.to)\n\n    // Only clear the main panel if a single location changed. This prevents\n    // clearing the panel on load if the app is focused on a stop viewer but a\n    // search query should also be visible.\n    const oneLocationChanged = (fromChanged && !toChanged) || (!fromChanged && toChanged)\n    if (oneLocationChanged) {\n      dispatch(setMainPanelContent(null))\n    }\n\n    // Clear the current search and return to search screen on mobile when\n    // either location changes only if not currently on welcome screen (otherwise\n    // when the current position is auto-set the screen will change unexpectedly).\n    if (\n      isMobile() &&\n      (fromChanged || toChanged) &&\n      otpState.ui.mobileScreen !== MobileScreens.WELCOME_SCREEN\n    ) {\n      dispatch(clearActiveSearch())\n      dispatch(setMobileScreen(MobileScreens.SEARCH_FORM))\n    }\n\n    // Check whether a trip should be auto-replanned\n    const { autoPlan, debouncePlanTimeMs } = otpState.config\n    const updatePlan =\n      autoPlan ||\n      (!isMobile() && oneLocationChanged) || // TODO: make autoplan configurable at the parameter level?\n      (isMobile() && fromChanged && toChanged)\n    if (updatePlan && queryIsValid(otpState)) { // trip plan should be made\n      // check if debouncing function needs to be (re)created\n      if (!debouncedPlanTrip || lastDebouncePlanTimeMs !== debouncePlanTimeMs) {\n        debouncedPlanTrip = debounce(() => dispatch(routingQuery()), debouncePlanTimeMs)\n        lastDebouncePlanTimeMs = debouncePlanTimeMs\n      }\n      debouncedPlanTrip()\n    }\n  }\n}\n"]}