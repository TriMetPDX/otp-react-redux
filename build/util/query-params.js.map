{"version":3,"sources":["query-params.js"],"names":["formatPlace","location","alternateName","name","lat","lon","storedSettings","queryParams","routingTypes","default","itineraryRewrite","value","fromPlace","profileRewrite","from","toPlace","to","getCurrentDate","getCurrentTime","arriveBy","accessModes","directModes","transitModes","length","split","forEach","m","push","applicable","query","mode","indexOf","selector","label","options","text","maxWalkDistance","maxBikeDistance","opts","splice","optimize","maxEScooterDistance","watts","maximumMicromobilitySpeed","weight","TYPICAL_RIDER_WEIGHT","config","modes","configModes","concat","configMode","find","showWheelchairSetting","company","companies","includes","param","userDefaultOverride"],"mappings":"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","sourcesContent":["import {\n  isTransit,\n  isAccessMode,\n  isCar,\n  hasTransit,\n  hasBike,\n  hasMicromobility\n} from './itinerary'\nimport { getItem } from './storage'\nimport { getCurrentDate, getCurrentTime } from './time'\n\n/**\n * name: the default name of the parameter used for internal reference and API calls\n *\n * routingTypes: array of routing type(s) (ITINERARY, PROFILE, or both) this param applies to\n *\n * applicable: an optional function (accepting the current full query as a\n *   parameter) indicating whether this query parameter is applicable to the query.\n *   (Applicability is assumed if this function is not provided.)\n *\n * default: the default value for this parameter. The default can be also be a\n *  function that gets executed when accessing the default value. When the value\n *  is a funciton, it will take an argument of the current config of the otp-rr\n *  store. This is needed when a brand new time-dependent value is desired to be\n *  calculated. It's also helpful for producing tests that have consistent data\n *  output.\n *\n * itineraryRewrite: an optional function for translating the key and/or value\n *   for ITINERARY mode only (e.g. 'to' is rewritten as 'toPlace'). Accepts the\n *   intial internal value as a function parameter.\n *\n * profileRewrite: an optional function for translating the value for PROFILE mode\n *\n * label: a text label for for onscreen display. May either be a text string or a\n *   function (accepting the current full query as a parameter) returning a string\n *\n * selector: the default type of UI selector to use in the form. Can be one of:\n *   - DROPDOWN: a standard drop-down menu selector\n *\n * options: an array of text/value pairs used with a dropdown selector\n *\n * TODO: validation system for rewrite functions and/or better user documentation\n * TODO: alphabetize below list\n */\n\n// FIXME: Use for parsing URL values?\n// const stringToLocation = string => {\n//   const split = string.split(',')\n//   return split.length === 2\n//     ? {lat: split[0], lon: split[1]}\n//     : {lat: null, lon: null}\n// }\n\nconst formatPlace = (location, alternateName) => {\n  if (!location) return null\n  const name = location.name || `${alternateName || 'Place'} (${location.lat},${location.lon})`\n  return `${name}::${location.lat},${location.lon}`\n}\n\n// Load stored default query settings from local storage\nlet storedSettings = getItem('defaultQuery', {})\n\nconst queryParams = [\n  { /* from - the trip origin. stored internally as a location (lat/lon/name) object  */\n    name: 'from',\n    routingTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: null,\n    itineraryRewrite: value => ({ fromPlace: formatPlace(value, 'Origin') }),\n    profileRewrite: value => ({ from: { lat: value.lat, lon: value.lon } })\n    // FIXME: Use for parsing URL values?\n    // fromURL: stringToLocation\n  },\n\n  { /* to - the trip destination. stored internally as a location (lat/lon/name) object  */\n    name: 'to',\n    routingTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: null,\n    itineraryRewrite: value => ({ toPlace: formatPlace(value, 'Destination') }),\n    profileRewrite: value => ({ to: { lat: value.lat, lon: value.lon } })\n    // FIXME: Use for parsing URL values?\n    // fromURL: stringToLocation\n  },\n\n  { /* date - the date of travel, in MM-DD-YYYY format */\n    name: 'date',\n    routingTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: getCurrentDate\n  },\n\n  { /* time - the arrival/departure time for an itinerary trip, in HH:mm format */\n    name: 'time',\n    routingTypes: [ 'ITINERARY' ],\n    default: getCurrentTime\n  },\n\n  { /* departArrive - whether this is a depart-at, arrive-by, or leave-now trip */\n    name: 'departArrive',\n    routingTypes: [ 'ITINERARY' ],\n    default: 'NOW',\n    itineraryRewrite: value => ({ arriveBy: (value === 'ARRIVE') })\n  },\n\n  { /* startTime - the start time for a profile trip, in HH:mm format */\n    name: 'startTime',\n    routingTypes: [ 'PROFILE' ],\n    default: '07:00'\n  },\n\n  { /* endTime - the end time for a profile trip, in HH:mm format */\n    name: 'endTime',\n    routingTypes: [ 'PROFILE' ],\n    default: '09:00'\n  },\n\n  { /* mode - the allowed modes for a trip, as a comma-separated list */\n    name: 'mode',\n    routingTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: 'WALK,TRANSIT', // TODO: make this dependent on routingType?\n    profileRewrite: value => {\n      const accessModes = []\n      const directModes = []\n      const transitModes = []\n\n      if (value && value.length > 0) {\n        value.split(',').forEach(m => {\n          if (isTransit(m)) transitModes.push(m)\n          if (isAccessMode(m)) {\n            accessModes.push(m)\n            // TODO: make configurable whether direct-driving is considered\n            if (!isCar(m)) directModes.push(m)\n          }\n        })\n      }\n\n      return { accessModes, directModes, transitModes }\n    }\n  },\n\n  { /* showIntermediateStops - whether response should include intermediate stops for transit legs */\n    name: 'showIntermediateStops',\n    routingTypes: [ 'ITINERARY' ],\n    default: true\n  },\n\n  { /* maxWalkDistance - the maximum distance in meters the user will walk to transit. */\n    name: 'maxWalkDistance',\n    routingTypes: [ 'ITINERARY' ],\n    applicable: query => query.mode && hasTransit(query.mode) && query.mode.indexOf('WALK') !== -1,\n    default: 1207, // 3/4 mi.\n    selector: 'DROPDOWN',\n    label: 'Maximum Walk',\n    options: [\n      {\n        text: '1/10 mile',\n        value: 160.9\n      }, {\n        text: '1/4 mile',\n        value: 402.3\n      }, {\n        text: '1/2 mile',\n        value: 804.7\n      }, {\n        text: '3/4 mile',\n        value: 1207\n      }, {\n        text: '1 mile',\n        value: 1609\n      }, {\n        text: '2 miles',\n        value: 3219\n      }, {\n        text: '5 miles',\n        value: 8047\n      }\n    ]\n  },\n\n  { /* maxBikeDistance - the maximum distance in meters the user will bike. Not\n     * actually an OTP parameter (maxWalkDistance doubles for biking) but we\n     * store it separately internally in order to allow different default values,\n     * options, etc.  Translated to 'maxWalkDistance' via the rewrite function.\n     */\n    name: 'maxBikeDistance',\n    routingTypes: [ 'ITINERARY' ],\n    applicable: query => query.mode && hasTransit(query.mode) && query.mode.indexOf('BICYCLE') !== -1,\n    default: 4828, // 3 mi.\n    selector: 'DROPDOWN',\n    label: 'Maximum Bike',\n    options: [\n      {\n        text: '1/4 mile',\n        value: 402.3\n      }, {\n        text: '1/2 mile',\n        value: 804.7\n      }, {\n        text: '3/4 mile',\n        value: 1207\n      }, {\n        text: '1 mile',\n        value: 1609\n      }, {\n        text: '2 miles',\n        value: 3219\n      }, {\n        text: '3 miles',\n        value: 4828\n      }, {\n        text: '5 miles',\n        value: 8047\n      }, {\n        text: '10 miles',\n        value: 16093\n      }, {\n        text: '20 miles',\n        value: 32187\n      }, {\n        text: '30 miles',\n        value: 48280\n      }\n    ],\n    itineraryRewrite: value => ({\n      maxWalkDistance: value,\n      // ensures that the value is repopulated when loaded from URL params\n      maxBikeDistance: value\n    })\n  },\n\n  { /* optimize -- how to optimize a trip (non-bike, non-micromobility trips) */\n    name: 'optimize',\n    applicable: query => hasTransit(query.mode) && !hasBike(query.mode),\n    routingTypes: [ 'ITINERARY' ],\n    default: 'QUICK',\n    selector: 'DROPDOWN',\n    label: 'Optimize for',\n    options: [\n      {\n        text: 'Speed',\n        value: 'QUICK'\n      }, {\n        text: 'Fewest Transfers',\n        value: 'TRANSFERS'\n      }\n    ]\n  },\n\n  { /* optimizeBike -- how to optimize an bike-based trip */\n    name: 'optimizeBike',\n    applicable: query => hasBike(query.mode),\n    routingTypes: [ 'ITINERARY' ],\n    default: 'SAFE',\n    selector: 'DROPDOWN',\n    label: 'Optimize for',\n    options: query => {\n      const opts = [{\n        text: 'Speed',\n        value: 'QUICK'\n      }, {\n        text: 'Bike-Friendly Trip',\n        value: 'SAFE'\n      }, {\n        text: 'Flat Trip',\n        value: 'FLAT'\n      }]\n\n      // Include transit-specific option, if applicable\n      if (hasTransit(query.mode)) {\n        opts.splice(1, 0, {\n          text: 'Fewest Transfers',\n          value: 'TRANSFERS'\n        })\n      }\n\n      return opts\n    },\n    itineraryRewrite: value => ({ optimize: value })\n  },\n\n  { /* maxWalkTime -- the maximum time the user will spend walking in minutes */\n    name: 'maxWalkTime',\n    routingTypes: [ 'PROFILE' ],\n    default: 15,\n    selector: 'DROPDOWN',\n    label: 'Max Walk Time',\n    applicable: query => query.mode && hasTransit(query.mode) && query.mode.indexOf('WALK') !== -1,\n    options: [\n      {\n        text: '5 minutes',\n        value: 5\n      }, {\n        text: '10 minutes',\n        value: 10\n      }, {\n        text: '15 minutes',\n        value: 15\n      }, {\n        text: '20 minutes',\n        value: 20\n      }, {\n        text: '30 minutes',\n        value: 30\n      }, {\n        text: '45 minutes',\n        value: 45\n      }, {\n        text: '1 hour',\n        value: 60\n      }\n    ]\n  },\n\n  { /* walkSpeed -- the user's walking speed in m/s */\n    name: 'walkSpeed',\n    routingTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: 1.34,\n    selector: 'DROPDOWN',\n    label: 'Walk Speed',\n    applicable: query => query.mode && query.mode.indexOf('WALK') !== -1,\n    options: [\n      {\n        text: '2 MPH',\n        value: 0.89\n      }, {\n        text: '3 MPH',\n        value: 1.34\n      }, {\n        text: '4 MPH',\n        value: 1.79\n      }\n    ]\n  },\n\n  { /* maxBikeTime -- the maximum time the user will spend biking in minutes */\n    name: 'maxBikeTime',\n    routingTypes: [ 'PROFILE' ],\n    default: 20,\n    selector: 'DROPDOWN',\n    label: 'Max Bike Time',\n    applicable: query => query.mode && hasTransit(query.mode) && query.mode.indexOf('BICYCLE') !== -1,\n    options: [\n      {\n        text: '5 minutes',\n        value: 5\n      }, {\n        text: '10 minutes',\n        value: 10\n      }, {\n        text: '15 minutes',\n        value: 15\n      }, {\n        text: '20 minutes',\n        value: 20\n      }, {\n        text: '30 minutes',\n        value: 30\n      }, {\n        text: '45 minutes',\n        value: 45\n      }, {\n        text: '1 hour',\n        value: 60\n      }\n    ]\n  },\n\n  { /* bikeSpeed -- the user's bikeSpeed speed in m/s */\n    name: 'bikeSpeed',\n    routingTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: 3.58,\n    selector: 'DROPDOWN',\n    label: 'Bicycle Speed',\n    applicable: query => query.mode && query.mode.indexOf('BICYCLE') !== -1,\n    options: [\n      {\n        text: '6 MPH',\n        value: 2.68\n      }, {\n        text: '8 MPH',\n        value: 3.58\n      }, {\n        text: '10 MPH',\n        value: 4.47\n      }, {\n        text: '12 MPH',\n        value: 5.36\n      }\n    ]\n  },\n\n  { /* maxEScooterDistance - the maximum distance in meters the user will ride\n     * an eScooter. Not actually an OTP parameter (maxWalkDistance doubles for\n     * any non-transit mode except for car) but we store it separately\n     * internally in order to allow different default values, options, etc.\n     * Translated to 'maxWalkDistance' via the rewrite function.\n     */\n    name: 'maxEScooterDistance',\n    routingTypes: [ 'ITINERARY' ],\n    applicable: query => query.mode && hasTransit(query.mode) && hasMicromobility(query.mode),\n    default: 4828, // 3 mi.\n    selector: 'DROPDOWN',\n    label: 'Maximum eScooter Distance',\n    options: [\n      {\n        text: '1/4 mile',\n        value: 402.3\n      }, {\n        text: '1/2 mile',\n        value: 804.7\n      }, {\n        text: '3/4 mile',\n        value: 1207\n      }, {\n        text: '1 mile',\n        value: 1609\n      }, {\n        text: '2 miles',\n        value: 3219\n      }, {\n        text: '3 miles',\n        value: 4828\n      }, {\n        text: '5 miles',\n        value: 8047\n      }, {\n        text: '10 miles',\n        value: 16093\n      }, {\n        text: '20 miles',\n        value: 32187\n      }, {\n        text: '30 miles',\n        value: 48280\n      }\n    ],\n    itineraryRewrite: value => ({\n      maxWalkDistance: value,\n      // ensures that the value is repopulated when loaded from URL params\n      maxEScooterDistance: value\n    })\n  },\n\n  { /* bikeSpeed -- the user's bikeSpeed speed in m/s */\n    name: 'watts',\n    routingTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: 250,\n    selector: 'DROPDOWN',\n    label: 'eScooter Power',\n    // this configuration should only be allowed for personal eScooters as these\n    // settings will be defined by the vehicle type of an eScooter being rented\n    applicable: query => (\n      query.mode &&\n        query.mode.indexOf('MICROMOBILITY') !== -1 &&\n        query.mode.indexOf('MICROMOBILITY_RENT') === -1\n    ),\n    options: [\n      {\n        text: 'Kid\\'s hoverboard (6mph)',\n        value: 125\n      }, {\n        text: 'Entry-level scooter (11mph)',\n        value: 250\n      }, {\n        text: 'Robust eScooter (18mph)',\n        value: 500\n      }, {\n        text: 'Powerful eScooter (24mph)',\n        value: 1500\n      }\n    ],\n    // rewrite a few other values to add some baseline assumptions about the\n    // vehicle\n    itineraryRewrite: value => {\n      const watts = value\n      // the maximum cruising and downhill speed. Units in m/s\n      let maximumMicromobilitySpeed\n      let weight\n      // see https://en.wikipedia.org/wiki/Human_body_weight#Average_weight_around_the_world\n      // estimate is for an average North American human with clothes and stuff\n      // units are in kg\n      const TYPICAL_RIDER_WEIGHT = 90\n      switch (watts) {\n        case 125:\n          // exemplar: Swagtron Turbo 5 hoverboard (https://swagtron.com/product/recertified-swagtron-turbo-five-hoverboard-classic/)\n          maximumMicromobilitySpeed = 2.8 // ~= 6mph\n          weight = TYPICAL_RIDER_WEIGHT + 9\n          break\n        case 250:\n          // exemplar: Xiaomi M365 (https://www.gearbest.com/skateboard/pp_596618.html)\n          maximumMicromobilitySpeed = 5 // ~= 11.5mph\n          weight = TYPICAL_RIDER_WEIGHT + 12.5\n          break\n        case 500:\n          // exemplar: Razor EcoSmart Metro (https://www.amazon.com/Razor-EcoSmart-Metro-Electric-Scooter/dp/B002ZDAEIS?SubscriptionId=AKIAJMXJ2YFJTEDLQMUQ&tag=digitren08-20&linkCode=xm2&camp=2025&creative=165953&creativeASIN=B002ZDAEIS&ascsubtag=15599460143449ocb)\n          maximumMicromobilitySpeed = 8 // ~= 18mph\n          weight = TYPICAL_RIDER_WEIGHT + 30\n          break\n        case 1000:\n          // exemplar: Boosted Rev (https://boostedboards.com/vehicles/scooters/boosted-rev)\n          maximumMicromobilitySpeed = 11 // ~= 24mph\n          weight = TYPICAL_RIDER_WEIGHT + 21\n          break\n      }\n      return {maximumMicromobilitySpeed, watts, weight}\n    }\n  },\n\n  { /* ignoreRealtimeUpdates -- if true, do not use realtime updates in routing */\n    name: 'ignoreRealtimeUpdates',\n    routingTypes: [ 'ITINERARY' ],\n    default: false\n  },\n\n  { /* companies -- tnc companies to query */\n    name: 'companies',\n    routingTypes: [ 'ITINERARY' ],\n    default: null\n  },\n\n  { /* wheelchair -- whether the user requires a wheelchair-accessible trip */\n    name: 'wheelchair',\n    routingTypes: [ 'ITINERARY' ],\n    default: false,\n    selector: 'CHECKBOX',\n    label: 'Wheelchair Accessible',\n    applicable: (query, config) => {\n      if (!query.mode || !config.modes) return false\n      const configModes = (config.modes.accessModes || []).concat(config.modes.transitModes || [])\n      for (const mode of query.mode.split(',')) {\n        const configMode = configModes.find(m => m.mode === mode)\n        if (!configMode || !configMode.showWheelchairSetting) continue\n        if (configMode.company && (!query.companies || !query.companies.split(',').includes(configMode.company))) continue\n        return true\n      }\n    }\n  }\n]\n// Iterate over stored settings and update query param defaults.\n// FIXME: this does not get updated if the user defaults are cleared\nqueryParams.forEach(param => {\n  if (param.name in storedSettings) {\n    param.default = storedSettings[param.name]\n    param.userDefaultOverride = true\n  }\n})\n\nexport default queryParams\n"]}