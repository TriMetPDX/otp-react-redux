{"version":3,"sources":["time.js"],"names":["OTP_API_DATE_FORMAT","OTP_API_TIME_FORMAT","getTimeFormat","config","dateTime","timeFormat","getDateFormat","dateFormat","getLongDateFormat","longDateFormat","formatDuration","seconds","dur","moment","duration","text","hours","minutes","formatTime","ms","options","offset","format","formatSecondsAfterMidnight","startOf","getCurrentTime","tz","getUserTimezone","getCurrentDate","process","env","NODE_ENV","TZ","guess"],"mappings":";;;;;;;;;;;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACO,IAAMA,mBAAmB,GAAG,YAA5B;;AACA,IAAMC,mBAAmB,GAAG,OAA5B;AAEP;;;;;;;AAIO,SAASC,aAAT,CAAwBC,MAAxB,EAAgC;AACrC,SAAQA,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACC,QAAP,CAAgBC,UAApC,GACHF,MAAM,CAACC,QAAP,CAAgBC,UADb,GAEHJ,mBAFJ;AAGD;;AAEM,SAASK,aAAT,CAAwBH,MAAxB,EAAgC;AACrC,SAAQA,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACC,QAAP,CAAgBG,UAApC,GACHJ,MAAM,CAACC,QAAP,CAAgBG,UADb,GAEHP,mBAFJ;AAGD;;AAEM,SAASQ,iBAAT,CAA4BL,MAA5B,EAAoC;AACzC,SAAQA,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACC,QAAP,CAAgBK,cAApC,GACHN,MAAM,CAACC,QAAP,CAAgBK,cADb,GAEH,aAFJ;AAGD;AAED;;;;;;;;AAMO,SAASC,cAAT,CAAyBC,OAAzB,EAAkC;AACvC,MAAMC,GAAG,GAAGC,gBAAOC,QAAP,CAAgBH,OAAhB,EAAyB,SAAzB,CAAZ;;AACA,MAAII,IAAI,GAAG,EAAX;AACA,MAAIH,GAAG,CAACI,KAAJ,KAAc,CAAlB,EAAqBD,IAAI,IAAIH,GAAG,CAACI,KAAJ,KAAc,OAAtB;AACrBD,EAAAA,IAAI,IAAIH,GAAG,CAACK,OAAJ,KAAgB,MAAxB;AACA,SAAOF,IAAP;AACD;AAED;;;;;;;;AAMO,SAASG,UAAT,CAAqBC,EAArB,EAAyBC,OAAzB,EAAkC;AACvC,SAAO,qBAAOD,EAAE,IAAIC,OAAO,IAAIA,OAAO,CAACC,MAAnB,GAA4BD,OAAO,CAACC,MAApC,GAA6C,CAAjD,CAAT,EACJC,MADI,CACGF,OAAO,IAAIA,OAAO,CAACE,MAAnB,GAA4BF,OAAO,CAACE,MAApC,GAA6CrB,mBADhD,CAAP;AAED;AAED;;;;;;;;AAMO,SAASsB,0BAAT,CAAqCZ,OAArC,EAA8CN,UAA9C,EAA0D;AAC/D,SAAO,uBAASmB,OAAT,CAAiB,KAAjB,EAAwBb,OAAxB,CAAgCA,OAAhC,EAAyCW,MAAzC,CAAgDjB,UAAhD,CAAP;AACD;AAED;;;;;;AAIO,SAASoB,cAAT,GAA2B;AAChC,SAAO,uBAASC,EAAT,CAAYC,eAAe,EAA3B,EAA+BL,MAA/B,CAAsCrB,mBAAtC,CAAP;AACD;AAED;;;;;;AAIO,SAAS2B,cAAT,CAAyBzB,MAAzB,EAAiC;AACtC,SAAO,uBAASuB,EAAT,CAAYC,eAAe,EAA3B,EAA+BL,MAA/B,CAAsCtB,mBAAtC,CAAP;AACD;AAED;;;;;;;AAKO,SAAS2B,eAAT,GAA4B;AACjC,SAAOE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,GAAkCF,OAAO,CAACC,GAAR,CAAYE,EAA9C,GAAmDnB,gBAAOa,EAAP,CAAUO,KAAV,EAA1D;AACD","sourcesContent":["import moment from 'moment'\nimport 'moment-timezone'\n\n// special constants for making sure the following date format is always sent to\n// OTP regardless of whatever the user has configured as the display format\nexport const OTP_API_DATE_FORMAT = 'YYYY-MM-DD'\nexport const OTP_API_TIME_FORMAT = 'HH:mm'\n\n/**\n * @param  {[type]} config the OTP config object found in store\n * @return {string}        the config-defined time formatter or HH:mm (24-hr time)\n */\nexport function getTimeFormat (config) {\n  return (config.dateTime && config.dateTime.timeFormat)\n    ? config.dateTime.timeFormat\n    : OTP_API_TIME_FORMAT\n}\n\nexport function getDateFormat (config) {\n  return (config.dateTime && config.dateTime.dateFormat)\n    ? config.dateTime.dateFormat\n    : OTP_API_DATE_FORMAT\n}\n\nexport function getLongDateFormat (config) {\n  return (config.dateTime && config.dateTime.longDateFormat)\n    ? config.dateTime.longDateFormat\n    : 'D MMMM YYYY'\n}\n\n/**\n * Formats an elapsed time duration for display in narrative\n * TODO: internationalization\n * @param {number} seconds duration in seconds\n * @returns {string} formatted text representation\n */\nexport function formatDuration (seconds) {\n  const dur = moment.duration(seconds, 'seconds')\n  let text = ''\n  if (dur.hours() > 0) text += dur.hours() + ' hr, '\n  text += dur.minutes() + ' min'\n  return text\n}\n\n/**\n * Formats a time value for display in narrative\n * TODO: internationalization/timezone\n * @param {number} ms epoch time value in milliseconds\n * @returns {string} formatted text representation\n */\nexport function formatTime (ms, options) {\n  return moment(ms + (options && options.offset ? options.offset : 0))\n    .format(options && options.format ? options.format : OTP_API_TIME_FORMAT)\n}\n\n/**\n * Formats a seconds after midnight value for display in narrative\n * @param  {number} seconds  time since midnight in seconds\n * @param  {string} timeFormat  A valid moment.js time format\n * @return {string}                   formatted text representation\n */\nexport function formatSecondsAfterMidnight (seconds, timeFormat) {\n  return moment().startOf('day').seconds(seconds).format(timeFormat)\n}\n\n/**\n * Formats current time for use in OTP query\n * The conversion to the user's timezone is needed for testing purposes.\n */\nexport function getCurrentTime () {\n  return moment().tz(getUserTimezone()).format(OTP_API_TIME_FORMAT)\n}\n\n/**\n * Formats current date for use in OTP query\n * The conversion to the user's timezone is needed for testing purposes.\n */\nexport function getCurrentDate (config) {\n  return moment().tz(getUserTimezone()).format(OTP_API_DATE_FORMAT)\n}\n\n/**\n * Get the timezone name that is set for the user that is currently looking at\n * this website. Use a bit of hackery to force a specific timezone if in a\n * test environment.\n */\nexport function getUserTimezone () {\n  return process.env.NODE_ENV === 'test' ? process.env.TZ : moment.tz.guess()\n}\n"]}