{"version":3,"sources":["state.js"],"names":["getActiveSearch","otpState","searches","activeSearchId","getActiveItineraries","search","useRealtime","response","nonRealtimeResponse","plan","itineraries","getActiveItinerary","length","activeItinerary","hasValidLocation","locationKey","currentQuery","lat","lon","queryIsValid","getRealtimeEffects","realtimeItineraries","hasNonRealtimeItineraries","nonRealtimeItineraries","isAffectedByRealtimeData","duration","normalRoutes","legs","filter","leg","route","map","realtimeRoutes","normalDuration","realtimeDuration","routesDiffer","exceedsThreshold","Math","abs","config","realtimeEffectsDisplayThreshold","getShowUserSettings","persistence","enabled","getStopViewerConfig","stopViewer"],"mappings":"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","sourcesContent":["import isEqual from 'lodash.isequal'\n\n/**\n * Get the active search object\n * @param {Object} otpState the OTP state object\n * @returns {Object} an search object, or null if there is no active search\n */\nexport function getActiveSearch (otpState) {\n  return otpState.searches[otpState.activeSearchId]\n}\n\n/**\n * Get the active itineraries for the active search, which is dependent on\n * whether realtime or non-realtime results should be displayed\n * @param {Object} otpState the OTP state object\n * @return {Array}      array of itinerary objects from the OTP plan response,\n *                      or null if there is no active search\n */\nexport function getActiveItineraries (otpState) {\n  const search = getActiveSearch(otpState)\n  const { useRealtime } = otpState\n  // set response to use depending on useRealtime\n  const response = !search\n    ? null\n    : useRealtime ? search.response : search.nonRealtimeResponse\n  if (!response || !response.plan) return null\n  return response.plan.itineraries\n}\n\n/**\n * Get the active itinerary/profile for the active search object\n * @param {Object} otpState the OTP state object\n * @returns {Object} an itinerary object from the OTP plan response, or null if\n *   there is no active search or itinerary\n */\nexport function getActiveItinerary (otpState) {\n  const search = getActiveSearch(otpState)\n  const itineraries = getActiveItineraries(otpState)\n  if (!itineraries) return null\n  return itineraries.length > search.activeItinerary && search.activeItinerary >= 0\n    ? itineraries[search.activeItinerary]\n    : null\n}\n\n/**\n * Determine if the current query has a valid location, including lat/lon\n * @param {Object} otpState the OTP state object\n * @param {string} locationKey the location key ('from' or 'to')\n * @returns {boolean}\n */\nexport function hasValidLocation (otpState, locationKey) {\n  return otpState.currentQuery[locationKey] &&\n    otpState.currentQuery[locationKey].lat &&\n    otpState.currentQuery[locationKey].lon\n}\n\n/**\n * Determine if the current query is valid\n * @param {Object} otpState the OTP state object\n * @returns {boolean}\n */\nexport function queryIsValid (otpState) {\n  return hasValidLocation(otpState, 'from') &&\n    hasValidLocation(otpState, 'to')\n    // TODO: add mode validation\n    // TODO: add date/time validation\n}\n\nexport function getRealtimeEffects (otpState) {\n  const search = getActiveSearch(otpState)\n\n  const realtimeItineraries = search &&\n    search.response &&\n    search.response.plan\n    ? search.response.plan.itineraries\n    : null\n\n  const hasNonRealtimeItineraries = search &&\n    search.nonRealtimeResponse &&\n    search.nonRealtimeResponse.plan\n\n  const nonRealtimeItineraries = hasNonRealtimeItineraries\n    ? search.nonRealtimeResponse.plan.itineraries\n    : null\n\n  const isAffectedByRealtimeData = !!(\n    realtimeItineraries &&\n    hasNonRealtimeItineraries &&\n    // FIXME: Are realtime impacts only indicated by a change in the duration\n    // of the first itinerary\n    realtimeItineraries[0].duration !== nonRealtimeItineraries[0].duration\n  )\n\n  const normalRoutes = isAffectedByRealtimeData && nonRealtimeItineraries\n    ? nonRealtimeItineraries[0].legs.filter(leg => !!leg.route).map(leg => leg.route)\n    : []\n\n  const realtimeRoutes = isAffectedByRealtimeData && realtimeItineraries\n    ? realtimeItineraries[0].legs.filter(leg => !!leg.route).map(leg => leg.route)\n    : []\n\n  const normalDuration = isAffectedByRealtimeData && nonRealtimeItineraries\n    ? nonRealtimeItineraries[0].duration : 0\n\n  const realtimeDuration = isAffectedByRealtimeData && realtimeItineraries\n    ? realtimeItineraries[0].duration : 0\n  return {\n    isAffectedByRealtimeData,\n    normalRoutes,\n    realtimeRoutes,\n    routesDiffer: !isEqual(normalRoutes, realtimeRoutes),\n    normalDuration,\n    realtimeDuration,\n    exceedsThreshold: Math.abs(normalDuration - realtimeDuration) >= otpState.config.realtimeEffectsDisplayThreshold\n  }\n  // // TESTING: Return this instead to simulate a realtime-affected itinerary.\n  // return {\n  //   isAffectedByRealtimeData: true,\n  //   normalRoutes: ['10', '2', '10'],\n  //   realtimeRoutes: ['1', '2'],\n  //   routesDiffer: true,\n  //   normalDuration: 1000,\n  //   realtimeDuration: 800,\n  //   exceedsThreshold: true\n  // }\n}\n\n/**\n * Determine whether user settings panel is enabled.\n */\nexport function getShowUserSettings (otpState) {\n  return otpState.config.persistence && otpState.config.persistence.enabled\n}\n\nexport function getStopViewerConfig (otpState) {\n  return otpState.config.stopViewer\n}\n"]}