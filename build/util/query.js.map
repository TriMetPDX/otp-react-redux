{"version":3,"sources":["query.js"],"names":["defaultParams","getQueryParamProperty","paramInfo","property","query","ensureSingleAccessMode","queryModes","accessCount","filter","m","length","firstAccess","find","push","getUrlParams","qs","parse","window","location","href","split","getOtpUrlParams","Object","keys","key","startsWith","findLocationType","locations","types","match","l","indexOf","type","summarizeQuery","from","name","to","mode","getUiUrlParams","otpState","activeSearch","uiParams","ui_activeItinerary","activeItinerary","ui_activeSearch","activeSearchId","getTripOptionsFromQuery","keepPlace","options","assign","time","departArrive","date","getDefaultQueryParamValue","param","config","default","isNotDefaultQuery","activeModes","defaultModes","concat","queryIsDifferent","modesEqual","sort","every","value","index","forEach","queryParams","qp","routingTypes","includes","routingType","applicable","getDefaultQuery","defaultQuery","planParamsToQuery","params","parseLocationString","fromPlace","toPlace","arriveBy","isNaN","parseFloat","parts","coordinates","lat","lon"],"mappings":"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","sourcesContent":["import qs from 'qs'\n\nimport { getTransitModes, hasTransit, isAccessMode, toSentenceCase } from './itinerary'\nimport { coordsToString, matchLatLon, stringToCoords } from './map'\nimport queryParams from './query-params'\nimport { getActiveSearch } from './state'\nimport { getCurrentTime, getCurrentDate } from './time'\n\n/* The list of default parameters considered in the settings panel */\n\nexport const defaultParams = [\n  'wheelchair',\n  'maxWalkDistance',\n  'maxWalkTime',\n  'walkSpeed',\n  'maxBikeDistance',\n  'maxBikeTime',\n  'bikeSpeed',\n  'optimize',\n  'optimizeBike',\n  'maxEScooterDistance',\n  'watts'\n]\n\n/* A function to retrieve a property value from an entry in the query-params\n * table, checking for either a static value or a function */\n\nexport function getQueryParamProperty (paramInfo, property, query) {\n  return typeof paramInfo[property] === 'function'\n    ? paramInfo[property](query)\n    : paramInfo[property]\n}\n\nexport function ensureSingleAccessMode (queryModes) {\n  // Count the number of access modes\n  const accessCount = queryModes.filter(m => isAccessMode(m)).length\n\n  // If multiple access modes are specified, keep only the first one\n  if (accessCount > 1) {\n    const firstAccess = queryModes.find(m => isAccessMode(m))\n    queryModes = queryModes.filter(m => !isAccessMode(m) || m === firstAccess)\n\n  // If no access modes are specified, add 'WALK' as the default\n  } else if (accessCount === 0) {\n    queryModes.push('WALK')\n  }\n\n  return queryModes\n}\n\nexport function getUrlParams () {\n  return qs.parse(window.location.href.split('?')[1])\n}\n\nexport function getOtpUrlParams () {\n  return Object.keys(getUrlParams()).filter(key => !key.startsWith('ui_'))\n}\n\nfunction findLocationType (location, locations = [], types = ['home', 'work', 'suggested']) {\n  const match = locations.find(l => matchLatLon(l, location))\n  return match && types.indexOf(match.type) !== -1 ? match.type : null\n}\n\nexport function summarizeQuery (query, locations = []) {\n  const from = findLocationType(query.from, locations) || query.from.name.split(',')[0]\n  const to = findLocationType(query.to, locations) || query.to.name.split(',')[0]\n  const mode = hasTransit(query.mode)\n    ? 'Transit'\n    : toSentenceCase(query.mode)\n  return `${mode} from ${from} to ${to}`\n}\n\n/**\n * Assemble any UI-state properties to be tracked via URL into a single object\n * TODO: Expand to include additional UI properties\n */\n\nexport function getUiUrlParams (otpState) {\n  const activeSearch = getActiveSearch(otpState)\n  const uiParams = {\n    ui_activeItinerary: activeSearch ? activeSearch.activeItinerary : 0,\n    ui_activeSearch: otpState.activeSearchId\n  }\n  return uiParams\n}\n\nexport function getTripOptionsFromQuery (query, keepPlace = false) {\n  const options = Object.assign({}, query)\n  // Delete time/date options and from/to\n  delete options.time\n  delete options.departArrive\n  delete options.date\n  if (!keepPlace) {\n    delete options.from\n    delete options.to\n  }\n  return options\n}\n\n/**\n * Gets the default query param by executing the default value function with the\n * provided otp config if the default value is a function.\n */\nfunction getDefaultQueryParamValue (param, config) {\n  return typeof param.default === 'function' ? param.default(config) : param.default\n}\n\n/**\n * Determines whether the specified query differs from the default query, i.e.,\n * whether the user has modified any trip options (including mode) from their\n * default values.\n */\nexport function isNotDefaultQuery (query, config) {\n  const activeModes = query.mode.split(',')\n  const defaultModes = getTransitModes(config).concat(['WALK'])\n  let queryIsDifferent = false\n  const modesEqual = (activeModes.length === defaultModes.length) &&\n    activeModes.sort().every((value, index) => { return value === defaultModes.sort()[index] })\n\n  if (!modesEqual) {\n    queryIsDifferent = true\n  } else {\n    defaultParams.forEach(param => {\n      const paramInfo = queryParams.find(qp => qp.name === param)\n      // Check that the parameter applies to the specified routingType\n      if (!paramInfo.routingTypes.includes(query.routingType)) return\n      // Check that the applicability test (if provided) is satisfied\n      if (typeof paramInfo.applicable === 'function' &&\n        !paramInfo.applicable(query, config)) return\n      if (query[param] !== getDefaultQueryParamValue(paramInfo, config)) {\n        queryIsDifferent = true\n      }\n    })\n  }\n  return queryIsDifferent\n}\n\n/**\n * Get the default query to OTP based on the given config.\n *\n * @param config the config in the otp-rr store.\n */\nexport function getDefaultQuery (config) {\n  const defaultQuery = { routingType: 'ITINERARY' }\n  queryParams.filter(qp => 'default' in qp).forEach(qp => {\n    defaultQuery[qp.name] = getDefaultQueryParamValue(qp, config)\n  })\n  return defaultQuery\n}\n\n/**\n * Create a otp query based on a the url params.\n *\n * @param  {Object} params An object representing the parsed querystring of url\n *    params.\n * @param config the config in the otp-rr store.\n */\nexport function planParamsToQuery (params, config) {\n  const query = {}\n  for (var key in params) {\n    switch (key) {\n      case 'fromPlace':\n        query.from = parseLocationString(params.fromPlace)\n        break\n      case 'toPlace':\n        query.to = parseLocationString(params.toPlace)\n        break\n      case 'arriveBy':\n        query.departArrive = params.arriveBy === 'true'\n          ? 'ARRIVE'\n          : params.arriveBy === 'false'\n            ? 'DEPART'\n            : 'NOW'\n        break\n      case 'date':\n        query.date = params.date || getCurrentDate(config)\n        break\n      case 'time':\n        query.time = params.time || getCurrentTime(config)\n        break\n      default:\n        if (!isNaN(params[key])) query[key] = parseFloat(params[key])\n        else query[key] = params[key]\n    }\n  }\n  return query\n}\n\n/**\n * OTP allows passing a location in the form '123 Main St::lat,lon', so we check\n * for the double colon and parse the coordinates accordingly.\n */\nfunction parseLocationString (value) {\n  const parts = value.split('::')\n  const coordinates = parts[1]\n    ? stringToCoords(parts[1])\n    : stringToCoords(parts[0])\n  const name = parts[1]\n    ? parts[0]\n    : coordsToString(coordinates)\n  return coordinates.length === 2 ? {\n    name: name || null,\n    lat: coordinates[0] || null,\n    lon: coordinates[1] || null\n  } : null\n}\n"]}