{"version":3,"sources":["itinerary.js"],"names":["transitModes","getTransitModes","config","modes","map","tm","mode","isTransit","includes","hasTransit","modesStr","split","hasCar","isCar","hasBike","isBicycle","isBicycleRent","hasMicromobility","isMicromobility","hasHail","indexOf","hasRental","isWalk","startsWith","isAccessMode","getMapColor","get","getStepDirection","step","relativeDirection","absoluteDirection","toLowerCase","getStepInstructions","conjunction","streetName","getStepStreetName","getLegModeLabel","leg","hailedCar","routeLongName","toSentenceCase","getIcon","iconId","customIcons","getItineraryBounds","itinerary","coords","legs","forEach","legCoords","polyline","toGeoJSON","legGeometry","points","coordinates","c","getLegBounds","length","push","from","lat","lon","to","routeComparator","a","b","aComp","bComp","sortOrder","isNaN","parseInt","shortName","longName","legLocationAtDistance","distance","line","pt","geometry","e","legElevationAtDistance","traversed","unshift","i","start","elevDistanceSpan","console","warn","pct","elevSpan","getElevationProfile","steps","unitConversion","minElev","maxElev","gain","loss","previous","stepIndex","elevation","elev","diff","second","first","convertedElevation","getTextWidth","text","font","canvas","document","createElement","context","getContext","metrics","measureText","width","str","String","charAt","toUpperCase","substr","getLegIcon","customIconForLeg","customIconStr","iconStr","rentedCar","networks","tncData","company","rentedBike","rentedVehicle","getCompanyForNetwork","networkString","companies","find","co","id","getCompaniesLabelFromNetworks","network","filter","label","join","getModeForPlace","place","vertexType","getPlaceName","address","name","getTNCLocation","type","location","toFixed","calculatePhysicalActivity","walkDuration","bikeDuration","duration","caloriesBurned","calculateFares","transitFare","symbol","dollarsToString","dollars","centsToString","cents","Math","pow","fare","regular","reg","currency","defaultFractionDigits","minTNCFare","maxTNCFare","maxCost","minCost","getTimeZoneOffset","dstOffset","Date","startTime","getTimezoneOffset","agencyTimeZoneOffset"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { latLngBounds } from 'leaflet'\nimport polyline from '@mapbox/polyline'\nimport turfAlong from 'turf-along'\n\nimport ModeIcon from '../components/icons/mode-icon'\n\n// All OTP transit modes\nexport const transitModes = ['TRAM', 'BUS', 'SUBWAY', 'FERRY', 'RAIL', 'GONDOLA']\n\n/**\n * @param  {config} config OTP-RR configuration object\n * @return {Array}  List of all transit modes defined in config; otherwise default mode list\n */\n\nexport function getTransitModes (config) {\n  if (!config || !config.modes || !config.modes.transitModes) return transitModes\n  return config.modes.transitModes.map(tm => tm.mode)\n}\n\nexport function isTransit (mode) {\n  return transitModes.includes(mode) || mode === 'TRANSIT'\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are transit modes\n */\nexport function hasTransit (modesStr) {\n  for (const mode of modesStr.split(',')) {\n    if (isTransit(mode)) return true\n  }\n  return false\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are car-based modes\n */\nexport function hasCar (modesStr) {\n  if (modesStr) {\n    for (const mode of modesStr.split(',')) {\n      if (isCar(mode)) return true\n    }\n  }\n  return false\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are bicycle-based modes\n */\nexport function hasBike (modesStr) {\n  if (modesStr) {\n    for (const mode of modesStr.split(',')) {\n      if (isBicycle(mode) || isBicycleRent(mode)) return true\n    }\n  }\n  return false\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are micromobility-based modes\n */\nexport function hasMicromobility (modesStr) {\n  if (modesStr) {\n    for (const mode of modesStr.split(',')) {\n      if (isMicromobility(mode)) return true\n    }\n  }\n  return false\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes is a hailing mode\n */\nexport function hasHail (modesStr) {\n  if (modesStr) {\n    for (const mode of modesStr.split(',')) {\n      if (mode.indexOf('_HAIL') > -1) return true\n    }\n  }\n  return false\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes is a rental mode\n */\nexport function hasRental (modesStr) {\n  if (modesStr) {\n    for (const mode of modesStr.split(',')) {\n      if (mode.indexOf('_RENT') > -1) return true\n    }\n  }\n  return false\n}\n\nexport function isWalk (mode) {\n  if (!mode) return false\n\n  return mode === 'WALK'\n}\n\nexport function isBicycle (mode) {\n  if (!mode) return false\n\n  return mode === 'BICYCLE'\n}\n\nexport function isBicycleRent (mode) {\n  if (!mode) return false\n\n  return mode === 'BICYCLE_RENT'\n}\n\nexport function isCar (mode) {\n  if (!mode) return false\n  return mode.startsWith('CAR')\n}\n\nexport function isMicromobility (mode) {\n  if (!mode) return false\n  return mode.startsWith('MICROMOBILITY')\n}\n\nexport function isAccessMode (mode) {\n  return isWalk(mode) ||\n    isBicycle(mode) ||\n    isBicycleRent(mode) ||\n    isCar(mode) ||\n    isMicromobility(mode)\n}\n\nexport function getMapColor (mode) {\n  mode = mode || this.get('mode')\n  if (mode === 'WALK') return '#444'\n  if (mode === 'BICYCLE') return '#0073e5'\n  if (mode === 'SUBWAY') return '#f00'\n  if (mode === 'RAIL') return '#b00'\n  if (mode === 'BUS') return '#080'\n  if (mode === 'TRAM') return '#800'\n  if (mode === 'FERRY') return '#008'\n  if (mode === 'CAR') return '#444'\n  if (mode === 'MICROMOBILITY') return '#f5a729'\n  return '#aaa'\n}\n\n// TODO: temporary code; handle via migrated OTP i18n language table\nexport function getStepDirection (step) {\n  switch (step.relativeDirection) {\n    case 'DEPART': return 'Head ' + step.absoluteDirection.toLowerCase()\n    case 'LEFT': return 'Left'\n    case 'HARD_LEFT': return 'Hard left'\n    case 'SLIGHTLY_LEFT': return 'Slight left'\n    case 'CONTINUE': return 'Continue'\n    case 'SLIGHTLY_RIGHT': return 'Slight right'\n    case 'RIGHT': return 'Right'\n    case 'HARD_RIGHT': return 'Hard right'\n    case 'CIRCLE_CLOCKWISE': return 'Follow circle clockwise'\n    case 'CIRCLE_COUNTERCLOCKWISE': return 'Follow circle counterclockwise'\n    case 'ELEVATOR': return 'Take elevator'\n    case 'UTURN_LEFT': return 'Left U-turn'\n    case 'UTURN_RIGHT': return 'Right U-turn'\n  }\n  return step.relativeDirection\n}\n\nexport function getStepInstructions (step) {\n  const conjunction = step.relativeDirection === 'ELEVATOR' ? 'to' : 'on'\n  return `${getStepDirection(step)} ${conjunction} ${step.streetName}`\n}\n\nexport function getStepStreetName (step) {\n  if (step.streetName === 'road') return 'Unnamed Road'\n  if (step.streetName === 'path') return 'Unnamed Path'\n  return step.streetName\n}\n\nexport function getLegModeLabel (leg) {\n  switch (leg.mode) {\n    case 'BICYCLE_RENT': return 'Biketown'\n    case 'CAR': return leg.hailedCar ? 'Ride' : 'Drive'\n    case 'GONDOLA': return 'Aerial Tram'\n    case 'TRAM':\n      if (leg.routeLongName.toLowerCase().indexOf('streetcar') !== -1) return 'Streetcar'\n      return 'Light Rail'\n    case 'MICROMOBILITY': return 'Ride'\n  }\n  return toSentenceCase(leg.mode)\n}\n\n/**\n * Returns a react element of the desired icon. If customIcons are defined, then\n * the icon will be attempted to be used from that lookup of icons. Otherwise,\n * a ModeIcon element will be returned.\n *\n * @param  {string} iconId  A string with the desired icon ID. This icon can\n * include modes or companies or anything that is defined in the customIcons.\n * @param  {[Map<string, React.Element>]} customIcons A customized lookup of\n * icons. These are defined as part of the implementing webapp. If this lookup\n * is not defined, then the ModeIcon class will be used instead.\n * @return {React.Element}\n */\nexport function getIcon (iconId, customIcons) {\n  // Check if there is a custom icon\n  if (customIcons && iconId in customIcons) {\n    return customIcons[iconId]\n  }\n\n  // Custom icon not available for the given iconId. Use the ModeIcon component\n  // to show the icon based on the iconId, but always use the default car icon\n  // for any car-based modes that didn't have custom icon\n  if (iconId && iconId.startsWith('CAR')) iconId = 'CAR'\n  return <ModeIcon mode={iconId} />\n}\n\nexport function getItineraryBounds (itinerary) {\n  let coords = []\n  itinerary.legs.forEach(leg => {\n    const legCoords = polyline\n      .toGeoJSON(leg.legGeometry.points)\n      .coordinates.map(c => [c[1], c[0]])\n    coords = [...coords, ...legCoords]\n  })\n  return latLngBounds(coords)\n}\n\n/**\n * Return a leaflet LatLngBounds object that encloses the given leg's geometry.\n */\nexport function getLegBounds (leg) {\n  const coords = polyline\n    .toGeoJSON(leg.legGeometry.points)\n    .coordinates.map(c => [c[1], c[0]])\n\n  // in certain cases, there might be zero-length coordinates in the leg\n  // geometry. In these cases, build us an array of coordinates using the from\n  // and to data of the leg.\n  if (coords.length === 0) {\n    coords.push([leg.from.lat, leg.from.lon], [leg.to.lat, leg.to.lon])\n  }\n  return latLngBounds(coords)\n}\n\nexport function routeComparator (a, b) {\n  let aComp, bComp\n  if (a.sortOrder !== null && b.sortOrder !== null) {\n    aComp = a.sortOrder\n    bComp = b.sortOrder\n  } else if (!isNaN(parseInt(a.shortName)) && !isNaN(parseInt(b.shortName))) {\n    aComp = parseInt(a.shortName)\n    bComp = parseInt(b.shortName)\n  } else {\n    aComp = a.shortName || a.longName\n    bComp = b.shortName || b.longName\n  }\n  if (aComp < bComp) return -1\n  if (aComp > bComp) return 1\n  return 0\n}\n\n/* Returns an interpolated lat-lon at a specified distance along a leg */\n\nexport function legLocationAtDistance (leg, distance) {\n  if (!leg.legGeometry) return null\n\n  try {\n    const line = polyline.toGeoJSON(leg.legGeometry.points)\n    const pt = turfAlong(line, distance, 'meters')\n    if (pt && pt.geometry && pt.geometry.coordinates) {\n      return [\n        pt.geometry.coordinates[1],\n        pt.geometry.coordinates[0]\n      ]\n    }\n  } catch (e) { }\n\n  return null\n}\n\n/* Returns an interpolated elevation at a specified distance along a leg */\n\nexport function legElevationAtDistance (points, distance) {\n  // Iterate through the combined elevation profile\n  let traversed = 0\n  // If first point distance is not zero, insert starting point at zero with\n  // null elevation. Encountering this value should trigger the warning below.\n  if (points[0][0] > 0) {\n    points.unshift([0, null])\n  }\n  for (let i = 1; i < points.length; i++) {\n    const start = points[i - 1]\n    const elevDistanceSpan = points[i][0] - start[0]\n    if (distance >= traversed && distance <= traversed + elevDistanceSpan) {\n      // Distance falls within this point and the previous one;\n      // compute & return iterpolated elevation value\n      if (start[1] === null) {\n        console.warn('Elevation value does not exist for distance.', distance, traversed)\n        return null\n      }\n      const pct = (distance - traversed) / elevDistanceSpan\n      const elevSpan = points[i][1] - start[1]\n      return start[1] + elevSpan * pct\n    }\n    traversed += elevDistanceSpan\n  }\n  console.warn('Elevation value does not exist for distance.', distance, traversed)\n  return null\n}\n\n// Iterate through the steps, building the array of elevation points and\n// keeping track of the minimum and maximum elevations reached\nexport function getElevationProfile (steps, unitConversion = 1) {\n  let minElev = 100000\n  let maxElev = -100000\n  let traversed = 0\n  let gain = 0\n  let loss = 0\n  let previous = null\n  const points = []\n  steps.forEach((step, stepIndex) => {\n    if (!step.elevation || step.elevation.length === 0) {\n      traversed += step.distance\n      return\n    }\n    for (let i = 0; i < step.elevation.length; i++) {\n      const elev = step.elevation[i]\n      if (previous) {\n        const diff = (elev.second - previous.second) * unitConversion\n        if (diff > 0) gain += diff\n        else loss += diff\n      }\n      if (i === 0 && elev.first !== 0) {\n        // console.warn(`No elevation data available for step ${stepIndex}-${i} at beginning of segment`, elev)\n      }\n      const convertedElevation = elev.second * unitConversion\n      if (convertedElevation < minElev) minElev = convertedElevation\n      if (convertedElevation > maxElev) maxElev = convertedElevation\n      points.push([traversed + elev.first, elev.second])\n      // Insert \"filler\" point if the last point in elevation profile does not\n      // reach the full distance of the step.\n      if (i === step.elevation.length - 1 && elev.first !== step.distance) {\n        // points.push([traversed + step.distance, elev.second])\n      }\n      previous = elev\n    }\n    traversed += step.distance\n  })\n  return { maxElev, minElev, points, traversed, gain, loss }\n}\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {string} text The text to be rendered.\n * @param {string} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nexport function getTextWidth (text, font = '22px Arial') {\n  // re-use canvas object for better performance\n  var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'))\n  var context = canvas.getContext('2d')\n  context.font = font\n  var metrics = context.measureText(text)\n  return metrics.width\n}\n\nexport function toSentenceCase (str) {\n  if (str == null) {\n    return ''\n  }\n  str = String(str)\n  return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()\n}\n\n/**\n * Return an icon depending on the leg info\n *\n * @param  {Object} leg  The leg data of an itinerary in an OTP trip plan result\n * @param  {[Object]} customIcons If defined for this webapp, the custom icons\n * consist of a lookup table of icons to return for a specific icon ID. These\n * icons typically show either companies or transport modes, but they could show\n * other icons too. See this file in trimet-mod-otp for an example setup:\n * https://github.com/ibi-group/trimet-mod-otp/blob/6a32e2142655c4f4d09a3f349b971b7505e2866a/lib/icons/index.js#L24-L55\n */\nexport function getLegIcon (leg, customIcons) {\n  // check if a custom function exists for determining the icon for a leg\n  if (customIcons && typeof customIcons.customIconForLeg === 'function') {\n    // function exits, get the icon string lookup. It's possible for there to be\n    // a custom function that only returns a string for when a leg meets the\n    // criteria of the custom function\n    const customIconStr = customIcons.customIconForLeg(leg)\n    // the customIconStr could be undefined for this leg, but if it is not, then\n    // immediately return this custom icon for the leg\n    if (customIconStr) return getIcon(customIconStr, customIcons)\n  }\n  let iconStr = leg.mode\n  if (iconStr === 'CAR' && leg.rentedCar) {\n    iconStr = leg.from.networks[0]\n  } else if (iconStr === 'CAR' && leg.tncData) {\n    iconStr = leg.tncData.company\n  } else if (iconStr === 'BICYCLE' && leg.rentedBike && leg.from.networks) {\n    iconStr = leg.from.networks[0]\n  } else if (iconStr === 'MICROMOBILITY' && leg.rentedVehicle && leg.from.networks) {\n    iconStr = leg.from.networks[0]\n  }\n\n  return getIcon(iconStr, customIcons)\n}\n\n/**\n * Get the configured company object for the given network string if the company\n * has been defined in the provided companies array config.\n */\nfunction getCompanyForNetwork (networkString, companies = []) {\n  const company = companies.find(co => co.id === networkString)\n  if (!company) {\n    console.warn(`No company found in config.yml that matches rented vehicle network: ${networkString}`, companies)\n  }\n  return company\n}\n\n/**\n * Get a string label to display from a list of vehicle rental networks.\n *\n * @param  {Array<string>} networks  A list of network ids.\n * @param  {Array<object>}  [companies=[]] An optional list of the companies config.\n * @return {string}  A label for use in presentation on a website.\n */\nexport function getCompaniesLabelFromNetworks (networks, companies = []) {\n  return networks.map(network => getCompanyForNetwork(network, companies))\n    .filter(co => !!co)\n    .map(co => co.label)\n    .join('/')\n}\n\n/**\n * Returns mode name by checking the vertex type (VertexType class in OTP) for\n * the provided place. NOTE: this is currently only intended for vehicles at\n * the moment (not transit or walking).\n *\n * TODO: I18N\n * @param  {string} place place from itinerary leg\n */\nexport function getModeForPlace (place) {\n  switch (place.vertexType) {\n    case 'CARSHARE':\n      return 'car'\n    case 'VEHICLERENTAL':\n      return 'E-scooter'\n    // TODO: Should the type change depending on bike vertex type?\n    case 'BIKESHARE':\n    case 'BIKEPARK':\n      return 'bike'\n    // If company offers more than one mode, default to `vehicle` string.\n    default:\n      return 'vehicle'\n  }\n}\n\nexport function getPlaceName (place, companies) {\n  // If address is provided (i.e. for carshare station, use it)\n  if (place.address) return place.address.split(',')[0]\n  if (place.networks && place.vertexType === 'VEHICLERENTAL') {\n    // For vehicle rental pick up, do not use the place name. Rather, use\n    // company name + vehicle type (e.g., SPIN E-scooter). Place name is often just\n    // a UUID that has no relevance to the actual vehicle. For bikeshare, however,\n    // there are often hubs or bikes that have relevant names to the user.\n    const company = getCompanyForNetwork(place.networks[0], companies)\n    if (company) {\n      return `${company.label} ${getModeForPlace(place)}`\n    }\n  }\n  // Default to place name\n  return place.name\n}\n\nexport function getTNCLocation (leg, type) {\n  const location = leg[type]\n  return `${location.lat.toFixed(5)},${location.lon.toFixed(5)}`\n}\n\nexport function calculatePhysicalActivity (itinerary) {\n  let walkDuration = 0\n  let bikeDuration = 0\n  for (const leg of itinerary.legs) {\n    if (leg.mode.startsWith('WALK')) walkDuration += leg.duration\n    if (leg.mode.startsWith('BICYCLE')) bikeDuration += leg.duration\n  }\n  const caloriesBurned =\n    walkDuration / 3600 * 280 +\n    bikeDuration / 3600 * 290\n  return {\n    bikeDuration,\n    caloriesBurned,\n    walkDuration\n  }\n}\n\nexport function calculateFares (itinerary) {\n  let transitFare = 0\n  let symbol = '$' // default to USD\n  let dollarsToString = dollars => `${symbol}${dollars.toFixed(2)}`\n  let centsToString = cents => `${symbol}${(cents / Math.pow(10, 2)).toFixed(2)}`\n  if (itinerary.fare && itinerary.fare.fare && itinerary.fare.fare.regular) {\n    const reg = itinerary.fare.fare.regular\n    symbol = reg.currency.symbol\n    transitFare = reg.cents\n    centsToString = cents => `${symbol}${(cents / Math.pow(10, reg.currency.defaultFractionDigits)).toFixed(reg.currency.defaultFractionDigits)}`\n    dollarsToString = dollars => `${symbol}${dollars.toFixed(2)}`\n  }\n\n  // Process any TNC fares\n  let minTNCFare = 0\n  let maxTNCFare = 0\n  for (const leg of itinerary.legs) {\n    if (leg.mode === 'CAR' && leg.hailedCar && leg.tncData) {\n      const { maxCost, minCost } = leg.tncData\n      // TODO: Support non-USD\n      minTNCFare += minCost\n      maxTNCFare += maxCost\n    }\n  }\n  return {\n    centsToString,\n    dollarsToString,\n    maxTNCFare,\n    minTNCFare,\n    transitFare\n  }\n}\n\nexport function getTimeZoneOffset (itinerary) {\n  if (!itinerary.legs || !itinerary.legs.length) return 0\n\n  // Determine if there is a DST offset between now and the itinerary start date\n  const dstOffset = new Date(itinerary.startTime).getTimezoneOffset() - new Date().getTimezoneOffset()\n\n  return itinerary.legs[0].agencyTimeZoneOffset + (new Date().getTimezoneOffset() + dstOffset) * 60000\n}\n"]}