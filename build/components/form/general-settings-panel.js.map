{"version":3,"sources":["general-settings-panel.js"],"names":["GeneralSettingsPanel","props","paramNames","query","config","map","param","paramInfo","queryParams","find","qp","name","routingTypes","includes","routingType","applicable","selector","label","Component","PropTypes","object","array","defaultParams","mapStateToProps","state","ownProps","otp","currentQuery","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,oB;;;;;;;;;;;;;6BAYM;AAAA,wBAC8B,KAAKC,KADnC;AAAA,UACAC,UADA,eACAA,UADA;AAAA,UACYC,KADZ,eACYA,KADZ;AAAA,UACmBC,MADnB,eACmBA,MADnB;AAER,aACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACGF,UAAU,CAACG,GAAX,CAAe,UAAAC,KAAK,EAAI;AACvB,YAAMC,SAAS,GAAGC,qBAAYC,IAAZ,CAAiB,UAAAC,EAAE;AAAA,iBAAIA,EAAE,CAACC,IAAH,KAAYL,KAAhB;AAAA,SAAnB,CAAlB,CADuB,CAEvB;;;AACA,YAAI,CAACC,SAAS,CAACK,YAAV,CAAuBC,QAAvB,CAAgCV,KAAK,CAACW,WAAtC,CAAL,EAAyD,OAHlC,CAKvB;;AACA,YAAI,OAAOP,SAAS,CAACQ,UAAjB,KAAgC,UAAhC,IACF,CAACR,SAAS,CAACQ,UAAV,CAAqBZ,KAArB,EAA4BC,MAA5B,CADH,EACwC,OAPjB,CASvB;;AACA,gBAAQG,SAAS,CAACS,QAAlB;AACE,eAAK,UAAL;AACE,mBAAO,6BAAC,yBAAD;AACL,cAAA,GAAG,EAAET,SAAS,CAACI,IADV;AAEL,cAAA,IAAI,EAAEJ,SAAS,CAACI,IAFX;AAGL,cAAA,KAAK,EAAER,KAAK,CAACI,SAAS,CAACI,IAAX,CAHP;AAIL,cAAA,KAAK,EAAE,kCAAsBJ,SAAtB,EAAiC,OAAjC,EAA0CJ,KAA1C,CAJF;AAKL,cAAA,OAAO,EAAE,kCAAsBI,SAAtB,EAAiC,SAAjC,EAA4CJ,KAA5C;AALJ,cAAP;;AAOF,eAAK,UAAL;AACE,mBAAO,6BAAC,yBAAD;AACL,cAAA,GAAG,EAAEI,SAAS,CAACU,KADV;AAEL,cAAA,IAAI,EAAEV,SAAS,CAACI,IAFX;AAGL,cAAA,KAAK,EAAER,KAAK,CAACI,SAAS,CAACI,IAAX,CAHP;AAIL,cAAA,KAAK,EAAE,kCAAsBJ,SAAtB,EAAiC,OAAjC,EAA0CJ,KAA1C;AAJF,cAAP;AAVJ;AAiBD,OA3BA,CADH,CADF;AAgCD;;;;EA9CgCe,gB,GAiDnC;;;gBAjDMlB,oB,eACe;AACjBG,EAAAA,KAAK,EAAEgB,mBAAUC,MADA;AAEjBlB,EAAAA,UAAU,EAAEiB,mBAAUE;AAFL,C;;gBADfrB,oB,kBAMkB;AACpB;AACA;AACAE,EAAAA,UAAU,EAAEoB;AAHQ,C;;AA6CxB,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AACLrB,IAAAA,MAAM,EAAEoB,KAAK,CAACE,GAAN,CAAUtB,MADb;AAELD,IAAAA,KAAK,EAAEqB,KAAK,CAACE,GAAN,CAAUC;AAFZ,GAAP;AAID,CALD;;AAOA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAWJ,QAAX,EAAwB;AACjD,SAAO,EAAP;AAED,CAHD;;eAKe,yBAAQF,eAAR,EAAyBK,kBAAzB,EAA6C5B,oBAA7C,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport CheckboxSelector from './checkbox-selector'\nimport DropdownSelector from './dropdown-selector'\nimport queryParams from '../../util/query-params'\nimport { defaultParams, getQueryParamProperty } from '../../util/query'\n\nclass GeneralSettingsPanel extends Component {\n  static propTypes = {\n    query: PropTypes.object,\n    paramNames: PropTypes.array\n  }\n\n  static defaultProps = {\n    // The universe of properties to include in this form:\n    // TODO: allow override in config\n    paramNames: defaultParams\n  }\n\n  render () {\n    const { paramNames, query, config } = this.props\n    return (\n      <div className='general-settings-panel'>\n        {paramNames.map(param => {\n          const paramInfo = queryParams.find(qp => qp.name === param)\n          // Check that the parameter applies to the specified routingType\n          if (!paramInfo.routingTypes.includes(query.routingType)) return\n\n          // Check that the applicability test (if provided) is satisfied\n          if (typeof paramInfo.applicable === 'function' &&\n            !paramInfo.applicable(query, config)) return\n\n          // Create the UI component based on the selector type\n          switch (paramInfo.selector) {\n            case 'DROPDOWN':\n              return <DropdownSelector\n                key={paramInfo.name}\n                name={paramInfo.name}\n                value={query[paramInfo.name]}\n                label={getQueryParamProperty(paramInfo, 'label', query)}\n                options={getQueryParamProperty(paramInfo, 'options', query)}\n              />\n            case 'CHECKBOX':\n              return <CheckboxSelector\n                key={paramInfo.label}\n                name={paramInfo.name}\n                value={query[paramInfo.name]}\n                label={getQueryParamProperty(paramInfo, 'label', query)}\n              />\n          }\n        })}\n      </div>\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    config: state.otp.config,\n    query: state.otp.currentQuery\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralSettingsPanel)\n"]}