{"version":3,"sources":["settings-selector-panel.js"],"names":["SettingsSelectorPanel","props","_setSoloMode","newMode","referenceOwnMode","queryModes","setQueryParam","nonOwnModes","filter","m","startsWith","mode","join","_replaceOwnMode","companies","_getCompaniesForMode","modeStr","config","co","modes","indexOf","map","id","options","query","defaults","clearDefaultSettings","storeDefaultSettings","resetForm","newQueryModes","slice","queryParamUpdate","_lastTransitMode","split","length","push","company","toUpperCase","queryCompanies","icons","configCompanies","accessModes","some","accessMode","activeCompanies","companyMode","marginBottom","textAlign","classNames","_companyIsActive","marginTop","marginLeft","marginRight","_toggleCompany","display","fill","width","height","verticalAlign","label","clear","exclusiveModes","modeHasTransit","key","children","spacer","forEach","exclusiveMode","idx","_setWalkOnly","_setBikeOnly","_setMicromobilityOnly","Error","state","activePanel","Boolean","includes","transitModes","showUserSettings","bicycleModes","micromobilityModes","queryIsDefault","rememberIsDisabled","_toggleStoredSettings","_resetForm","_modeIsActive","_setAccessMode","k","_renderExclusiveAccessSelectors","fontSize","margin","float","option","action","_setOwnBike","_setRentedBike","iconWidth","_setOwnMicromobility","_setRentedMicromobility","_renderCompanies","_toggleTransitMode","Component","PropTypes","object","mapStateToProps","ownProps","otp","currentQuery","user","routingType","modeGroups","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Row, Col, Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport {\n  clearDefaultSettings,\n  resetForm,\n  setQueryParam,\n  storeDefaultSettings\n} from '../../actions/form'\nimport GeneralSettingsPanel from './general-settings-panel'\nimport Icon from '../narrative/icon'\nimport ModeButton from './mode-button'\nimport {\n  getIcon,\n  isAccessMode,\n  hasBike,\n  isTransit,\n  hasMicromobility,\n  hasHail,\n  hasRental,\n  hasTransit,\n  getTransitModes\n} from '../../util/itinerary'\nimport { getTripOptionsFromQuery, isNotDefaultQuery } from '../../util/query'\nimport { getShowUserSettings } from '../../util/state'\n\nclass SettingsSelectorPanel extends Component {\n  static propTypes = {\n    icons: PropTypes.object\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = { activePanel: 'MODES' }\n  }\n\n  // returns whether a micromobility company is selected or not\n  _companyIsActive (company) {\n    const {companies} = this.props\n    return companies && companies.indexOf(company.id) > -1\n  }\n\n  // Returns whether a particular mode or TNC agency is active\n  _modeIsActive (mode) {\n    const { companies, queryModes } = this.props\n    if (mode.mode === 'CAR_HAIL' || mode.mode === 'CAR_RENT') {\n      return Boolean(companies && mode.company && companies.includes(mode.company.toUpperCase()))\n    }\n\n    for (const m of queryModes) {\n      if (m === mode.mode) return true\n    }\n    // All transit modes are selected\n    // if (isTransit(mode.mode) && queryModes.indexOf('TRANSIT') !== -1) return true\n    return false\n  }\n\n  _setSoloMode (mode) {\n    // save current access/transit modes\n    if (hasTransit(this.props.mode)) this._lastTransitMode = this.props.mode\n    this.props.setQueryParam({ mode })\n  }\n\n  _setWalkOnly = () => { this._setSoloMode('WALK') }\n\n  _setBikeOnly = () => { this._setSoloMode('BICYCLE') }\n\n  _setMicromobilityOnly = () => { this._setSoloMode('MICROMOBILITY') }\n\n  /**\n   * Replace own mode with new mode. The only mode will have already been set,\n   * so this toggles whether the own mode includes a rental.\n   */\n  _replaceOwnMode = (newMode, referenceOwnMode) => {\n    const { queryModes, setQueryParam } = this.props\n    const nonOwnModes = queryModes.filter(m => !m.startsWith(referenceOwnMode))\n    setQueryParam({ mode: [...nonOwnModes, newMode].join(',') })\n  }\n\n  _setOwnBike = () => this._replaceOwnMode('BICYCLE', 'BICYCLE')\n\n  _setRentedBike = () => this._replaceOwnMode('BICYCLE_RENT', 'BICYCLE')\n\n  _setOwnMicromobility = () => this._replaceOwnMode('MICROMOBILITY', 'MICROMOBILITY')\n\n  _setRentedMicromobility = () => {\n    this._replaceOwnMode('MICROMOBILITY_RENT', 'MICROMOBILITY')\n    this.props.setQueryParam({ companies: this._getCompaniesForMode('MICROMOBILITY_RENT') })\n  }\n\n  _getCompaniesForMode = (modeStr) => {\n    const {config} = this.props\n    return config.companies\n      .filter(co => co.modes.indexOf(modeStr) > -1)\n      .map(co => co.id)\n      .join(',')\n  }\n\n  _toggleCompany (company) {\n    const {companies, setQueryParam} = this.props\n\n    // set company if no companies set yet\n    if (!companies) {\n      setQueryParam({ companies: company })\n      return\n    }\n\n    // add or remove from existing companies\n    if (companies.indexOf(company) > -1) {\n      // company already present in query, remove\n      setQueryParam({\n        companies: companies\n          .split(',')\n          .filter(co => co !== company)\n          .join(',')\n      })\n    } else {\n      // company not yet present, add to string list\n      setQueryParam({ companies: `${companies},${company}` })\n    }\n  }\n\n  _toggleTransitMode (mode) {\n    const {queryModes, setQueryParam} = this.props\n    const modeStr = mode.mode || mode\n    let newQueryModes = queryModes.slice(0) // Clone the modes array\n\n    // do not allow the last transit mode to be deselected\n    const transitModes = newQueryModes.filter(m => isTransit(m))\n    if (transitModes.length === 1 && transitModes[0] === modeStr) return\n\n    // If mode is currently selected, deselect it\n    if (newQueryModes.includes(modeStr)) {\n      newQueryModes = newQueryModes.filter(m => m !== modeStr)\n    // Or, if mode is currently not selected, select it\n    } else if (!newQueryModes.includes(modeStr)) {\n      newQueryModes.push(modeStr)\n    }\n    setQueryParam({ mode: newQueryModes.join(',') })\n  }\n\n  _toggleStoredSettings = () => {\n    const options = getTripOptionsFromQuery(this.props.query)\n    // If user defaults are set, clear them. Otherwise, store them.\n    if (this.props.defaults) this.props.clearDefaultSettings()\n    else this.props.storeDefaultSettings(options)\n  }\n\n  _resetForm = () => this.props.resetForm()\n\n  _setAccessMode = (mode) => {\n    const {config, queryModes} = this.props\n    let newQueryModes = queryModes.slice(0) // Clone the modes array\n    const modeStr = mode.mode || mode\n\n    // Create object to contain multiple parameter updates if needed (i.e. 'mode', 'compainies')\n    const queryParamUpdate = {}\n\n    if (this._lastTransitMode) {\n      // Restore previous transit selection, if present\n      newQueryModes = this._lastTransitMode.split(',').filter(m => !isAccessMode(m))\n      this._lastTransitMode = null\n    } else {\n      // Otherwise, retain any currently selected transit modes\n      newQueryModes = newQueryModes.filter(m => !isAccessMode(m))\n    }\n\n    // If no transit modes selected, select all\n    if (!newQueryModes || newQueryModes.length === 0) {\n      newQueryModes = getTransitModes(config)\n    }\n\n    // Add the access mode\n    newQueryModes.push(modeStr)\n\n    // apply needed companies to query\n    queryParamUpdate.companies = mode.company\n      // mode is associated with a specific company\n      ? mode.company.toUpperCase()\n      // mode is either a rental or hailing mode, but not associated with\n      // a specific company\n      : (hasRental(modeStr) || hasHail(modeStr))\n        // when switching, add all companies at first\n        ? this._getCompaniesForMode(modeStr)\n        // mode is not renting or hailing and not associated with any company\n        : null\n\n    queryParamUpdate.mode = newQueryModes.join(',')\n\n    this.props.setQueryParam(queryParamUpdate)\n  }\n\n  _renderCompanies = () => {\n    const {companies: queryCompanies, config, icons, mode} = this.props\n    const {companies: configCompanies, modes} = config\n    const {accessModes} = modes\n\n    // check if a single company has an exclusive button\n    if (queryCompanies && accessModes.some(\n      accessMode => accessMode.company === queryCompanies.toUpperCase())\n    ) {\n      // a match has been found for an access mode that exclusively belongs to\n      // a particular company\n      return null\n    }\n\n    // hack for TriMet-MOD project, don't show companies if Biketown enabled\n    // when using just bike rentals\n    if (mode && mode.indexOf('BICYCLE_RENT') > -1) {\n      return null\n    }\n\n    // check if renting or hailing\n    if (hasRental(mode) || hasHail(mode)) {\n      const queryModes = mode.split(',')\n      const activeCompanies = configCompanies\n        .filter(company =>\n          company.modes\n            .split(',')\n            .some(companyMode => queryModes.indexOf(companyMode) > -1)\n        )\n\n      return (\n        <div style={{ marginBottom: 16 }}>\n          <div className='setting-label'>Use Companies</div>\n          <div style={{ textAlign: 'left' }}>\n            {activeCompanies.length === 0 &&\n              <p>No comapnies available for this mode!</p>\n            }\n            {activeCompanies.map((company) => {\n              let classNames = ['select-button']\n              if (this._companyIsActive(company)) classNames.push('active')\n              return <Button key={company.id}\n                className={classNames.join(' ')}\n                style={{ marginTop: 3, marginBottom: 3, marginLeft: 0, marginRight: 5 }}\n                onClick={() => this._toggleCompany(company.id)}\n              >\n                <div\n                  className='mode-icon'\n                  style={{\n                    display: 'inline-block',\n                    fill: '#000',\n                    width: 16,\n                    height: 16,\n                    marginRight: 5,\n                    verticalAlign: 'middle'\n                  }}\n                >\n                  {getIcon(company.id, icons)}\n                </div>\n                {company.label}\n              </Button>\n            })}\n          </div>\n          <div style={{ clear: 'both' }} />\n        </div>\n      )\n    }\n  }\n\n  _renderExclusiveAccessSelectors = () => {\n    const {config, mode, icons} = this.props\n    const {exclusiveModes} = config.modes\n    const modeHasTransit = hasTransit(mode)\n    // Use int for array element keys\n    let key = 0\n    if (!exclusiveModes) return null\n\n    // create an array of children to display within a mode-group-row\n    // at most 2 exclusive modes will be displayed side-by-side\n    const children = []\n    const spacer = () => (\n      <Col xs={2} key={key++} style={{ height: 44 }}>&nbsp;</Col>\n    )\n\n    exclusiveModes.forEach((exclusiveMode, idx) => {\n      // add left padding for every evenly indexed exclusiveMode\n      if (idx % 2 === 0) {\n        children.push(spacer())\n      }\n\n      switch (exclusiveMode) {\n        case 'WALK':\n          children.push(\n            <Col key={key++} xs={4}>\n              <ModeButton\n                enabled\n                key={key++}\n                active={mode === 'WALK'}\n                icons={icons}\n                mode={'WALK'}\n                height={36}\n                label={'Walk Only'}\n                inlineLabel\n                onClick={this._setWalkOnly}\n              />\n            </Col>\n          )\n          break\n        case 'BICYCLE':\n          children.push(\n            <Col key={key++} xs={4}>\n              <ModeButton\n                enabled\n                key={key++}\n                active={!modeHasTransit && hasBike(mode)}\n                icons={icons}\n                mode={'BICYCLE'}\n                height={36}\n                label={'Bike Only'}\n                inlineLabel\n                onClick={this._setBikeOnly}\n              />\n            </Col>\n          )\n          break\n        case 'MICROMOBILITY':\n          children.push(\n            <Col key={key++} xs={4}>\n              <ModeButton\n                enabled\n                key={key++}\n                active={!modeHasTransit && hasMicromobility(mode)}\n                icons={icons}\n                mode={'MICROMOBILITY'}\n                height={36}\n                label={'E-scooter Only'}\n                inlineLabel\n                onClick={this._setMicromobilityOnly}\n              />\n            </Col>\n          )\n          break\n        default:\n          throw new Error(`Unsupported exclusive mode: ${exclusiveMode}`)\n      }\n\n      // add right padding for every odd indexed exclusiveMode\n      if (idx % 2 !== 0) {\n        children.push(spacer())\n      }\n    })\n\n    return (\n      <Row className='mode-group-row'>\n        {children}\n      </Row>\n    )\n  }\n\n  render () {\n    const {\n      config,\n      defaults,\n      mode,\n      icons,\n      query,\n      queryModes,\n      showUserSettings\n    } = this.props\n    const modeHasTransit = hasTransit(mode)\n    const { transitModes, accessModes, bicycleModes, micromobilityModes } = config.modes\n\n    // Do not permit remembering trip options if they do not differ from the\n    // defaults and nothing has been stored\n    const queryIsDefault = !isNotDefaultQuery(query, config)\n    const rememberIsDisabled = queryIsDefault && !defaults\n\n    return (\n      <div className='settings-selector-panel'>\n        <div className='modes-panel'>\n          {showUserSettings &&\n            <div style={{ marginBottom: '5px' }} className='store-settings pull-right'>\n              <Button\n                bsStyle='link'\n                bsSize='xsmall'\n                disabled={rememberIsDisabled}\n                onClick={this._toggleStoredSettings}\n              >{defaults\n                  ? <span><Icon type='times' /> Forget my options</span>\n                  : <span><Icon type='lock' /> Remember trip options</span>\n                }</Button>\n              <Button\n                bsStyle='link'\n                bsSize='xsmall'\n                disabled={queryIsDefault && !defaults}\n                onClick={this._resetForm}\n              >\n                <Icon type='undo' />{' '}\n                Restore{defaults ? ' my' : ''} defaults\n              </Button>\n            </div>\n          }\n          {/* Take Transit button */}\n          <Row className='mode-group-row'>\n            <Col xs={12}>\n              <ModeButton\n                enabled\n                active={modeHasTransit && this._modeIsActive({ mode: 'WALK' })}\n                icons={icons}\n                mode={'TRANSIT'}\n                height={54}\n                label={'Take Transit'}\n                inlineLabel\n                onClick={() => this._setAccessMode('WALK')}\n              />\n            </Col>\n          </Row>\n\n          {/* transit access mode selector */}\n          <Row className='mode-group-row'>\n            {accessModes.map((mode, k) => {\n              return <Col xs={4} key={k}>\n                <ModeButton\n                  enabled\n                  active={modeHasTransit && this._modeIsActive(mode)}\n                  icons={icons}\n                  mode={mode}\n                  height={46}\n                  label={mode.label}\n                  showPlusTransit\n                  onClick={() => this._setAccessMode(mode)}\n                />\n              </Col>\n            })}\n          </Row>\n\n          {this._renderExclusiveAccessSelectors()}\n\n          {/* Transit mode selector */}\n          {/* <Row className='mode-group-row'>\n            <Col xs={12}>\n              <div className='group-header'>\n                <div className='group-name' style={{ color: modeHasTransit ? '#000' : '#ccc' }}>Filter Transit Modes</div>\n              </div>\n            </Col>\n            <Col xs={12} style={{ textAlign: 'center' }}>\n              {transitModes.map((mode, k) => {\n                return (<div style={{ display: 'inline-block', width: 64 }} key={k}>\n                  <ModeButton\n                    enabled={modeHasTransit}\n                    active={this._modeIsActive(mode)}\n                    icons={icons}\n                    mode={mode}\n                    label={mode.label}\n                    showCheck\n                    height={44}\n                    onClick={() => this._toggleTransitMode(mode)}\n                  />\n                </div>)\n              })}\n            </Col>\n          </Row> */}\n\n        </div>\n\n        {/* Travel Preferences */}\n        <Row>\n          <Col xs={12} className='general-settings-panel'>\n            <div style={{ fontSize: 18, margin: '16px 0px' }}>Travel Preferences</div>\n\n            {/* The bike trip type selector */}\n            {hasBike(mode) && !hasTransit(mode) && (\n              <div style={{ marginBottom: 16 }}>\n                <div className='setting-label' style={{ float: 'left' }}>Use</div>\n                <div style={{ textAlign: 'right' }}>\n                  {bicycleModes.map((option, k) => {\n                    let action = this._setOwnBike\n                    if (option.mode === 'BICYCLE_RENT') action = this._setRentedBike\n                    let classNames = ['select-button']\n                    if (queryModes.includes(option.mode)) classNames.push('active')\n                    // TODO: Handle different bikeshare networks\n                    return (\n                      <Button key={k}\n                        className={classNames.join(' ')}\n                        onClick={action}\n                      >\n                        <div style={{ display: 'inline-block', width: option.iconWidth, height: 18, fill: '#000', verticalAlign: 'middle', marginRight: 10 }}>\n                          {getIcon(option.mode, icons)}\n                        </div>\n                        <span style={{ verticalAlign: 'middle' }}>{option.label}</span>\n                      </Button>\n                    )\n                  })}\n                </div>\n              </div>\n            )}\n\n            {/* The micromobility trip type selector */}\n            {hasMicromobility(mode) && !hasTransit(mode) && (\n              <div style={{ marginBottom: 16 }}>\n                <div className='setting-label' style={{ float: 'left' }}>Use</div>\n                <div style={{ textAlign: 'right' }}>\n                  {micromobilityModes.map((option, k) => {\n                    let action = this._setOwnMicromobility\n                    if (option.mode === 'MICROMOBILITY_RENT') action = this._setRentedMicromobility\n                    let classNames = ['select-button']\n                    if (queryModes.includes(option.mode)) classNames.push('active')\n                    // TODO: Handle different bikeshare networks\n                    return (\n                      <Button key={k}\n                        className={classNames.join(' ')}\n                        onClick={action}\n                      >\n                        <div style={{ display: 'inline-block', width: option.iconWidth, height: 18, fill: '#000', verticalAlign: 'middle', marginRight: 10 }}>\n                          {getIcon(option.mode, icons)}\n                        </div>\n                        <span style={{ verticalAlign: 'middle' }}>{option.label}</span>\n                      </Button>\n                    )\n                  })}\n                </div>\n              </div>\n            )}\n\n            {this._renderCompanies()}\n\n            {/* The transit mode selected */}\n            {hasTransit(mode) && (<div style={{ marginBottom: 16 }}>\n              <div className='setting-label'>Use</div>\n              <div style={{ textAlign: 'left' }}>\n                {transitModes.map((mode, k) => {\n                  let classNames = ['select-button']\n                  if (this._modeIsActive(mode)) classNames.push('active')\n                  return <Button key={mode.mode}\n                    className={classNames.join(' ')}\n                    style={{ marginTop: 3, marginBottom: 3, marginLeft: 0, marginRight: 5 }}\n                    onClick={() => this._toggleTransitMode(mode)}\n                  >\n                    <div\n                      className='mode-icon'\n                      style={{\n                        display: 'inline-block',\n                        fill: '#000',\n                        width: 16,\n                        height: 16,\n                        marginRight: 5,\n                        verticalAlign: 'middle'\n                      }}\n                    >\n                      {getIcon(mode.mode, icons)}\n                    </div>\n                    {mode.label}\n                  </Button>\n                })}\n              </div>\n              <div style={{ clear: 'both' }} />\n            </div>)}\n\n            {/* Other general settings */}\n            <GeneralSettingsPanel />\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const { config, currentQuery, user } = state.otp\n  const { defaults } = user\n  const showUserSettings = getShowUserSettings(state.otp)\n  const { companies, mode, routingType } = currentQuery\n  return {\n    defaults,\n    query: currentQuery,\n    config,\n    mode,\n    companies,\n    modeGroups: config.modeGroups,\n    queryModes: !mode || mode.length === 0 ? [] : mode.split(','),\n    routingType,\n    showUserSettings\n  }\n}\n\nconst mapDispatchToProps = {\n  clearDefaultSettings,\n  resetForm,\n  setQueryParam,\n  storeDefaultSettings\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsSelectorPanel)\n"]}