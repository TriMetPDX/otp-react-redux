{"version":3,"sources":["modes-panel.js"],"names":["ModesPanel","group","modes","filter","mode","props","routingType","companies","queryModes","Boolean","includes","label","toUpperCase","isSelected","slice","_getVisibleModes","forEach","modeStr","m","push","setQueryParam","join","queryParamUpdate","icons","modeGroups","map","k","groupModes","accessCount","length","showGroupSelect","_setGroupSelected","name","_modeIsActive","readableModeString","_toggleMode","Component","PropTypes","object","array","func","str","replace","txt","charAt","substr","toLowerCase","mapStateToProps","state","ownProps","otp","currentQuery","config","split","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport { setQueryParam } from '../../actions/form'\nimport ModeButton from './mode-button'\nimport { isAccessMode } from '../../util/itinerary'\n\nclass ModesPanel extends Component {\n  static propTypes = {\n    icons: PropTypes.object,\n    modeGroups: PropTypes.array,\n    queryModes: PropTypes.array,\n    setQueryParam: PropTypes.func\n  }\n\n  _getVisibleModes (group) {\n    // Don't show the CAR_HAIL services in profile modes\n    // TODO: this could be handled more elegantly?\n    return group.modes.filter(mode =>\n      mode.mode !== 'CAR_HAIL' || this.props.routingType !== 'PROFILE'\n    )\n  }\n\n  // Returns whether a particular mode or TNC agency is active\n  _modeIsActive (mode) {\n    const { companies, queryModes } = this.props\n    if (mode.mode === 'CAR_HAIL') {\n      return Boolean(companies && companies.includes(mode.label.toUpperCase()))\n    } else {\n      return queryModes.includes(mode.mode || mode)\n    }\n  }\n\n  _setGroupSelected (group, isSelected) {\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n\n    this._getVisibleModes(group).forEach(mode => {\n      const modeStr = mode.mode || mode\n      queryModes = queryModes.filter(m => m !== modeStr)\n      if (isSelected) queryModes.push(modeStr)\n    })\n\n    // Update the mode array in the store\n    this.props.setQueryParam({ mode: queryModes.join(',') })\n  }\n\n  _toggleMode (mode) {\n    const modeStr = mode.mode || mode\n\n    const { routingType, setQueryParam } = this.props\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n\n    const queryParamUpdate = {}\n\n    // Special case: we are in ITINERARY mode and changing the one access mode\n    if (routingType === 'ITINERARY' && isAccessMode(modeStr)) {\n      queryModes = queryModes.filter(m => !isAccessMode(m))\n      queryModes.push(modeStr)\n\n      // do extra stuff if mode selected was a TNC\n      queryParamUpdate.companies = modeStr === 'CAR_HAIL' ? mode.label.toUpperCase() : null\n\n    // Otherwise, if mode is currently selected, deselect it\n    } else if (queryModes.includes(modeStr)) {\n      queryModes = queryModes.filter(m => m !== modeStr)\n\n    // Or, if mode is currently not selected, select it\n    } else if (!queryModes.includes(modeStr)) {\n      queryModes.push(modeStr)\n    }\n\n    queryParamUpdate.mode = queryModes.join(',')\n\n    // Update the mode array in the store\n    setQueryParam(queryParamUpdate)\n  }\n\n  render () {\n    const { icons, modeGroups, routingType } = this.props\n\n    return (\n      <div className='modes-panel'>\n        {modeGroups.map((group, k) => {\n          const groupModes = this._getVisibleModes(group)\n          // Determine whether to show Select/Deselect All actions\n          const accessCount = groupModes.filter(m => isAccessMode(m.mode || m)).length\n          const showGroupSelect =\n            (routingType === 'PROFILE' ||\n            (routingType === 'ITINERARY' && accessCount === 0)) &&\n            groupModes.length > 1\n\n          return (\n            <div className='mode-group-row' key={k}>\n              <div className='group-header'>\n                {showGroupSelect && (\n                  <div className='group-select'>\n                    <button className='link-button'\n                      onClick={() => this._setGroupSelected(group, true)}\n                    >\n                      Select All\n                    </button>{' '}|{' '}\n                    <button className='link-button'\n                      onClick={() => this._setGroupSelected(group, false)}\n                    >\n                      Unselect All\n                    </button>\n                  </div>\n                )}\n                <div className='group-name'>{group.name}</div>\n              </div>\n              <div className='group-icons'>\n                {groupModes.map(mode => {\n                  return <ModeButton\n                    active={this._modeIsActive(mode)}\n                    icons={icons}\n                    key={mode.mode ? `${mode.mode}-${mode.label}` : mode}\n                    mode={mode}\n                    label={mode.label || readableModeString(mode)}\n                    onClick={() => this._toggleMode(mode)}\n                  />\n                })}\n              </div>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\n// Make a mode string more readable (e.g. 'BICYCLE_RENT' -> 'Bicycle Rent')\nfunction readableModeString (mode) {\n  const str = mode.replace('_', ' ')\n  return str.replace(/\\w\\S*/g, txt => { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase() })\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const { companies, mode, routingType } = state.otp.currentQuery\n  return {\n    companies,\n    modeGroups: state.otp.config.modeGroups,\n    queryModes: !mode || mode.length === 0 ? [] : mode.split(','),\n    routingType\n  }\n}\n\nconst mapDispatchToProps = { setQueryParam }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModesPanel)\n"]}