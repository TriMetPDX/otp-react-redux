{"version":3,"sources":["mode-button.js"],"names":["ModeButton","active","enabled","height","modeStr","buttonStyle","width","border","backgroundColor","borderRadius","props","icons","label","mode","onClick","inlineLabel","showPlusTransit","iconSize","iconColor","company","_getButtonStyle","textAlign","display","fill","verticalAlign","fontSize","marginLeft","fontWeight","color","Component","PropTypes","bool","string","any","object","func","PlusTransit","margin","PureComponent"],"mappings":"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","sourcesContent":["import React, {PropTypes, Component, PureComponent} from 'react'\n\nimport { getIcon, isTransit } from '../../util/itinerary'\n\nexport default class ModeButton extends Component {\n  static propTypes = {\n    active: PropTypes.bool,\n    label: PropTypes.string,\n    mode: PropTypes.any, // currently a mode object or string\n    icons: PropTypes.object,\n    onClick: PropTypes.func\n  }\n\n  _getButtonStyle ({\n    active,\n    enabled,\n    height,\n    modeStr\n  }) {\n    const buttonStyle = { height }\n\n    if (modeStr !== 'TRANSIT' && isTransit(modeStr)) {\n      buttonStyle.width = height\n      buttonStyle.border = `2px solid ${enabled ? (active ? '#000' : '#bbb') : '#ddd'}`\n      if (active && enabled) buttonStyle.backgroundColor = '#fff'\n      buttonStyle.borderRadius = height / 2\n    } else {\n      buttonStyle.border = active ? '2px solid #000' : '1px solid #bbb'\n      if (active) buttonStyle.backgroundColor = '#add8e6'\n    }\n\n    return buttonStyle\n  }\n\n  render () {\n    const {\n      active,\n      enabled,\n      icons,\n      label,\n      mode,\n      onClick,\n      inlineLabel,\n      showPlusTransit\n    } = this.props\n    const height = this.props.height || 48\n    const iconSize = height - 20\n    const iconColor = enabled ? '#000' : '#ccc'\n    const modeStr = mode.company || mode.mode || mode\n    const buttonStyle = this._getButtonStyle({ active, enabled, height, modeStr })\n\n    return (\n      <div\n        className={`mode-button-container ${enabled ? 'enabled' : 'disabled'}`}\n        style={{ height: height + (inlineLabel ? 8 : 24), textAlign: 'center' }}\n      >\n        <button\n          className='mode-button'\n          onClick={onClick}\n          title={label}\n          style={buttonStyle}\n          disabled={!enabled}\n        >\n          {showPlusTransit && (\n            <PlusTransit\n              enabled={enabled}\n              iconColor={iconColor}\n              icons={icons}\n              iconSize={iconSize}\n            />\n          )}\n\n          {/* Show the primary mode icon */}\n          <div\n            className='mode-icon'\n            style={{\n              display: 'inline-block',\n              fill: iconColor,\n              width: iconSize,\n              height: iconSize,\n              verticalAlign: 'middle'\n            }}\n          >\n            {getIcon(modeStr, icons)}\n          </div>\n\n          {/* Show the inline label, if enabled */}\n          {inlineLabel && (\n            <span style={{\n              fontSize: iconSize * 0.8,\n              marginLeft: 10,\n              verticalAlign: 'middle',\n              fontWeight: active ? 600 : 300\n            }}\n            >\n              {label}\n            </span>\n          )}\n        </button>\n\n        {/* If not in inline-label mode, label directly below the button */}\n        {!inlineLabel && (\n          <div\n            className='mode-label'\n            style={{ color: iconColor, fontWeight: active ? 600 : 300 }}\n          >\n            {label}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nclass PlusTransit extends PureComponent {\n  render () {\n    const {enabled, iconColor, icons, iconSize} = this.props\n    return (\n      <span>\n        <div\n          style={{\n            display: 'inline-block',\n            width: iconSize,\n            height: iconSize,\n            verticalAlign: 'middle'\n          }}\n        >\n          {enabled\n            ? getIcon('TRANSIT', icons)\n            : (\n              <div style={{\n                width: iconSize,\n                height: iconSize,\n                backgroundColor: iconColor,\n                borderRadius: iconSize / 2\n              }} />\n            )\n          }\n        </div>\n        <i\n          className='fa fa-plus'\n          style={{\n            verticalAlign: 'middle',\n            color: iconColor,\n            margin: '0px 5px',\n            fontSize: 14\n          }}\n        />\n      </span>\n    )\n  }\n}\n"]}