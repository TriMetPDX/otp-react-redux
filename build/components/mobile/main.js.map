{"version":3,"sources":["main.js"],"names":["MobileMain","prevProps","uiState","mobileScreen","MobileScreens","WELCOME_SCREEN","props","currentQuery","from","to","currentPosition","coords","setMobileScreen","SEARCH_FORM","activeItinerary","RESULTS_SUMMARY","icons","itineraryClass","itineraryFooter","map","title","mainPanelContent","MainPanelContent","ROUTE_VIEWER","viewedStop","viewedTrip","SET_INITIAL_LOCATION","newScreen","SET_FROM_LOCATION","SET_TO_LOCATION","SET_DATETIME","SET_OPTIONS","Component","PropTypes","object","func","element","mapStateToProps","state","ownProps","otp","ui","location","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport MobileDateTimeScreen from './date-time-screen'\nimport MobileOptionsScreen from './options-screen'\nimport MobileLocationSearch from './location-search'\nimport MobileWelcomeScreen from './welcome-screen'\nimport MobileResultsScreen from './results-screen'\nimport MobileSearchScreen from './search-screen'\nimport MobileStopViewer from './stop-viewer'\nimport MobileTripViewer from './trip-viewer'\nimport MobileRouteViewer from './route-viewer'\n\nimport { MobileScreens, MainPanelContent, setMobileScreen } from '../../actions/ui'\nimport { getActiveItinerary } from '../../util/state'\n\nclass MobileMain extends Component {\n  static propTypes = {\n    currentQuery: PropTypes.object,\n    icons: PropTypes.object,\n    itineraryClass: PropTypes.func,\n    map: PropTypes.element,\n    setMobileScreen: PropTypes.func,\n    title: PropTypes.element,\n    uiState: PropTypes.object\n  }\n\n  componentDidUpdate (prevProps) {\n    // Check if we are in the welcome screen and both locations have been set OR\n    // auto-detect is denied and one location is set\n    if (\n      prevProps.uiState.mobileScreen === MobileScreens.WELCOME_SCREEN && (\n        (this.props.currentQuery.from && this.props.currentQuery.to) ||\n        (!this.props.currentPosition.coords && (this.props.currentQuery.from || this.props.currentQuery.to))\n      )\n    ) {\n      // If so, advance to main search screen\n      this.props.setMobileScreen(MobileScreens.SEARCH_FORM)\n    }\n\n    if (!prevProps.activeItinerary && this.props.activeItinerary) {\n      this.props.setMobileScreen(MobileScreens.RESULTS_SUMMARY)\n    }\n  }\n\n  render () {\n    const { icons, itineraryClass, itineraryFooter, map, title, uiState } = this.props\n\n    // check for route viewer\n    if (uiState.mainPanelContent === MainPanelContent.ROUTE_VIEWER) {\n      return <MobileRouteViewer />\n    }\n\n    // check for viewed stop\n    if (uiState.viewedStop) return <MobileStopViewer />\n\n    // check for viewed trip\n    if (uiState.viewedTrip) return <MobileTripViewer />\n\n    switch (uiState.mobileScreen) {\n      case MobileScreens.WELCOME_SCREEN:\n        return <MobileWelcomeScreen map={map} title={title} />\n\n      case MobileScreens.SET_INITIAL_LOCATION:\n        return (\n          <MobileLocationSearch\n            locationType='to'\n            backScreen={MobileScreens.WELCOME_SCREEN}\n          />\n        )\n\n      case MobileScreens.SEARCH_FORM:\n        return (\n          <MobileSearchScreen\n            icons={icons}\n            map={map}\n            newScreen={this.newScreen}\n          />\n        )\n\n      case MobileScreens.SET_FROM_LOCATION:\n        return (\n          <MobileLocationSearch\n            locationType='from'\n            backScreen={MobileScreens.SEARCH_FORM}\n          />\n        )\n\n      case MobileScreens.SET_TO_LOCATION:\n        return (\n          <MobileLocationSearch\n            locationType='to'\n            backScreen={MobileScreens.SEARCH_FORM}\n          />\n        )\n\n      case MobileScreens.SET_DATETIME:\n        return <MobileDateTimeScreen />\n\n      case MobileScreens.SET_OPTIONS:\n        return <MobileOptionsScreen icons={icons} />\n\n      case MobileScreens.RESULTS_SUMMARY:\n        return <MobileResultsScreen map={map} itineraryClass={itineraryClass} itineraryFooter={itineraryFooter} icons={icons} />\n\n      default:\n        return <p>Invalid mobile screen</p>\n    }\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    uiState: state.otp.ui,\n    currentQuery: state.otp.currentQuery,\n    currentPosition: state.otp.location.currentPosition,\n    activeItinerary: getActiveItinerary(state.otp)\n  }\n}\n\nconst mapDispatchToProps = {\n  setMobileScreen\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MobileMain)\n"]}