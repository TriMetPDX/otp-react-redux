{"version":3,"sources":["print-layout.js"],"names":["PrintLayout","props","setState","mapVisible","state","window","print","location","search","parseUrlQueryString","root","document","getElementsByTagName","setAttribute","removeAttribute","configCompanies","customIcons","itinerary","timeFormat","float","_toggleMap","_print","Component","PropTypes","object","parseQueryString","func","mapStateToProps","ownProps","otp","config","companies","mapDispatchToProps","routingQuery"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Button } from 'react-bootstrap'\n\nimport BaseMap from '../map/base-map'\nimport EndpointsOverlay from '../map/endpoints-overlay'\nimport TransitiveOverlay from '../map/transitive-overlay'\nimport PrintableItinerary from '../narrative/printable/printable-itinerary'\nimport { parseUrlQueryString } from '../../actions/form'\nimport { routingQuery } from '../../actions/api'\nimport { getActiveItinerary } from '../../util/state'\nimport { getTimeFormat } from '../../util/time'\n\nclass PrintLayout extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object,\n    parseQueryString: PropTypes.func\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      mapVisible: true\n    }\n  }\n\n  _toggleMap = () => {\n    this.setState({ mapVisible: !this.state.mapVisible })\n  }\n\n  _print = () => {\n    window.print()\n  }\n\n  componentDidMount () {\n    const { location } = this.props\n    // Parse the URL query parameters, if present\n    if (location && location.search) {\n      this.props.parseUrlQueryString()\n    }\n  }\n\n  /**\n   * Add print-view class to html tag to ensure that iOS scroll fix only applies\n   * to non-print views.\n   */\n  componentWillMount () {\n    const root = document.getElementsByTagName('html')[0]\n    root.setAttribute('class', 'print-view')\n  }\n\n  /**\n   * Remove class attribute from html tag on clean up.\n   */\n  componentWillUnmount () {\n    const root = document.getElementsByTagName('html')[0]\n    root.removeAttribute('class')\n  }\n\n  render () {\n    const { configCompanies, customIcons, itinerary, timeFormat } = this.props\n    return (\n      <div className='otp print-layout'>\n        {/* The header bar, including the Toggle Map and Print buttons */}\n        <div className='header'>\n          <div style={{ float: 'right' }}>\n            <Button bsSize='small' onClick={this._toggleMap}>\n              <i className='fa fa-map' /> Toggle Map\n            </Button>\n            {' '}\n            <Button bsSize='small' onClick={this._print}>\n              <i className='fa fa-print' /> Print\n            </Button>\n          </div>\n          Itinerary\n        </div>\n\n        {/* The map, if visible */}\n        {this.state.mapVisible &&\n          <div className='map-container'>\n            <BaseMap>\n              <TransitiveOverlay />\n              <EndpointsOverlay />\n            </BaseMap>\n          </div>\n        }\n\n        {/* The main itinerary body */}\n        {itinerary\n          ? <PrintableItinerary\n            configCompanies={configCompanies}\n            customIcons={customIcons}\n            itinerary={itinerary}\n            timeFormat={timeFormat} />\n          : null\n        }\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    itinerary: getActiveItinerary(state.otp),\n    configCompanies: state.otp.config.companies,\n    timeFormat: getTimeFormat(state.otp.config)\n  }\n}\n\nconst mapDispatchToProps = {\n  parseUrlQueryString,\n  routingQuery\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrintLayout)\n"]}