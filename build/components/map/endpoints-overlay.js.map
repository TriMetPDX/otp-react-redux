{"version":3,"sources":["endpoints-overlay.js"],"names":["EndpointsOverlay","props","query","showUserSettings","from","to","Component","PropTypes","object","mapStateToProps","state","ownProps","activeSearch","otp","currentQuery","locations","user","mapDispatchToProps","forgetPlace","rememberPlace","setLocation","clearLocation"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,gB;;;;;;;;;;;;;6BAIM;AAAA,wBAC4B,KAAKC,KADjC;AAAA,UACAC,KADA,eACAA,KADA;AAAA,UACOC,gBADP,eACOA,gBADP;AAAA,UAEAC,IAFA,GAEaF,KAFb,CAEAE,IAFA;AAAA,UAEMC,EAFN,GAEaH,KAFb,CAEMG,EAFN;AAGR,aACE,0CACE,6BAAC,iBAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,SAAS,EAAEF,gBAFb;AAGE,QAAA,QAAQ,EAAEC;AAHZ,SAIM,KAAKH,KAJX,EADF,EAME,6BAAC,iBAAD;AACE,QAAA,IAAI,EAAC,IADP;AAEE,QAAA,SAAS,EAAEE,gBAFb;AAGE,QAAA,QAAQ,EAAEE;AAHZ,SAIM,KAAKJ,KAJX,EANF,CADF;AAcD;;;;EArB4BK,gB,GAwB/B;;;gBAxBMN,gB,eACe;AACjBE,EAAAA,KAAK,EAAEK,iBAAUC;AADA,C;;AAyBrB,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C;AACA;AACA,MAAMC,YAAY,GAAG,4BAAgBF,KAAK,CAACG,GAAtB,CAArB;AACA,MAAMX,KAAK,GAAGU,YAAY,GAAGA,YAAY,CAACV,KAAhB,GAAwBQ,KAAK,CAACG,GAAN,CAAUC,YAA5D;AACA,MAAMX,gBAAgB,GAAG,gCAAoBO,KAAK,CAACG,GAA1B,CAAzB;AACA,SAAO;AACLE,IAAAA,SAAS,EAAEL,KAAK,CAACG,GAAN,CAAUG,IAAV,CAAeD,SADrB;AAELb,IAAAA,KAAK,EAALA,KAFK;AAGLC,IAAAA,gBAAgB,EAAhBA;AAHK,GAAP;AAKD,CAXD;;AAaA,IAAMc,kBAAkB,GAAG;AACzBC,EAAAA,WAAW,EAAXA,gBADyB;AAEzBC,EAAAA,aAAa,EAAbA,kBAFyB;AAGzBC,EAAAA,WAAW,EAAXA,gBAHyB;AAIzBC,EAAAA,aAAa,EAAbA;AAJyB,CAA3B;;eAOe,yBAAQZ,eAAR,EAAyBQ,kBAAzB,EAA6CjB,gBAA7C,C","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport Endpoint from './endpoint'\nimport { clearLocation, forgetPlace, rememberPlace, setLocation } from '../../actions/map'\nimport { getActiveSearch, getShowUserSettings } from '../../util/state'\n\nclass EndpointsOverlay extends Component {\n  static propTypes = {\n    query: PropTypes.object\n  }\n  render () {\n    const { query, showUserSettings } = this.props\n    const { from, to } = query\n    return (\n      <div>\n        <Endpoint\n          type='from'\n          showPopup={showUserSettings}\n          location={from}\n          {...this.props} />\n        <Endpoint\n          type='to'\n          showPopup={showUserSettings}\n          location={to}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  // Use query from active search (if a search has been made) or default to\n  // current query is no search is available.\n  const activeSearch = getActiveSearch(state.otp)\n  const query = activeSearch ? activeSearch.query : state.otp.currentQuery\n  const showUserSettings = getShowUserSettings(state.otp)\n  return {\n    locations: state.otp.user.locations,\n    query,\n    showUserSettings\n  }\n}\n\nconst mapDispatchToProps = {\n  forgetPlace,\n  rememberPlace,\n  setLocation,\n  clearLocation\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EndpointsOverlay)\n"]}