{"version":3,"sources":["leg-diagram.js"],"names":["height","yAxisPanelWidth","BASELINE_Y","topElevYPx","bottomElevYPx","elevHeight","METERS_TO_FEET","LegDiagram","props","width","leg","_getElevationProfile","traversed","xAxisCompression","setState","_determineCompressionFactor","evt","m","clientX","container","getBoundingClientRect","left","scrollLeft","setElevationPoint","state","showLegDiagram","useImperialUnits","steps","_unitConversion","nextProps","startTime","elev","Math","round","elevationPoint","yAxisPanelSvgContent","backgroundSvgContent","mainSvgContent","foregroundSvgContent","minElev","maxElev","points","SVG_WIDTH","range","rangeUnit","minDisplayed","floor","maxDisplayed","ceil","displayedRange","y","push","_formatElevation","currentX","ptArr","stepArr","stepDetails","previousPair","map","step","stepIndex","stepWidthPx","distance","gain","loss","elevation","length","i","elevPair","diff","second","x","first","console","warn","unshift","pts","pt","join","elevConverted","beginStep","stepWidth","name","compressStreetName","streetName","fontSize","midPoint","anchor","halfLabelWidth","_onMouseMove","_onMouseLeave","_onResize","_onCloseButtonClick","Component","PropTypes","number","func","split","str","mapStateToProps","ownProps","otp","ui","mapDispatchToProps"],"mappings":"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","sourcesContent":["import memoize from 'lodash.memoize'\nimport React, {PropTypes, Component} from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport ReactResizeDetector from 'react-resize-detector'\n\nimport { setElevationPoint, showLegDiagram } from '../../actions/map'\nimport { getElevationProfile, getTextWidth, legElevationAtDistance } from '../../util/itinerary'\n\n// Fixed dimensions for chart\nconst height = 160\nconst yAxisPanelWidth = 40 // width of y axis labels\nconst BASELINE_Y = height - 20\nconst topElevYPx = 20\nconst bottomElevYPx = height - 40\nconst elevHeight = bottomElevYPx - topElevYPx\n\nconst METERS_TO_FEET = 3.28084\n\nclass LegDiagram extends Component {\n  static propTypes = {\n    elevationPoint: PropTypes.number,\n    showLegDiagram: PropTypes.func,\n    setElevationPoint: PropTypes.func\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      useImperialUnits: true,\n      xAxisCompression: 0.5\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { leg } = nextProps\n    if (leg && this.props.leg && leg.startTime !== this.props.leg.startTime) {\n      this._determineCompressionFactor(this.state.width, leg)\n    }\n  }\n\n  _determineCompressionFactor = (width, leg) => {\n    const { traversed } = this._getElevationProfile(leg)\n    if (traversed > 0) {\n      // Determine the appropriate compression factor to scale the elevation\n      // chart to fit the container width (i.e., remove the need for x-scrolling).\n      const xAxisCompression = width / (traversed + yAxisPanelWidth)\n      this.setState({ xAxisCompression, width })\n    }\n  }\n\n  _onResize = (width, height) => {\n    this._determineCompressionFactor(width, this.props.leg)\n  }\n\n  /** Set mouse hover location for drawing elevation point. */\n  _onMouseMove = (evt) => {\n    const m = evt.clientX - this.container.getBoundingClientRect().left + this.container.scrollLeft\n    this.props.setElevationPoint(m / this.state.xAxisCompression)\n  }\n\n  _onMouseLeave = () => {\n    this.props.setElevationPoint(null)\n  }\n\n  _onCloseButtonClick = () => {\n    this.props.showLegDiagram(null)\n    this.props.setElevationPoint(null)\n  }\n\n  _unitConversion = () => this.state.useImperialUnits ? METERS_TO_FEET : 1\n\n  /** Round elevation to whole number and add symbol. */\n  _formatElevation (elev) {\n    return Math.round(elev) + (this.state.useImperialUnits ? `'` : 'm')\n  }\n\n  _getElevationProfile = memoize((leg) => {\n    if (!leg) return {}\n    return getElevationProfile(leg.steps, this._unitConversion())\n  })\n\n  render () {\n    const { elevationPoint } = this.props\n    const { xAxisCompression } = this.state\n\n    const { leg } = this.props\n    if (!leg) return null\n\n    const yAxisPanelSvgContent = []\n\n    const backgroundSvgContent = []\n    const mainSvgContent = []\n    const foregroundSvgContent = []\n\n    const { minElev, maxElev, points, traversed } = this._getElevationProfile(leg)\n\n    const SVG_WIDTH = traversed * xAxisCompression\n    const range = maxElev - minElev\n    const rangeUnit = range >= 500\n      ? 100\n      : 50\n\n    // Compute the displayed elevation range\n    const minDisplayed = Math.floor(minElev / rangeUnit) * rangeUnit\n    const maxDisplayed = Math.ceil(maxElev / rangeUnit) * rangeUnit\n    const displayedRange = maxDisplayed - minDisplayed\n\n    // Draw the y-axis labels & guidelines\n    for (let elev = minDisplayed; elev <= maxDisplayed; elev += rangeUnit) {\n      const y = topElevYPx + elevHeight - elevHeight * (elev - minDisplayed) / displayedRange\n      yAxisPanelSvgContent.push(\n        <text\n          key={`axis-label-${elev}`}\n          x={yAxisPanelWidth - 3}\n          y={y + 3}\n          fontSize={11}\n          textAnchor='end'\n        >\n          {this._formatElevation(elev)}\n        </text>\n      )\n      backgroundSvgContent.push(\n        <line\n          key={`axis-guideline-${elev}`}\n          x1={0}\n          y1={y}\n          x2={SVG_WIDTH}\n          y2={y}\n          strokeWidth={1}\n          stroke='#ccc'\n          strokeDasharray='1, 1'\n        />\n      )\n    }\n\n    // Process each step in this leg\n    let currentX = 0\n    const ptArr = []\n    const stepArr = [currentX]\n    const stepDetails = []\n    let previousPair\n    leg.steps.map((step, stepIndex) => {\n      const stepWidthPx = step.distance * xAxisCompression\n      let gain = 0\n      let loss = 0\n      // Add this step to the polyline coords\n      if (step.elevation && step.elevation.length > 0) {\n        for (let i = 0; i < step.elevation.length; i++) {\n          const elevPair = step.elevation[i]\n          if (previousPair) {\n            const diff = (elevPair.second - previousPair.second) * this._unitConversion()\n            if (diff > 0) gain += diff\n            else loss += diff\n          }\n          const x = currentX + elevPair.first * xAxisCompression // - firstX\n          const y = topElevYPx + elevHeight - elevHeight * (elevPair.second * this._unitConversion() - minDisplayed) / displayedRange\n          ptArr.push([x, y])\n          previousPair = elevPair\n        }\n      }\n\n      // Add the street segment as a horizontal line at the bottom of the diagram\n      mainSvgContent.push(\n        <line\n          key={`step-${stepIndex}-line`}\n          x1={currentX + 1}\n          y1={BASELINE_Y}\n          x2={currentX + stepWidthPx - 1}\n          y2={BASELINE_Y}\n          strokeWidth={6}\n          stroke='#aaa'\n        />\n      )\n      // Add The street name label, including clipping path to prevent overflow\n      if (stepWidthPx > 30) {\n        mainSvgContent.push(\n          <g key={`step-${stepIndex}-label`}>\n            <clipPath id={`clip-${stepIndex}`}>\n              <rect x={currentX + 10} y={0} width={stepWidthPx - 10} height={200} />\n            </clipPath>\n            <text\n              x={currentX + stepWidthPx / 2}\n              y={BASELINE_Y + 16}\n              fontSize={11}\n              textAnchor='middle'\n            >\n              {// FIXME: bug where gain is shown for a single step even though\n                // the elevation gain actually begins accumulating with a different step\n              }\n              {gain >= 10 && <tspan fill='red'>↑{this._formatElevation(gain)}{'  '}</tspan>}\n              {loss <= -10 && <tspan fill='green'>↓{this._formatElevation(-loss)}</tspan>}\n            </text>\n          </g>\n        )\n      }\n      currentX += stepWidthPx\n      stepArr.push(currentX)\n      stepDetails.push({ gain, loss })\n    })\n    if (ptArr.length === 0) {\n      console.warn(`There is no elevation data to render for leg`, leg)\n      return null\n    }\n    // Add initial point if the first elevation entry does not start at zero\n    // distance.\n    if (ptArr[0][0] !== 0) ptArr.unshift([0, ptArr[0][1]])\n    // Add final points in order to round out area field.\n    ptArr.push([SVG_WIDTH, ptArr[ptArr.length - 1][1]])\n    ptArr.push([ptArr[ptArr.length - 1][0], BASELINE_Y])\n    ptArr.push([0, BASELINE_Y])\n    // Construct and add the main elevation contour area\n    const pts = ptArr.map((pt, i) => i === 0 ? `M${pt[0]} ${pt[1]}` : `L${pt[0]} ${pt[1]}`).join(' ')\n    mainSvgContent.unshift(\n      <path\n        key='elev-polyline'\n        d={`${pts} Z`}\n        strokeWidth={0}\n        fill='lightsteelblue'\n        fillOpacity={0.5}\n      />\n    )\n\n    // Add the highlighted elevation point (on mouse hover), if actively hovering.\n    if (elevationPoint) {\n      const elev = legElevationAtDistance(points, elevationPoint)\n      const elevConverted = elev * this._unitConversion()\n      const x = elevationPoint * xAxisCompression\n      for (var i = 0; i < stepArr.length; i++) {\n        if (x >= stepArr[i] && x <= stepArr[i + 1]) {\n          const beginStep = stepArr[i]\n          // Mouse hover is at step i, add hover fill for street step and draw\n          // street label\n          const stepWidth = stepArr[i + 1] - beginStep\n          backgroundSvgContent.push(\n            <rect\n              key={`step-hover-${i}`}\n              x={beginStep}\n              y={0}\n              width={stepWidth}\n              height={200}\n              fillOpacity={0.5}\n              fill='#eee' />\n          )\n          const name = compressStreetName(leg.steps[i].streetName)\n          const fontSize = 22\n          const midPoint = beginStep + stepWidth / 2\n          // Determine where to anchor hover street label text (to avoid\n          // clipping on edges of svg).\n          let anchor = 'middle'\n          let x = midPoint\n          const halfLabelWidth = getTextWidth(name) / 2\n          if (midPoint - halfLabelWidth < 0) {\n            // Anchor left edge of text to left of svg\n            anchor = 'start'\n            x = 0 + 3\n          } else if (midPoint + halfLabelWidth > SVG_WIDTH) {\n            // Anchor right edge of text to right of svg\n            anchor = 'end'\n            x = SVG_WIDTH - 3\n          }\n          backgroundSvgContent.push(\n            <text\n              key={`step-text-hover-${i}`}\n              x={x}\n              y={height / 2}\n              fontSize={fontSize}\n              textAnchor={anchor}\n              fill='#777'\n              opacity={0.6}\n            >\n              {name}\n            </text>\n          )\n        }\n      }\n      const y = elev !== null\n        ? topElevYPx + elevHeight - elevHeight * (elevConverted - minDisplayed) / displayedRange\n        : height / 2\n      backgroundSvgContent.push(\n        <line\n          key='elev-point-line'\n          x1={x}\n          y1={elev !== null ? y : topElevYPx}\n          x2={x}\n          y2={BASELINE_Y}\n          strokeWidth={1}\n          stroke='#aaa'\n        />\n      )\n      // Only add the current elevation indicator and label if there is a data\n      // point available.\n      if (elev !== null) {\n        foregroundSvgContent.push(\n          <circle\n            key='elev-point-circle'\n            cx={x}\n            cy={y}\n            r='4'\n            fill='#084c8d'\n            stroke='white'\n            strokeWidth='0'\n          />\n        )\n        // Add the current elevation text label\n        foregroundSvgContent.push(\n          <text\n            key='elev-point-label'\n            x={x}\n            y={y - 10}\n            fontSize={11}\n            textAnchor='middle'>\n            {this._formatElevation(elevConverted)}\n          </text>\n        )\n      }\n    }\n    return (\n      <div className='leg-diagram'>\n        {/* The y-axis labels, which are fixed to the left side */}\n        <div className='y-axis-panel' style={{ width: yAxisPanelWidth }}>\n          <svg>\n            {yAxisPanelSvgContent}\n          </svg>\n        </div>\n\n        {/* The main, scrollable diagram */}\n        <div\n          ref={(container) => { this.container = container }}\n          onMouseMove={this._onMouseMove}\n          onMouseLeave={this._onMouseLeave}\n          className='main-diagram'\n          style={{ left: 40 }}\n        >\n          <svg height={height} width={SVG_WIDTH + 10}>\n            {backgroundSvgContent}\n            {mainSvgContent}\n            {foregroundSvgContent}\n          </svg>\n          <ReactResizeDetector handleWidth onResize={this._onResize} />\n        </div>\n\n        {/* The close button */}\n        <Button\n          className='close-button clear-button-formatting'\n          onClick={this._onCloseButtonClick}\n        >\n          <i className='fa fa-close' />\n        </Button>\n      </div>\n    )\n  }\n}\n\nfunction compressStreetName (name) {\n  return name.split(' ').map(str => {\n    if (str === 'Northwest') return 'NW'\n    if (str === 'Northeast') return 'NE'\n    if (str === 'Southwest') return 'SW'\n    if (str === 'Southeast') return 'SE'\n    if (str === 'North') return 'N'\n    if (str === 'East') return 'E'\n    if (str === 'South') return 'S'\n    if (str === 'West') return 'W'\n    if (str === 'Street') return 'St'\n    if (str === 'Avenue') return 'Ave'\n    if (str === 'Road') return 'Rd'\n    if (str === 'Drive') return 'Dr'\n    if (str === 'Boulevard') return 'Blvd'\n    return str\n  }).join(' ')\n}\n\n// Connect to Redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    elevationPoint: state.otp.ui.elevationPoint\n  }\n}\n\nconst mapDispatchToProps = {\n  showLegDiagram,\n  setElevationPoint\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LegDiagram)\n"]}