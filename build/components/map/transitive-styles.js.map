{"version":3,"sources":["transitive-styles.js"],"names":["STYLES","places","display","place","fill","stroke","r","stops_merged","data","index","utils"],"mappings":";;;;;;;AAAA;;AAEA,IAAIA,MAAM,GAAG,EAAb;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;;AAEAA,MAAM,CAACC,MAAP,GAAgB;AACdC,EAAAA,OAAO,EAAE,iBAAUA,QAAV,EAAmBC,KAAnB,EAA0B;AACjC,QAAI,CAAC,6BAAmBA,KAAnB,CAAL,EAAgC,OAAO,MAAP;AACjC,GAHa;AAIdC,EAAAA,IAAI,EAAE,MAJQ;AAKdC,EAAAA,MAAM,EAAE,MALM;AAMd,kBAAgB,CANF;AAOdC,EAAAA,CAAC,EAAE;AAPW,CAAhB;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;AAOAN,MAAM,CAACO,YAAP,GAAsB;AACpBD,EAAAA,CAAC,EAAE,WAAUJ,OAAV,EAAmBM,IAAnB,EAAyBC,KAAzB,EAAgCC,KAAhC,EAAuC;AACxC,WAAO,CAAP;AACD;AAHmB,CAAtB;eAMeV,M","sourcesContent":["import { isBikeshareStation } from '../../util/map'\n\nvar STYLES = {}\n\n/* STYLES.segments = {\n\n  // override the default stroke color\n  stroke: (display, segment) => {\n    if (!segment.focused) return\n\n    switch (segment.type) {\n      case 'CAR':\n        return '#888'\n      case 'WALK':\n        return '#86cdf9'\n      case 'BICYCLE':\n      case 'BICYCLE_RENT':\n        return '#f00'\n    }\n  },\n\n  // override the default stroke width\n  'stroke-width': (display, segment, index, utils) => {\n    switch (segment.type) {\n      case 'CAR':\n        return utils.pixels(display.zoom.scale(), 2, 4, 6) + 'px'\n      case 'WALK':\n        return '5px'\n      case 'BICYCLE':\n      case 'BICYCLE_RENT':\n        return '4px'\n      case 'TRANSIT':\n        // bus segments:\n        if (segment.mode === 3) {\n          return utils.pixels(display.zoom.scale(), 2, 4, 8) + 'px'\n        }\n        // all others:\n        return utils.pixels(display.zoom.scale(), 4, 8, 12) + 'px'\n    }\n  },\n\n  // specify the dash-array\n  'stroke-dasharray': (display, segment) => {\n    switch (segment.type) {\n      case 'CAR':\n        return '3,2'\n      case 'WALK':\n        return '0.01,7'\n      case 'BICYCLE':\n      case 'BICYCLE_RENT':\n        return '6,3'\n    }\n  },\n\n  // specify the line cap type\n  'stroke-linecap': (display, segment) => {\n    switch (segment.type) {\n      case 'WALK':\n        return 'round'\n      case 'CAR':\n      case 'BICYCLE':\n      case 'BICYCLE_RENT':\n        return 'butt'\n    }\n  }\n} */\n\n/** style overrides for places (i.e. the start and end icons) **/\n\nSTYLES.places = {\n  display: function (display, place) {\n    if (!isBikeshareStation(place)) return 'none'\n  },\n  fill: '#f00',\n  stroke: '#fff',\n  'stroke-width': 2,\n  r: 7\n}\n\n/* function getIconSize (data) {\n  return isBikeshareStation(data.owner) ? 14 : 30\n}\n\nSTYLES.places_icon = {\n  display: function (display, data) {\n    if (!isBikeshareStation(data.owner)) return 'none'\n  },\n\n  // center the icon by offsetting by half the width/height\n  x: function (display, data) {\n    return -getIconSize(data) / 2\n  },\n  y: function (display, data) {\n    return -getIconSize(data) / 2\n  },\n  width: function (display, data) {\n    return getIconSize(data)\n  },\n  height: function (display, data) {\n    return getIconSize(data)\n  },\n  'xlink:href': function (display, data) {\n    const place = data.owner\n    if (place.getId() === 'from') return `data:image/svg+xml;utf8,${fromSvg}`\n    if (place.getId() === 'to') return `data:image/svg+xml;utf8,${toSvg}`\n    if (isBikeshareStation(place)) return `data:image/svg+xml;utf8,${bikeSvg}`\n  },\n  stroke: 0\n} */\n\n/* STYLES.segments_halo = {\n  'stroke-width': function (display, data, index, utils) {\n    return data.computeLineWidth(display) + 7\n  },\n  opacity: 0.75\n} */\n\nSTYLES.stops_merged = {\n  r: function (display, data, index, utils) {\n    return 6\n  }\n}\n\nexport default STYLES\n"]}