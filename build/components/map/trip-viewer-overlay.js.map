{"version":3,"sources":["trip-viewer-overlay.js"],"names":["TripViewerOverlay","prevProps","oldGeometry","tripData","geometry","newGeometry","props","pts","polyline","decode","points","leaflet","map","fitBounds","MapLayer","PropTypes","object","viewedTrip","mapStateToProps","state","ownProps","otp","ui","transitIndex","trips","tripId","mapDispatchToProps"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,iB;;;;;;;;;;;;;wCAMiB,CAAG,C,CAExB;;;;2CACwB,CAAG;;;uCAEPC,S,EAAW;AAC7B,UAAMC,WAAW,GAAGD,SAAS,CAACE,QAAV,IAAsBF,SAAS,CAACE,QAAV,CAAmBC,QAA7D;AACA,UAAMC,WAAW,GAAG,KAAKC,KAAL,CAAWH,QAAX,IAAuB,KAAKG,KAAL,CAAWH,QAAX,CAAoBC,QAA/D;AACA,UAAIF,WAAW,KAAKG,WAAhB,IAA+B,CAACA,WAApC,EAAiD;;AACjD,UAAME,GAAG,GAAGC,kBAASC,MAAT,CAAgBJ,WAAW,CAACK,MAA5B,CAAZ;;AACA,WAAKJ,KAAL,CAAWK,OAAX,CAAmBC,GAAnB,CAAuBC,SAAvB,CAAiCN,GAAjC;AACD;;;2CAEuB,CAAG;;;2CAEH,CAAG;;;6BAEjB;AAAA,UACAJ,QADA,GACa,KAAKG,KADlB,CACAH,QADA;AAGR,UAAI,CAACA,QAAD,IAAa,CAACA,QAAQ,CAACC,QAA3B,EAAqC,OAAO,6BAAC,0BAAD,OAAP;;AAErC,UAAMG,GAAG,GAAGC,kBAASC,MAAT,CAAgBN,QAAQ,CAACC,QAAT,CAAkBM,MAAlC,CAAZ;;AACA,aACE,6BAAC,0BAAD,QACE,6BAAC,sBAAD;AAAU,QAAA,SAAS,EAAEH,GAArB;AAA0B,QAAA,MAAM,EAAE,CAAlC;AAAqC,QAAA,KAAK,EAAC,SAA3C;AAAqD,QAAA,OAAO,EAAE;AAA9D,QADF,CADF;AAKD;;;;EAlC6BO,sB,GAqChC;;;gBArCMd,iB,eACe;AACjBG,EAAAA,QAAQ,EAAEY,mBAAUC,MADH;AAEjBC,EAAAA,UAAU,EAAEF,mBAAUC;AAFL,C;;AAsCrB,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,MAAMH,UAAU,GAAGE,KAAK,CAACE,GAAN,CAAUC,EAAV,CAAaL,UAAhC;AACA,SAAO;AACLA,IAAAA,UAAU,EAAVA,UADK;AAELd,IAAAA,QAAQ,EAAEc,UAAU,GAChBE,KAAK,CAACE,GAAN,CAAUE,YAAV,CAAuBC,KAAvB,CAA6BP,UAAU,CAACQ,MAAxC,CADgB,GAEhB;AAJC,GAAP;AAMD,CARD;;AAUA,IAAMC,kBAAkB,GAAG,EAA3B;;eAGe,yBAAQR,eAAR,EAAyBQ,kBAAzB,EAA6C,+BAAY1B,iBAAZ,CAA7C,C","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { FeatureGroup, MapLayer, Polyline, withLeaflet } from 'react-leaflet'\n\nimport polyline from '@mapbox/polyline'\n\nclass TripViewerOverlay extends MapLayer {\n  static propTypes = {\n    tripData: PropTypes.object,\n    viewedTrip: PropTypes.object\n  }\n\n  componentDidMount () { }\n\n  // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n  componentWillUnmount () { }\n\n  componentDidUpdate (prevProps) {\n    const oldGeometry = prevProps.tripData && prevProps.tripData.geometry\n    const newGeometry = this.props.tripData && this.props.tripData.geometry\n    if (oldGeometry === newGeometry || !newGeometry) return\n    const pts = polyline.decode(newGeometry.points)\n    this.props.leaflet.map.fitBounds(pts)\n  }\n\n  createLeafletElement () { }\n\n  updateLeafletElement () { }\n\n  render () {\n    const { tripData } = this.props\n\n    if (!tripData || !tripData.geometry) return <FeatureGroup />\n\n    const pts = polyline.decode(tripData.geometry.points)\n    return (\n      <FeatureGroup>\n        <Polyline positions={pts} weight={8} color='#00bfff' opacity={0.6} />\n      </FeatureGroup>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const viewedTrip = state.otp.ui.viewedTrip\n  return {\n    viewedTrip,\n    tripData: viewedTrip\n      ? state.otp.transitIndex.trips[viewedTrip.tripId]\n      : null\n  }\n}\n\nconst mapDispatchToProps = {\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withLeaflet(TripViewerOverlay))\n"]}