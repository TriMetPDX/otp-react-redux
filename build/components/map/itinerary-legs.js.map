{"version":3,"sources":["itinerary-legs.js"],"names":["ItineraryLegs","e","index","layer","feature","geometry","leg","props","itinerary","legs","activeLeg","setActiveLeg","map","geojson","polyline","toGeoJSON","legGeometry","points","active","color","mode","Math","random","_onLegClick","Component","PropTypes","object","number","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,a;;;;;;;;;;;;;;;;;;kEAML,UAACC,CAAD,EAAO;AACnB,UAAMC,KAAK,GAAGD,CAAC,CAACE,KAAF,CAAQC,OAAR,CAAgBC,QAAhB,CAAyBH,KAAvC;AACA,UAAMI,GAAG,GAAG,MAAKC,KAAL,CAAWC,SAAX,CAAqBC,IAArB,CAA0BP,KAA1B,CAAZ;;AACA,UAAIA,KAAK,KAAK,MAAKK,KAAL,CAAWG,SAAzB,EAAoC;AAClC,cAAKH,KAAL,CAAWI,YAAX,CAAwB,IAAxB;AACD,OAFD,MAEO;AACL,cAAKJ,KAAL,CAAWI,YAAX,CAAwBT,KAAxB,EAA+BI,GAA/B;AACD;AACF,K;;;;;;;6BACS;AAAA;;AAAA,wBACyB,KAAKC,KAD9B;AAAA,UACAC,SADA,eACAA,SADA;AAAA,UACWE,SADX,eACWA,SADX;AAER,aACE,6BAAC,0BAAD,QACGF,SAAS,CAACC,IAAV,CAAeG,GAAf,CAAmB,UAACN,GAAD,EAAMJ,KAAN,EAAgB;AAClC,YAAMW,OAAO,GAAGC,kBAASC,SAAT,CAAmBT,GAAG,CAACU,WAAJ,CAAgBC,MAAnC,CAAhB;;AACAJ,QAAAA,OAAO,CAACX,KAAR,GAAgBA,KAAhB;AACA,YAAMgB,MAAM,GAAGR,SAAS,KAAKR,KAA7B;AACA,YAAMiB,KAAK,GAAGD,MAAM,GAChB,QADgB,GAEhB,0BAAUZ,GAAG,CAACc,IAAd,IACE,MADF,GAEE,OAJN;AAKA,eACE,6BAAC,qBAAD;AACE,UAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EADP;AAEE,UAAA,KAAK,EAAEH,KAFT;AAGE,UAAA,OAAO,EAAE,MAAI,CAACI,WAHhB;AAIE,UAAA,IAAI,EAAEV;AAJR,UADF;AAOD,OAhBA,CADH,CADF;AAqBD;;;;EAtCwCW,gB;;;;gBAAtBxB,a,eACA;AACjBQ,EAAAA,SAAS,EAAEiB,mBAAUC,MADJ;AAEjBhB,EAAAA,SAAS,EAAEe,mBAAUE,MAFJ;AAGjBhB,EAAAA,YAAY,EAAEc,mBAAUG;AAHP,C","sourcesContent":["import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport { FeatureGroup, GeoJSON } from 'react-leaflet'\nimport polyline from '@mapbox/polyline'\n\nimport { isTransit } from '../../util/itinerary'\n\nexport default class ItineraryLegs extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object,\n    activeLeg: PropTypes.number,\n    setActiveLeg: PropTypes.func\n  }\n  _onLegClick = (e) => {\n    const index = e.layer.feature.geometry.index\n    const leg = this.props.itinerary.legs[index]\n    if (index === this.props.activeLeg) {\n      this.props.setActiveLeg(null)\n    } else {\n      this.props.setActiveLeg(index, leg)\n    }\n  }\n  render () {\n    const { itinerary, activeLeg } = this.props\n    return (\n      <FeatureGroup>\n        {itinerary.legs.map((leg, index) => {\n          const geojson = polyline.toGeoJSON(leg.legGeometry.points)\n          geojson.index = index\n          const active = activeLeg === index\n          const color = active\n            ? 'yellow'\n            : isTransit(leg.mode)\n              ? 'blue'\n              : 'black'\n          return (\n            <GeoJSON\n              key={Math.random()}\n              color={color}\n              onClick={this._onLegClick}\n              data={geojson} />\n          )\n        })}\n      </FeatureGroup>\n    )\n  }\n}\n"]}