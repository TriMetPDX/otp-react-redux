{"version":3,"sources":["stop-viewer-overlay.js"],"names":["StopViewerOverlay","prevProps","nextStop","props","stopData","oldStopId","id","hasNewStopId","leaflet","map","setView","lat","lon","viewedStop","name","MapLayer","PropTypes","object","mapStateToProps","state","ownProps","otp","ui","transitIndex","stops","stopId","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,iB;;;;;;;;;;;;;wCAMiB,CAAG,C,CAExB;;;;2CACwB,CAAG;AAE3B;;;;;;;;uCAKoBC,S,EAAW;AAC7B,UAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWC,QAA5B;AACA,UAAMC,SAAS,GAAGJ,SAAS,CAACG,QAAV,IAAsBH,SAAS,CAACG,QAAV,CAAmBE,EAA3D;AACA,UAAMC,YAAY,GAAGL,QAAQ,IAAIA,QAAQ,CAACI,EAAT,KAAgBD,SAAjD;AACA,UAAIE,YAAJ,EAAkB,KAAKJ,KAAL,CAAWK,OAAX,CAAmBC,GAAnB,CAAuBC,OAAvB,CAA+B,CAACR,QAAQ,CAACS,GAAV,EAAeT,QAAQ,CAACU,GAAxB,CAA/B;AACnB;;;2CAEuB,CAAG;;;2CAEH,CAAG;;;6BAEjB;AAAA,wBACyB,KAAKT,KAD9B;AAAA,UACAU,UADA,eACAA,UADA;AAAA,UACYT,QADZ,eACYA,QADZ;AAGR,UAAI,CAACS,UAAD,IAAe,CAACT,QAApB,EAA8B,OAAO,6BAAC,0BAAD,OAAP;AAE9B,aACE,6BAAC,0BAAD,QACE,6BAAC,0BAAD;AACE,QAAA,GAAG,EAAEA,QAAQ,CAACE,EADhB;AAEE,QAAA,MAAM,EAAE,CAACF,QAAQ,CAACO,GAAV,EAAeP,QAAQ,CAACQ,GAAxB,CAFV;AAGE,QAAA,MAAM,EAAE,CAHV;AAIE,QAAA,WAAW,EAAE,CAJf;AAKE,QAAA,SAAS,EAAC,MALZ;AAME,QAAA,KAAK,EAAC,MANR;AAOE,QAAA,MAAM,EAAE;AAPV,SASE,6BAAC,mBAAD,QACE,0CACGR,QAAQ,CAACU,IADZ,CADF,CATF,CADF,CADF;AAmBD;;;;EAnD6BC,sB,GAsDhC;;;gBAtDMf,iB,eACe;AACjBI,EAAAA,QAAQ,EAAEY,mBAAUC,MADH;AAEjBJ,EAAAA,UAAU,EAAEG,mBAAUC;AAFL,C;;AAuDrB,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,MAAMP,UAAU,GAAGM,KAAK,CAACE,GAAN,CAAUC,EAAV,CAAaT,UAAhC;AACA,SAAO;AACLA,IAAAA,UAAU,EAAEA,UADP;AAELT,IAAAA,QAAQ,EAAES,UAAU,GAChBM,KAAK,CAACE,GAAN,CAAUE,YAAV,CAAuBC,KAAvB,CAA6BX,UAAU,CAACY,MAAxC,CADgB,GAEhB;AAJC,GAAP;AAMD,CARD;;AAUA,IAAMC,kBAAkB,GAAG,EAA3B;;eAGe,yBAAQR,eAAR,EAAyBQ,kBAAzB,EAA6C,+BAAY1B,iBAAZ,CAA7C,C","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { FeatureGroup, MapLayer, Popup, CircleMarker, withLeaflet } from 'react-leaflet'\n\nclass StopViewerOverlay extends MapLayer {\n  static propTypes = {\n    stopData: PropTypes.object,\n    viewedStop: PropTypes.object\n  }\n\n  componentDidMount () { }\n\n  // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n  componentWillUnmount () { }\n\n  /**\n   * Only reset map view if a new stop is selected. This prevents resetting the\n   * bounds if, for example, the arrival times have changed for the same stop\n   * in the viewer.\n   */\n  componentDidUpdate (prevProps) {\n    const nextStop = this.props.stopData\n    const oldStopId = prevProps.stopData && prevProps.stopData.id\n    const hasNewStopId = nextStop && nextStop.id !== oldStopId\n    if (hasNewStopId) this.props.leaflet.map.setView([nextStop.lat, nextStop.lon])\n  }\n\n  createLeafletElement () { }\n\n  updateLeafletElement () { }\n\n  render () {\n    const { viewedStop, stopData } = this.props\n\n    if (!viewedStop || !stopData) return <FeatureGroup />\n\n    return (\n      <FeatureGroup>\n        <CircleMarker\n          key={stopData.id}\n          center={[stopData.lat, stopData.lon]}\n          radius={9}\n          fillOpacity={1}\n          fillColor='cyan'\n          color='#000'\n          weight={3}\n        >\n          <Popup>\n            <div>\n              {stopData.name}\n            </div>\n          </Popup>\n        </CircleMarker>\n      </FeatureGroup>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const viewedStop = state.otp.ui.viewedStop\n  return {\n    viewedStop: viewedStop,\n    stopData: viewedStop\n      ? state.otp.transitIndex.stops[viewedStop.stopId]\n      : null\n  }\n}\n\nconst mapDispatchToProps = {\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withLeaflet(StopViewerOverlay))\n"]}