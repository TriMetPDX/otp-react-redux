{"version":3,"sources":["park-and-ride-overlay.js"],"names":["ParkAndRideOverlay","params","props","maxTransitDistance","parkAndRideQuery","locations","length","markerIcon","iconSize","popupAnchor","html","className","map","location","k","name","startsWith","substring","y","x","context","lat","lon","setLocation","MapLayer","PropTypes","array","zipcarLocationsQuery","func","mapStateToProps","state","ownProps","otp","overlay","parkAndRide","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,kB;;;;;;;;;;;;;wCAOiB;AACnB,UAAMC,MAAM,GAAG,EAAf;;AACA,UAAI,KAAKC,KAAL,CAAWC,kBAAf,EAAmC;AACjCF,QAAAA,MAAM,CAAC,oBAAD,CAAN,GAA+B,KAAKC,KAAL,CAAWC,kBAA1C;AACD,OAJkB,CAKnB;;;AAEA,WAAKD,KAAL,CAAWE,gBAAX,CAA4BH,MAA5B;AACD;;;2CAEuB,CAAE;;;2CAEF,CAAE;;;2CAEF,CAAE;;;6BAEhB;AAAA;;AAAA,UACAI,SADA,GACc,KAAKH,KADnB,CACAG,SADA;AAER,UAAI,CAACA,SAAD,IAAcA,SAAS,CAACC,MAAV,KAAqB,CAAvC,EAA0C,OAAO,6BAAC,0BAAD,OAAP;AAE1C,UAAMC,UAAU,GAAG,sBAAQ;AACzBC,QAAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CADe;AAEzBC,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAC,EAAL,CAFY;AAGzBC,QAAAA,IAAI,EAAE,iMAHmB;AAIzBC,QAAAA,SAAS,EAAE;AAJc,OAAR,CAAnB;AAOA,aACE,6BAAC,0BAAD,QACGN,SAAS,CAACO,GAAV,CAAc,UAACC,QAAD,EAAWC,CAAX,EAAiB;AAC9B,YAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAT,CAAcC,UAAd,CAAyB,MAAzB,IAAmCH,QAAQ,CAACE,IAAT,CAAcE,SAAd,CAAwB,CAAxB,CAAnC,GAAgEJ,QAAQ,CAACE,IAAtF;AACA,eACE,6BAAC,oBAAD;AACE,UAAA,IAAI,EAAER,UADR;AAEE,UAAA,GAAG,EAAEO,CAFP;AAGE,UAAA,QAAQ,EAAE,CAACD,QAAQ,CAACK,CAAV,EAAaL,QAAQ,CAACM,CAAtB;AAHZ,WAKE,6BAAC,mBAAD,QACE;AAAK,UAAA,SAAS,EAAC;AAAf,WAEE;AAAK,UAAA,SAAS,EAAC;AAAf,WACGJ,IADH,CAFF,EAOE;AAAK,UAAA,SAAS,EAAC;AAAf,WACE,6BAAC,kBAAD;AACE,UAAA,GAAG,EAAE,KAAI,CAACK,OAAL,CAAaR,GADpB;AAEE,UAAA,QAAQ,EAAE;AACRS,YAAAA,GAAG,EAAER,QAAQ,CAACK,CADN;AAERI,YAAAA,GAAG,EAAET,QAAQ,CAACM,CAFN;AAGRJ,YAAAA,IAAI,EAAJA;AAHQ,WAFZ;AAOE,UAAA,WAAW,EAAE,KAAI,CAACb,KAAL,CAAWqB;AAP1B,UADF,CAPF,CADF,CALF,CADF;AA6BD,OA/BA,CADH,CADF;AAoCD;;;;EAtE8BC,sB,GAyEjC;;;gBAzEMxB,kB,eACe;AACjBK,EAAAA,SAAS,EAAEoB,iBAAUC,KADJ;AAEjBC,EAAAA,oBAAoB,EAAEF,iBAAUG,IAFf;AAGjBL,EAAAA,WAAW,EAAEE,iBAAUG;AAHN,C;;AA0ErB,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AACL1B,IAAAA,SAAS,EAAEyB,KAAK,CAACE,GAAN,CAAUC,OAAV,CAAkBC,WAAlB,IAAiCJ,KAAK,CAACE,GAAN,CAAUC,OAAV,CAAkBC,WAAlB,CAA8B7B;AADrE,GAAP;AAGD,CAJD;;AAMA,IAAM8B,kBAAkB,GAAG;AACzBZ,EAAAA,WAAW,EAAXA,gBADyB;AAEzBnB,EAAAA,gBAAgB,EAAhBA;AAFyB,CAA3B;;eAKe,yBAAQyB,eAAR,EAAyBM,kBAAzB,EAA6CnC,kBAA7C,C","sourcesContent":["import React, { PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { FeatureGroup, MapLayer, Marker, Popup } from 'react-leaflet'\nimport { divIcon } from 'leaflet'\n\nimport SetFromToButtons from './set-from-to'\nimport { setLocation } from '../../actions/map'\nimport { parkAndRideQuery } from '../../actions/api'\n\nclass ParkAndRideOverlay extends MapLayer {\n  static propTypes = {\n    locations: PropTypes.array,\n    zipcarLocationsQuery: PropTypes.func,\n    setLocation: PropTypes.func\n  }\n\n  componentDidMount () {\n    const params = {}\n    if (this.props.maxTransitDistance) {\n      params['maxTransitDistance'] = this.props.maxTransitDistance\n    }\n    // TODO: support config-defined bounding envelope\n\n    this.props.parkAndRideQuery(params)\n  }\n\n  componentWillUnmount () {}\n\n  createLeafletElement () {}\n\n  updateLeafletElement () {}\n\n  render () {\n    const { locations } = this.props\n    if (!locations || locations.length === 0) return <FeatureGroup />\n\n    const markerIcon = divIcon({\n      iconSize: [20, 20],\n      popupAnchor: [0, -10],\n      html: '<div style=\"width: 20px; height: 20px; background: #000; color: #fff; border-radius: 10px; font-weight: bold; font-size: 16px; padding-left: 4px; padding-top: 10px; line-height: 0px;\">P</div>',\n      className: ''\n    })\n\n    return (\n      <FeatureGroup>\n        {locations.map((location, k) => {\n          const name = location.name.startsWith('P+R ') ? location.name.substring(4) : location.name\n          return (\n            <Marker\n              icon={markerIcon}\n              key={k}\n              position={[location.y, location.x]}\n            >\n              <Popup>\n                <div className='map-overlay-popup'>\n                  {/* Popup title */}\n                  <div className='popup-title'>\n                    {name}\n                  </div>\n\n                  {/* Set as from/to toolbar */}\n                  <div className='popup-row'>\n                    <SetFromToButtons\n                      map={this.context.map}\n                      location={{\n                        lat: location.y,\n                        lon: location.x,\n                        name\n                      }}\n                      setLocation={this.props.setLocation}\n                    />\n                  </div>\n                </div>\n              </Popup>\n            </Marker>\n          )\n        })}\n      </FeatureGroup>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    locations: state.otp.overlay.parkAndRide && state.otp.overlay.parkAndRide.locations\n  }\n}\n\nconst mapDispatchToProps = {\n  setLocation,\n  parkAndRideQuery\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ParkAndRideOverlay)\n"]}