{"version":3,"sources":["route-viewer-overlay.js"],"names":["isGeomComplete","routeData","patterns","Object","values","every","ptn","geometry","RouteViewerOverlay","prevProps","props","allPoints","reduce","acc","concat","polyline","decode","points","leaflet","map","fitBounds","routeColor","color","segments","forEach","pattern","pts","push","id","length","MapLayer","mapStateToProps","state","ownProps","viewedRoute","otp","ui","transitIndex","routes","routeId","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { FeatureGroup, MapLayer, Polyline, withLeaflet } from 'react-leaflet'\n\nimport polyline from '@mapbox/polyline'\n\n// helper fn to check if geometry has been populated for all patterns in route\nconst isGeomComplete = routeData => {\n  return (\n    routeData &&\n    routeData.patterns &&\n    Object.values(routeData.patterns)\n      .every(ptn => typeof ptn.geometry !== 'undefined')\n  )\n}\n\nclass RouteViewerOverlay extends MapLayer {\n  static propTypes = {}\n\n  componentDidMount () {}\n\n  // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n  componentWillUnmount () {}\n\n  componentDidUpdate (prevProps) {\n    // if pattern geometry just finished populating, update the map points\n    if (\n      !isGeomComplete(prevProps.routeData) &&\n      isGeomComplete(this.props.routeData)\n    ) {\n      const allPoints = Object.values(this.props.routeData.patterns).reduce(\n        (acc, ptn) => {\n          return acc.concat(polyline.decode(ptn.geometry.points))\n        },\n        []\n      )\n      this.props.leaflet.map.fitBounds(allPoints)\n    }\n  }\n\n  createLeafletElement () {}\n\n  updateLeafletElement () {}\n\n  render () {\n    const { routeData } = this.props\n\n    if (!routeData || !routeData.patterns) return <FeatureGroup />\n\n    const routeColor = routeData.color ? `#${routeData.color}` : '#00bfff'\n    const segments = []\n    Object.values(routeData.patterns).forEach(pattern => {\n      if (!pattern.geometry) return\n      const pts = polyline.decode(pattern.geometry.points)\n      segments.push(\n        <Polyline\n          positions={pts}\n          weight={4}\n          color={routeColor}\n          opacity={1}\n          key={pattern.id}\n        />\n      )\n    })\n\n    return segments.length > 0\n      ? <FeatureGroup><div>{segments}</div></FeatureGroup>\n      : <FeatureGroup />\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const viewedRoute = state.otp.ui.viewedRoute\n  return {\n    viewedRoute,\n    routeData: viewedRoute && state.otp.transitIndex.routes\n      ? state.otp.transitIndex.routes[viewedRoute.routeId]\n      : null\n  }\n}\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withLeaflet(RouteViewerOverlay))\n"]}