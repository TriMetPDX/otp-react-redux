{"version":3,"sources":["vehicle-rental-overlay.js"],"names":["VehicleRentalOverlay","station","stationIsHub","props","configCompanies","leaflet","setLocation","stationNetworks","networks","stationName","name","id","isFloatingBike","isFloatingCar","isFloatingVehicle","bikesAvailable","spacesAvailable","map","lat","y","lon","x","symbolDef","strokeColor","fillColor","dockStrokeColor","pixels","_renderPopupForStation","icon","iconSize","iconAnchor","popupAnchor","html","className","pctFull","i","Math","round","baseIconClass","classes","length","toLowerCase","color","markerIcon","mapSymbols","_renderStationAsMarker","zoom","getZoom","minZoom","maxZoom","type","_renderStationAsCircle","_renderStationAsHubAndFloatingBike","refreshVehicles","_refreshTimer","setInterval","clearInterval","companies","visible","_startRefreshing","console","warn","_stopRefreshing","prevProps","stations","filteredStations","filter","value","includes","_renderStation","MapLayer","queryMode","PropTypes","string","vehicles","array","func","mapStateToProps","state","ownProps","otp","config","initZoom","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { CircleMarker, FeatureGroup, Marker, MapLayer, Popup, withLeaflet } from 'react-leaflet'\nimport { divIcon } from 'leaflet'\n\nimport { setLocation } from '../../actions/map'\nimport SetFromToButtons from './set-from-to'\nimport { getCompaniesLabelFromNetworks } from '../../util/itinerary'\n\nclass VehicleRentalOverlay extends MapLayer {\n  static propTypes = {\n    queryMode: PropTypes.string,\n    vehicles: PropTypes.array,\n    refreshVehicles: PropTypes.func\n  }\n\n  createLeafletElement () { }\n\n  updateLeafletElement () { }\n\n  _startRefreshing () {\n    // ititial station retrieval\n    this.props.refreshVehicles()\n\n    // set up timer to refresh stations periodically\n    this._refreshTimer = setInterval(() => {\n      this.props.refreshVehicles()\n    }, 30000) // defaults to every 30 sec. TODO: make this configurable?*/\n  }\n\n  _stopRefreshing () {\n    if (this._refreshTimer) clearInterval(this._refreshTimer)\n  }\n\n  componentDidMount () {\n    const {companies, mapSymbols, name, visible} = this.props\n    if (visible) this._startRefreshing()\n    if (!mapSymbols) console.warn(`No map symbols provided for layer ${name}`, companies)\n  }\n\n  componentWillUnmount () {\n    this._stopRefreshing()\n  }\n\n  componentDidUpdate (prevProps) {\n    if (!prevProps.visible && this.props.visible) {\n      this._startRefreshing()\n    } else if (prevProps.visible && !this.props.visible) {\n      this._stopRefreshing()\n    }\n  }\n\n  /**\n   * Render some popup html for a station. This contains custom logic for\n   * displaying rental vehicles in the TriMet MOD website that might not be\n   * applicable to other regions.\n   */\n  _renderPopupForStation = (station, stationIsHub = false) => {\n    const {configCompanies, leaflet, setLocation} = this.props\n    const stationNetworks = getCompaniesLabelFromNetworks(\n      station.networks,\n      configCompanies\n    )\n    let stationName = station.name || station.id\n    if (station.isFloatingBike) {\n      stationName = `Free-floating bike: ${stationName}`\n    } else if (station.isFloatingCar) {\n      stationName = `${stationNetworks} ${stationName}`\n    } else if (station.isFloatingVehicle) {\n      // assumes that all floating vehicles are E-scooters\n      stationName = `${stationNetworks} E-scooter`\n    } else {\n      stationIsHub = true\n    }\n    return (\n      <Popup>\n        <div className='map-overlay-popup'>\n          {/* Popup title */}\n          <div className='popup-title'>{stationName}</div>\n\n          {/* render dock info if it is available */}\n          {stationIsHub && (\n            <div className='popup-row'>\n              <div>Available bikes: {station.bikesAvailable}</div>\n              <div>Available docks: {station.spacesAvailable}</div>\n            </div>\n          )}\n\n          {/* Set as from/to toolbar */}\n          <div className='popup-row'>\n            <SetFromToButtons\n              map={leaflet.map}\n              location={{\n                lat: station.y,\n                lon: station.x,\n                name: stationName\n              }}\n              setLocation={setLocation}\n            />\n          </div>\n        </div>\n      </Popup>\n    )\n  }\n\n  _renderStationAsCircle = (station, symbolDef) => {\n    let strokeColor = symbolDef.strokeColor || symbolDef.fillColor\n    if (!station.isFloatingBike) {\n      strokeColor = symbolDef.dockStrokeColor || strokeColor\n    }\n    return (\n      <CircleMarker\n        key={station.id}\n        center={[station.y, station.x]}\n        color={strokeColor}\n        fillColor={symbolDef.fillColor}\n        fillOpacity={1}\n        radius={symbolDef.pixels - (station.isFloatingBike ? 1 : 0)}\n        weight={1}\n      >\n        {this._renderPopupForStation(station)}\n      </CircleMarker>\n    )\n  }\n\n  _renderStationAsHubAndFloatingBike = (station) => {\n    let icon\n    if (station.isFloatingBike) {\n      icon = divIcon({\n        iconSize: [24, 24],\n        iconAnchor: [12, 24],\n        popupAnchor: [0, -12],\n        html: `<div class=\"bike-rental-hub-icon bike-rental-out-of-hub\"></div>`,\n        className: ''\n      })\n    } else {\n      const pctFull = station.bikesAvailable / (station.bikesAvailable + station.spacesAvailable)\n      const i = Math.round(pctFull * 9)\n      icon = divIcon({\n        iconSize: [24, 24],\n        iconAnchor: [12, 24],\n        popupAnchor: [0, -12],\n        html: `<div class=\"bike-rental-hub-icon bike-rental-hub-icon-${i}\"></div>`,\n        className: ''\n      })\n    }\n    return (\n      <Marker\n        icon={icon}\n        key={station.id}\n        position={[station.y, station.x]}\n      >\n        {this._renderPopupForStation(station, !station.isFloatingBike)}\n      </Marker>\n    )\n  }\n\n  _renderStationAsMarker = (station, symbolDef) => {\n    const {baseIconClass} = this.props\n    let classes = `fa fa-map-marker ${baseIconClass}`\n    // If this station is exclusive to a single network, apply the the class for that network\n    if (station.networks.length === 1) {\n      classes += ` ${baseIconClass}-${station.networks[0].toLowerCase()}`\n    }\n    const color = symbolDef && symbolDef.fillColor\n      ? symbolDef.fillColor\n      : 'gray'\n    const markerIcon = divIcon({\n      className: '',\n      iconSize: [11, 16],\n      popupAnchor: [0, -6],\n      html: `<i class=\"${classes}\" style=\"color: ${color}\"/>`\n    })\n\n    return (\n      <Marker\n        icon={markerIcon}\n        key={station.id}\n        position={[station.y, station.x]}\n      >\n        {this._renderPopupForStation(station)}\n      </Marker>\n    )\n  }\n\n  _renderStation = (station) => {\n    // render the station according to any map symbol configuration\n    const {mapSymbols} = this.props\n\n    // no config set, just render a default marker\n    if (!mapSymbols) return this._renderStationAsMarker(station)\n\n    // get zoom to check which symbol to render\n    const zoom = this.props.leaflet.map.getZoom()\n\n    for (let i = 0; i < mapSymbols.length; i++) {\n      const symbolDef = mapSymbols[i]\n      if (symbolDef.minZoom <= zoom && symbolDef.maxZoom >= zoom) {\n        switch (symbolDef.type) {\n          case 'circle':\n            return this._renderStationAsCircle(station, symbolDef)\n          case 'hubAndFloatingBike':\n            return this._renderStationAsHubAndFloatingBike(station)\n          default:\n            return this._renderStationAsMarker(station, symbolDef)\n        }\n      }\n    }\n\n    // no matching symbol definition, render default marker\n    return this._renderStationAsMarker(station)\n  }\n\n  render () {\n    const { stations, companies } = this.props\n    let filteredStations = stations\n    if (companies) {\n      filteredStations = stations.filter(\n        station => station.networks.filter(value => companies.includes(value)).length > 0\n      )\n    }\n\n    if (!filteredStations || filteredStations.length === 0) return <FeatureGroup />\n\n    return (\n      <FeatureGroup>\n        {filteredStations.map(this._renderStation)}\n      </FeatureGroup>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    configCompanies: state.otp.config.companies,\n    zoom: state.otp.config.map.initZoom\n  }\n}\n\nconst mapDispatchToProps = {\n  setLocation\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withLeaflet(VehicleRentalOverlay))\n"]}