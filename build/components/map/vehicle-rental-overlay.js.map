{"version":3,"sources":["vehicle-rental-overlay.js"],"names":["VehicleRentalOverlay","station","stationName","networks","join","name","id","context","map","lat","y","lon","x","props","setLocation","symbolDef","strokeColor","fillColor","isFloatingBike","dockStrokeColor","pixels","_renderPopupForStation","icon","iconSize","iconAnchor","popupAnchor","html","className","pctFull","bikesAvailable","spacesAvailable","i","Math","round","baseIconClass","classes","length","toLowerCase","color","markerIcon","mapSymbols","_renderStationAsMarker","zoom","getZoom","minZoom","maxZoom","type","_renderStationAsCircle","_renderStationAsHubAndFloatingBike","refreshVehicles","_refreshTimer","setInterval","clearInterval","companies","visible","_startRefreshing","console","warn","_stopRefreshing","nextProps","stations","filteredStations","filter","value","includes","_renderStation","MapLayer","queryMode","PropTypes","string","vehicles","array","func","mapStateToProps","state","ownProps","otp","config","initZoom","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { CircleMarker, FeatureGroup, Marker, MapLayer, Popup } from 'react-leaflet'\nimport { divIcon } from 'leaflet'\n\nimport SetFromToButtons from './set-from-to'\nimport { setLocation } from '../../actions/map'\n\nclass VehicleRentalOverlay extends MapLayer {\n  static propTypes = {\n    queryMode: PropTypes.string,\n    vehicles: PropTypes.array,\n    refreshVehicles: PropTypes.func\n  }\n\n  createLeafletElement () { }\n\n  updateLeafletElement () { }\n\n  _startRefreshing () {\n    // ititial station retrieval\n    this.props.refreshVehicles()\n\n    // set up timer to refresh stations periodically\n    this._refreshTimer = setInterval(() => {\n      this.props.refreshVehicles()\n    }, 30000) // defaults to every 30 sec. TODO: make this configurable?*/\n  }\n\n  _stopRefreshing () {\n    if (this._refreshTimer) clearInterval(this._refreshTimer)\n  }\n\n  componentDidMount () {\n    const {companies, mapSymbols, name, visible} = this.props\n    if (visible) this._startRefreshing()\n    if (!mapSymbols) console.warn(`No map symbols provided for layer ${name}`, companies)\n  }\n\n  componentWillUnmount () {\n    this._stopRefreshing()\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (!this.props.visible && nextProps.visible) {\n      this._startRefreshing()\n    } else if (this.props.visible && !nextProps.visible) {\n      this._stopRefreshing()\n    }\n  }\n\n  _renderPopupForStation = (station) => {\n    const stationName = `${station.networks.join('/')} ${station.name || station.id}`\n    return (\n      <Popup>\n        <div className='map-overlay-popup'>\n          {/* Popup title */}\n          <div className='popup-title'>\n            Floating vehicle {stationName}\n          </div>\n\n          {/* Set as from/to toolbar */}\n          <div className='popup-row'>\n            <SetFromToButtons\n              map={this.context.map}\n              location={{\n                lat: station.y,\n                lon: station.x,\n                name: stationName\n              }}\n              setLocation={this.props.setLocation}\n            />\n          </div>\n        </div>\n      </Popup>\n    )\n  }\n\n  _renderStationAsCircle = (station, symbolDef) => {\n    let strokeColor = symbolDef.strokeColor || symbolDef.fillColor\n    if (!station.isFloatingBike) {\n      strokeColor = symbolDef.dockStrokeColor || strokeColor\n    }\n    return (\n      <CircleMarker\n        key={station.id}\n        center={[station.y, station.x]}\n        color={strokeColor}\n        fillColor={symbolDef.fillColor}\n        fillOpacity={1}\n        radius={symbolDef.pixels - (station.isFloatingBike ? 1 : 0)}\n        weight={1}\n      >\n        {this._renderPopupForStation(station)}\n      </CircleMarker>\n    )\n  }\n\n  _renderStationAsHubAndFloatingBike = (station) => {\n    let icon\n    if (station.isFloatingBike) {\n      icon = divIcon({\n        iconSize: [24, 24],\n        iconAnchor: [12, 24],\n        popupAnchor: [0, -12],\n        html: `<div class=\"bike-rental-hub-icon bike-rental-out-of-hub\"></div>`,\n        className: ''\n      })\n    } else {\n      const pctFull = station.bikesAvailable / (station.bikesAvailable + station.spacesAvailable)\n      const i = Math.round(pctFull * 9)\n      icon = divIcon({\n        iconSize: [24, 24],\n        iconAnchor: [12, 24],\n        popupAnchor: [0, -12],\n        html: `<div class=\"bike-rental-hub-icon bike-rental-hub-icon-${i}\"></div>`,\n        className: ''\n      })\n    }\n    return (\n      <Marker\n        icon={icon}\n        key={station.id}\n        position={[station.y, station.x]}\n      >\n        <Popup>\n          <div className='map-overlay-popup'>\n            {/* Popup title */}\n            <div className='popup-title'>\n              {station.isFloatingBike\n                ? <span>Floating bike: {station.name}</span>\n                : <span>{station.name}</span>\n              }\n            </div>\n\n            {/* Details */}\n            {!station.isFloatingBike && (\n              <div className='popup-row'>\n                <div>Available bikes: {station.bikesAvailable}</div>\n                <div>Available docks: {station.spacesAvailable}</div>\n              </div>\n            )}\n\n            {/* Set as from/to toolbar */}\n            <div className='popup-row'>\n              <SetFromToButtons\n                map={this.context.map}\n                location={{\n                  lat: station.y,\n                  lon: station.x,\n                  name: station.name\n                }}\n                setLocation={this.props.setLocation}\n              />\n            </div>\n          </div>\n        </Popup>\n      </Marker>\n    )\n  }\n\n  _renderStationAsMarker = (station, symbolDef) => {\n    const {baseIconClass} = this.props\n    let classes = `fa fa-map-marker ${baseIconClass}`\n    // If this station is exclusive to a single network, apply the the class for that network\n    if (station.networks.length === 1) {\n      classes += ` ${baseIconClass}-${station.networks[0].toLowerCase()}`\n    }\n    const color = symbolDef && symbolDef.fillColor\n      ? symbolDef.fillColor\n      : 'gray'\n    const markerIcon = divIcon({\n      className: '',\n      iconSize: [11, 16],\n      popupAnchor: [0, -6],\n      html: `<i class=\"${classes}\" style=\"color: ${color}\"/>`\n    })\n\n    return (\n      <Marker\n        icon={markerIcon}\n        key={station.id}\n        position={[station.y, station.x]}\n      >\n        {this._renderPopupForStation(station)}\n      </Marker>\n    )\n  }\n\n  _renderStation = (station) => {\n    // render the station according to any map symbol configuration\n    const {mapSymbols} = this.props\n\n    // no config set, just render a default marker\n    if (!mapSymbols) return this._renderStationAsMarker(station)\n\n    // get zoom to check which symbol to render\n    const zoom = this.context.map.getZoom()\n\n    for (let i = 0; i < mapSymbols.length; i++) {\n      const symbolDef = mapSymbols[i]\n      if (symbolDef.minZoom <= zoom && symbolDef.maxZoom >= zoom) {\n        switch (symbolDef.type) {\n          case 'circle':\n            return this._renderStationAsCircle(station, symbolDef)\n          case 'hubAndFloatingBike':\n            return this._renderStationAsHubAndFloatingBike(station)\n          default:\n            return this._renderStationAsMarker(station, symbolDef)\n        }\n      }\n    }\n\n    // no matching symbol definition, render default marker\n    return this._renderStationAsMarker(station)\n  }\n\n  render () {\n    const { stations, companies } = this.props\n    let filteredStations = stations\n    if (companies) {\n      filteredStations = stations.filter(\n        station => station.networks.filter(value => companies.includes(value)).length > 0\n      )\n    }\n\n    if (!filteredStations || filteredStations.length === 0) return <FeatureGroup />\n\n    return (\n      <FeatureGroup>\n        {filteredStations.map(this._renderStation)}\n      </FeatureGroup>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    zoom: state.otp.config.map.initZoom\n  }\n}\n\nconst mapDispatchToProps = {\n  setLocation\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VehicleRentalOverlay)\n"]}