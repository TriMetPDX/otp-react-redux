{"version":3,"sources":["stop-viewer.js"],"names":["StopViewer","props","setMainPanelContent","type","setLocation","stopData","location","name","lat","lon","reverseGeocode","setState","popupPosition","_setLocationFromStop","findStopTimesForStop","viewedStop","stopId","spin","window","setTimeout","_stopSpin","autoRefreshStopTimes","toggleAutoRefresh","_refreshStopTimes","timer","setInterval","clearInterval","state","forgetStop","rememberStop","_isFavorite","id","favoriteStops","findIndex","s","findStop","_startAutoRefresh","_stopAutoRefresh","prevProps","hideBackButton","homeTimezone","showUserSettings","stopViewerArriving","stopViewerConfig","timeFormat","includes","split","stopTimesByPattern","routes","stopTimes","forEach","patternTimes","routeId","getRouteIdForPattern","pattern","headsign","times","route","find","r","console","warn","filteredTimes","filter","stopTime","stopIndex","stopCount","concat","_backClicked","_toggleFavorite","color","padding","marginLeft","clear","fontSize","stopTimesLastUpdated","tz","format","_onClickPlanFrom","_onClickPlanTo","marginTop","Object","values","sort","a","b","map","fontWeight","_onToggleAutoRefresh","Component","PropTypes","bool","object","PatternRow","expanded","sortedStopTimes","hasStopTimes","length","aTime","serviceDay","realtimeDeparture","bTime","slice","numberOfDepartures","routeName","shortName","longName","getFormattedStopTime","_toggleExpandedView","animation","i","display","realtimeState","getStatusLabel","departureDelay","backgroundColor","ONE_HOUR_IN_SECONDS","ONE_DAY_IN_SECONDS","soonText","userTimeZone","inHomeTimezone","now","departureTimeRemainder","daysAfterServiceDay","departureDay","add","vehicleDepartsToday","dayOfYear","secondsUntilDeparture","unix","departsInFuture","showCountdown","countdownString","formattedTime","showDayOfWeek","float","marginRight","marginBottom","patternIdParts","delay","Math","abs","mapStateToProps","ownProps","otp","user","config","ui","transitIndex","stops","language","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\nimport 'moment-timezone'\nimport { VelocityTransitionGroup } from 'velocity-react'\n\nimport Icon from '../narrative/icon'\nimport LocationIcon from '../icons/location-icon'\n\nimport { setMainPanelContent, toggleAutoRefresh } from '../../actions/ui'\nimport { findStop, findStopTimesForStop } from '../../actions/api'\nimport { forgetStop, rememberStop, setLocation } from '../../actions/map'\nimport { routeComparator } from '../../util/itinerary'\nimport { getShowUserSettings, getStopViewerConfig } from '../../util/state'\nimport { formatDuration, formatSecondsAfterMidnight, getTimeFormat, getUserTimezone } from '../../util/time'\n\nclass StopViewer extends Component {\n  state = {}\n\n  static propTypes = {\n    hideBackButton: PropTypes.bool,\n    stopData: PropTypes.object,\n    viewedStop: PropTypes.object\n  }\n\n  _backClicked = () => this.props.setMainPanelContent(null)\n\n  _setLocationFromStop = (type) => {\n    const { setLocation, stopData } = this.props\n    const location = {\n      name: stopData.name,\n      lat: stopData.lat,\n      lon: stopData.lon\n    }\n    setLocation({ type, location, reverseGeocode: true })\n    this.setState({ popupPosition: null })\n  }\n\n  _onClickPlanTo = () => this._setLocationFromStop('to')\n\n  _onClickPlanFrom = () => this._setLocationFromStop('from')\n\n  _refreshStopTimes = () => {\n    const { findStopTimesForStop, viewedStop } = this.props\n    findStopTimesForStop({ stopId: viewedStop.stopId })\n    // TODO: GraphQL approach would just call findStop again.\n    // findStop({ stopId: viewedStop.stopId })\n    this.setState({ spin: true })\n    window.setTimeout(this._stopSpin, 1000)\n  }\n\n  _onToggleAutoRefresh = () => {\n    const { autoRefreshStopTimes, toggleAutoRefresh } = this.props\n    if (autoRefreshStopTimes) {\n      toggleAutoRefresh(false)\n    } else {\n      // Turn on auto-refresh and refresh immediately to give user feedback.\n      this._refreshStopTimes()\n      toggleAutoRefresh(true)\n    }\n  }\n\n  _stopSpin = () => this.setState({ spin: false })\n\n  componentDidMount () {\n    // Load the viewed stop in the store when the Stop Viewer first mounts\n    this.props.findStop({ stopId: this.props.viewedStop.stopId })\n    // Turn on stop times refresh if enabled.\n    if (this.props.autoRefreshStopTimes) this._startAutoRefresh()\n  }\n\n  componentWillUnmount () {\n    // Turn off auto refresh unconditionally (just in case).\n    this._stopAutoRefresh()\n  }\n\n  _startAutoRefresh = () => {\n    const timer = window.setInterval(this._refreshStopTimes, 10000)\n    this.setState({ timer })\n  }\n\n  _stopAutoRefresh = () => {\n    window.clearInterval(this.state.timer)\n  }\n\n  _toggleFavorite = () => {\n    const { forgetStop, rememberStop, stopData } = this.props\n    if (this._isFavorite()) forgetStop(stopData.id)\n    else rememberStop(stopData)\n  }\n\n  _isFavorite = () => this.props.stopData &&\n    this.props.favoriteStops.findIndex(s => s.id === this.props.stopData.id) !== -1\n\n  // refresh the stop in the store if the viewed stop changes w/ the\n  // Stop Viewer already mounted\n  componentDidUpdate (prevProps) {\n    if (\n      prevProps.viewedStop &&\n      this.props.viewedStop &&\n      prevProps.viewedStop.stopId !== this.props.viewedStop.stopId\n    ) {\n      this.props.findStop({ stopId: this.props.viewedStop.stopId })\n    }\n    // Handle stopping or starting the auto refresh timer.\n    if (prevProps.autoRefreshStopTimes && !this.props.autoRefreshStopTimes) this._stopAutoRefresh()\n    else if (!prevProps.autoRefreshStopTimes && this.props.autoRefreshStopTimes) this._startAutoRefresh()\n  }\n\n  render () {\n    const {\n      hideBackButton,\n      homeTimezone,\n      showUserSettings,\n      stopData,\n      stopViewerArriving,\n      stopViewerConfig,\n      timeFormat\n    } = this.props\n    const { spin } = this.state\n    // Rewrite stop ID to not include Agency prefix, if present\n    // TODO: make this functionality configurable?\n    let stopId\n    if (stopData && stopData.id) {\n      stopId = stopData.id.includes(':') ? stopData.id.split(':')[1] : stopData.id\n    }\n    // construct a lookup table mapping pattern (e.g. 'ROUTE_ID-HEADSIGN') to an array of stoptimes\n    const stopTimesByPattern = {}\n    if (stopData && stopData.routes && stopData.stopTimes) {\n      stopData.stopTimes.forEach(patternTimes => {\n        const routeId = getRouteIdForPattern(patternTimes.pattern)\n        const headsign = patternTimes.times[0] && patternTimes.times[0].headsign\n        patternTimes.pattern.headsign = headsign\n        const id = `${routeId}-${headsign}`\n        if (!(id in stopTimesByPattern)) {\n          const route = stopData.routes.find(r => r.id === routeId)\n          // in some cases, the TriMet transit index will not return all routes\n          // that serve a stop. Perhaps it doesn't return some routes if the\n          // route only performs a drop-off at the stop... not quite sure. So a\n          // check is needed to make sure we don't add data for routes not found\n          // from the routes query.\n          if (!route) {\n            console.warn(`Route with id ${routeId} not found in list of routes! No stop times from this route will be displayed.`)\n            return\n          }\n          stopTimesByPattern[id] = {\n            id,\n            route,\n            pattern: patternTimes.pattern,\n            times: []\n          }\n        }\n        const filteredTimes = patternTimes.times.filter(stopTime => {\n          return stopTime.stopIndex < stopTime.stopCount - 1 // ensure that this isn't the last stop\n        })\n        stopTimesByPattern[id].times = stopTimesByPattern[id].times.concat(filteredTimes)\n      })\n    }\n    return (\n      <div className='stop-viewer'>\n        {/* Header Block */}\n        <div className='stop-viewer-header'>\n          {/* Back button */}\n          {!hideBackButton && (\n            <div className='back-button-container'>\n              <Button\n                bsSize='small'\n                onClick={this._backClicked}\n              ><Icon type='arrow-left' />Back</Button>\n            </div>\n          )}\n\n          {/* Header Text */}\n          <div className='header-text'>\n            {stopData\n              ? <span>{stopData.name}</span>\n              : <span>Loading Stop...</span>\n            }\n            {showUserSettings\n              ? <Button\n                onClick={this._toggleFavorite}\n                bsSize='large'\n                style={{\n                  color: this._isFavorite() ? 'yellow' : 'black',\n                  padding: 0,\n                  marginLeft: '5px'\n                }}\n                bsStyle='link'>\n                <Icon type={this._isFavorite() ? 'star' : 'star-o'} />\n              </Button>\n              : null\n            }\n          </div>\n          <div style={{ clear: 'both' }} />\n        </div>\n\n        {stopData && (\n          <div className='stop-viewer-body'>\n            {/*\n              Plan trip from/to here buttons.\n              TODO: Can this be combined w/ SetFromToButtons?\n            */ }\n            <div>\n              <div>\n                <b>Stop ID</b>: {stopId}\n                <button\n                  className='link-button pull-right'\n                  style={{ fontSize: 'small' }}\n                  onClick={this._refreshStopTimes}>\n                  <Icon\n                    className={spin ? 'fa-spin' : ''}\n                    type='refresh' />{' '}\n                  {moment(stopData.stopTimesLastUpdated)\n                    .tz(getUserTimezone())\n                    .format(timeFormat)}\n                </button>\n              </div>\n              <b>Plan a trip:</b>{' '}\n              <LocationIcon type='from' />{' '}\n              <button className='link-button'\n                onClick={this._onClickPlanFrom}>\n                From here\n              </button>{' '}|{' '}\n              <LocationIcon type='to' />{' '}\n              <button className='link-button'\n                onClick={this._onClickPlanTo}>\n                To here\n              </button>\n            </div>\n\n            {/* pattern listing */}\n            {stopData.stopTimes && stopData.routes && (\n              <div style={{ marginTop: 20 }}>\n                {Object.values(stopTimesByPattern)\n                  .sort((a, b) => routeComparator(a.route, b.route))\n                  .map(patternTimes => {\n                    // Only add pattern row if route is found.\n                    // FIXME: there is currently a bug with the alernative transit index\n                    // where routes are not associated with the stop if the only stoptimes\n                    // for the stop are drop off only. See https://github.com/ibi-group/trimet-mod-otp/issues/217\n                    if (!patternTimes.route) {\n                      console.warn(`Cannot render stop times for missing route ID: ${getRouteIdForPattern(patternTimes.pattern)}`)\n                      return null\n                    }\n                    return (\n                      <PatternRow\n                        pattern={patternTimes.pattern}\n                        route={patternTimes.route}\n                        stopTimes={patternTimes.times}\n                        stopViewerConfig={stopViewerConfig}\n                        key={patternTimes.id}\n                        stopViewerArriving={stopViewerArriving}\n                        homeTimezone={homeTimezone}\n                        timeFormat={timeFormat}\n                      />\n                    )\n                  })\n                }\n              </div>\n            )}\n            <div style={{ marginTop: '20px' }}>\n              <label style={{ fontWeight: 300, fontSize: 'small' }}>\n                <input\n                  name='autoUpdate'\n                  type='checkbox'\n                  checked={this.props.autoRefreshStopTimes}\n                  onChange={this._onToggleAutoRefresh} />{' '}\n                Auto-refresh arrivals?\n              </label>\n            </div>\n            {/* Future: add stop details */}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nclass PatternRow extends Component {\n  constructor () {\n    super()\n    this.state = { expanded: false }\n  }\n\n  _toggleExpandedView = () => {\n    this.setState({ expanded: !this.state.expanded })\n  }\n\n  render () {\n    const {\n      pattern,\n      route,\n      stopTimes,\n      homeTimezone,\n      stopViewerArriving,\n      stopViewerConfig,\n      timeFormat\n    } = this.props\n    // sort stop times by next departure\n    let sortedStopTimes = []\n    const hasStopTimes = stopTimes && stopTimes.length > 0\n    if (hasStopTimes) {\n      sortedStopTimes = stopTimes\n        .concat()\n        .sort((a, b) => {\n          const aTime = a.serviceDay + a.realtimeDeparture\n          const bTime = b.serviceDay + b.realtimeDeparture\n          return aTime - bTime\n        })\n        // We request only x departures per pattern, but the patterns are merged\n        // according to shared headsigns, so we need to slice the stop times\n        // here as well to ensure only x times are shown per route/headsign combo.\n        // This is applied after the sort, so we're keeping the soonest departures.\n        .slice(0, stopViewerConfig.numberOfDepartures)\n    } else {\n      // Do not include pattern row if it has no stop times.\n      return null\n    }\n    const routeName = route.shortName ? route.shortName : route.longName\n\n    return (\n      <div className='route-row'>\n        {/* header row */}\n        <div className='header'>\n          {/* route name */}\n          <div className='route-name'>\n            {/* <button className='expansion-button' onClick={this._toggleExpandedView}> */}\n            <b>{routeName}</b> To {pattern.headsign}\n            {/* </button> */}\n          </div>\n\n          {/* next departure preview */}\n          {hasStopTimes && (\n            <div className='next-trip-preview'>\n              {getFormattedStopTime(sortedStopTimes[0], homeTimezone, stopViewerArriving, timeFormat)}\n            </div>\n          )}\n\n          {/* expansion chevron button */}\n          <div className='expansion-button-container'>\n            <button className='expansion-button' onClick={this._toggleExpandedView}>\n              <Icon type={`chevron-${this.state.expanded ? 'up' : 'down'}`} />\n            </button>\n          </div>\n        </div>\n\n        {/* expanded view */}\n        <VelocityTransitionGroup\n          enter={{ animation: 'slideDown' }}\n          leave={{ animation: 'slideUp' }}>\n          {this.state.expanded && (\n            <div>\n              <div className='trip-table'>\n                {/* trips table header row */}\n                <div className='header'>\n                  <div className='cell' />\n                  <div className='cell time-column'>DEPARTURE</div>\n                  <div className='cell status-column'>STATUS</div>\n                </div>\n\n                {/* list of upcoming trips */}\n                {hasStopTimes && (\n                  sortedStopTimes.map((stopTime, i) => {\n                    return (\n                      <div\n                        className='trip-row'\n                        style={{ display: 'table-row', marginTop: 6, fontSize: 14 }}\n                        key={i}>\n                        <div className='cell'>\n                          To {stopTime.headsign}\n                        </div>\n                        <div className='cell time-column'>\n                          {getFormattedStopTime(stopTime, homeTimezone, stopViewerArriving, timeFormat)}\n                        </div>\n                        <div className='cell status-column'>\n                          {stopTime.realtimeState === 'UPDATED'\n                            ? getStatusLabel(stopTime.departureDelay)\n                            : <div\n                              className='status-label'\n                              style={{ backgroundColor: '#bbb' }}>\n                              Scheduled\n                            </div>\n                          }\n                        </div>\n                      </div>\n                    )\n                  })\n                )}\n              </div>\n            </div>\n          )}\n        </VelocityTransitionGroup>\n      </div>\n    )\n  }\n}\n\nconst ONE_HOUR_IN_SECONDS = 3600\nconst ONE_DAY_IN_SECONDS = 86400\n\n/**\n * Helper method to generate stop time w/ status icon\n *\n * @param  {object} stopTime  A stopTime object as received from a transit index API\n * @param  {string} [homeTimezone]  If configured, the timezone of the area\n * @param  {string} [soonText='Due']  The text to display for departure times\n *    about to depart in a short amount of time\n * @param  {string} timeFormat  A valid moment.js formatting string\n */\nfunction getFormattedStopTime (stopTime, homeTimezone, soonText = 'Due', timeFormat) {\n  const userTimeZone = getUserTimezone()\n  const inHomeTimezone = homeTimezone && homeTimezone === userTimeZone\n\n  const now = moment().tz(homeTimezone)\n  const serviceDay = moment(stopTime.serviceDay * 1000).tz(homeTimezone)\n  // Determine if arrival occurs on different day, making sure to account for\n  // any extra days added to the service day if it arrives after midnight. Note:\n  // this can handle the rare (and non-existent?) case where an arrival occurs\n  // 48:00 hours (or more) from the start of the service day.\n  const departureTimeRemainder = stopTime.realtimeDeparture % ONE_DAY_IN_SECONDS\n  const daysAfterServiceDay = (stopTime.realtimeDeparture - departureTimeRemainder) / ONE_DAY_IN_SECONDS\n  const departureDay = serviceDay.add(daysAfterServiceDay, 'day')\n  const vehicleDepartsToday = now.dayOfYear() === departureDay.dayOfYear()\n  // Determine whether to show departure as countdown (e.g. \"5 min\") or as HH:mm\n  // time.\n  const secondsUntilDeparture = (stopTime.realtimeDeparture + stopTime.serviceDay) - now.unix()\n  // Determine if vehicle arrives after midnight in order to advance the day of\n  // the week when showing arrival time/day.\n  const departsInFuture = secondsUntilDeparture > 0\n  // Show the exact time if the departure happens within an hour.\n  const showCountdown = secondsUntilDeparture < ONE_HOUR_IN_SECONDS && departsInFuture\n\n  // Use \"soon text\" (e.g., Due) if vehicle is approaching.\n  const countdownString = secondsUntilDeparture < 60\n    ? soonText\n    : formatDuration(secondsUntilDeparture)\n  const formattedTime = formatSecondsAfterMidnight(\n    stopTime.realtimeDeparture,\n    // Only show timezone (e.g., PDT) if user is not in home time zone (e.g., user\n    // in New York, but viewing a trip planner for service based in Los Angeles).\n    inHomeTimezone ? timeFormat : `${timeFormat} z`\n  )\n  // We only want to show the day of the week if the arrival is on a\n  // different day and we're not showing the countdown string. This avoids\n  // cases such as when it's Wednesday at 11:55pm and an arrival occurs at\n  // Thursday 12:19am. We don't want the time to read: 'Thursday, 24 minutes'.\n  const showDayOfWeek = !vehicleDepartsToday && !showCountdown\n  return (\n    <div>\n      <div style={{ float: 'left' }}>\n        {stopTime.realtimeState === 'UPDATED'\n          ? <Icon\n            type='rss'\n            style={{ color: '#888', fontSize: '0.8em', marginRight: 2 }} />\n          : <Icon\n            type='clock-o'\n            style={{ color: '#888', fontSize: '0.8em', marginRight: 2 }} />\n        }\n      </div>\n      <div style={{ marginLeft: 20, fontSize: showDayOfWeek ? 12 : 14 }}>\n        {showDayOfWeek &&\n          <div style={{ marginBottom: -4 }}>{departureDay.format('dddd')}</div>\n        }\n        <div>\n          {showCountdown\n            // Show countdown string (e.g., 3 min or Due)\n            ? countdownString\n            // Show formatted time (with timezone if user is not in home timezone)\n            : formattedTime\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction getRouteIdForPattern (pattern) {\n  const patternIdParts = pattern.id.split(':')\n  const routeId = patternIdParts[0] + ':' + patternIdParts[1]\n  return routeId\n}\n\n// helper method to generate status label\nfunction getStatusLabel (delay) {\n  // late departure\n  if (delay > 60) {\n    return (\n      <div className='status-label' style={{ backgroundColor: '#d9534f' }}>\n        {formatDuration(delay)} Late\n      </div>\n    )\n  }\n\n  // early departure\n  if (delay < -60) {\n    return (\n      <div className='status-label' style={{ backgroundColor: '#337ab7' }}>\n        {formatDuration(Math.abs(delay))} Early\n      </div>\n    )\n  }\n\n  // on-time departure\n  return (\n    <div className='status-label' style={{ backgroundColor: '#5cb85c' }}>\n      On Time\n    </div>\n  )\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const showUserSettings = getShowUserSettings(state.otp)\n  const stopViewerConfig = getStopViewerConfig(state.otp)\n  return {\n    autoRefreshStopTimes: state.otp.user.autoRefreshStopTimes,\n    favoriteStops: state.otp.user.favoriteStops,\n    homeTimezone: state.otp.config.homeTimezone,\n    viewedStop: state.otp.ui.viewedStop,\n    showUserSettings,\n    stopData: state.otp.transitIndex.stops[state.otp.ui.viewedStop.stopId],\n    stopViewerArriving: state.otp.config.language.stopViewerArriving,\n    stopViewerConfig,\n    timeFormat: getTimeFormat(state.otp.config)\n  }\n}\n\nconst mapDispatchToProps = {\n  findStop,\n  findStopTimesForStop,\n  forgetStop,\n  rememberStop,\n  setLocation,\n  setMainPanelContent,\n  toggleAutoRefresh\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StopViewer)\n"]}