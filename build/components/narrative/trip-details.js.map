{"version":3,"sources":["trip-details.js"],"names":["TripDetails","props","itinerary","timeFormat","longDateFormat","date","startTime","centsToString","dollarsToString","maxTNCFare","minTNCFare","transitFare","companies","legs","forEach","leg","tncData","company","fare","textTransform","toLowerCase","bikeDuration","caloriesBurned","walkDuration","timeOptions","format","offset","routingType","Math","round","Component","TripDetail","state","expanded","_onHideClick","_onExpandClick","setState","icon","summary","description","_toggle","animation","mapStateToProps","ownProps","otp","currentQuery","tnc","config"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,W;;;;;;;;;;;;;6BACM;AAAA,wBAC0C,KAAKC,KAD/C;AAAA,UACAC,SADA,eACAA,SADA;AAAA,UACWC,UADX,eACWA,UADX;AAAA,UACuBC,cADvB,eACuBA,cADvB;AAER,UAAMC,IAAI,GAAG,qBAAOH,SAAS,CAACI,SAAjB,CAAb,CAFQ,CAIR;;AAJQ,4BAKwE,+BAAeJ,SAAf,CALxE;AAAA,UAKAK,aALA,mBAKAA,aALA;AAAA,UAKeC,eALf,mBAKeA,eALf;AAAA,UAKgCC,UALhC,mBAKgCA,UALhC;AAAA,UAK4CC,UAL5C,mBAK4CA,UAL5C;AAAA,UAKwDC,WALxD,mBAKwDA,WALxD;;AAMR,UAAIC,SAAJ;AACAV,MAAAA,SAAS,CAACW,IAAV,CAAeC,OAAf,CAAuB,UAAAC,GAAG,EAAI;AAC5B,YAAIA,GAAG,CAACC,OAAR,EAAiB;AACfJ,UAAAA,SAAS,GAAGG,GAAG,CAACC,OAAJ,CAAYC,OAAxB;AACD;AACF,OAJD;AAKA,UAAIC,IAAJ;;AACA,UAAIP,WAAW,IAAID,UAAnB,EAA+B;AAC7BQ,QAAAA,IAAI,GACF,2CACGP,WAAW,IACV,6DAAoB,wCAAIJ,aAAa,CAACI,WAAD,CAAjB,CAApB,CAFJ,EAIGD,UAAU,KAAK,CAAf,IACC,2CACE,wCADF,EAEE;AAAM,UAAA,KAAK,EAAE;AAAES,YAAAA,aAAa,EAAE;AAAjB;AAAb,WACGP,SAAS,CAACQ,WAAV,EADH,CAFF,EAIU,GAJV,YAKQ,wCAAIZ,eAAe,CAACE,UAAD,CAAnB,SAAoCF,eAAe,CAACC,UAAD,CAAnD,CALR,CALJ,CADF;AAgBD,OA9BO,CAgCR;;;AAhCQ,kCAiC+C,0CAA0BP,SAA1B,CAjC/C;AAAA,UAiCAmB,YAjCA,yBAiCAA,YAjCA;AAAA,UAiCcC,cAjCd,yBAiCcA,cAjCd;AAAA,UAiC8BC,YAjC9B,yBAiC8BA,YAjC9B;;AAmCR,UAAMC,WAAW,GAAG;AAClBC,QAAAA,MAAM,EAAEtB,UADU;AAElBuB,QAAAA,MAAM,EAAE,kCAAkBxB,SAAlB;AAFU,OAApB;AAKA,aACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,wBADF,EAEE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,6BAAC,UAAD;AACE,QAAA,IAAI,EAAE;AAAG,UAAA,SAAS,EAAC;AAAb,UADR;AAEE,QAAA,OAAO,EACL,2CACE,sDAAa,wCAAIG,IAAI,CAACoB,MAAL,CAAYrB,cAAZ,CAAJ,CAAb,CADF,EAEG,KAAKH,KAAL,CAAW0B,WAAX,KAA2B,WAA3B,IAA0C,mDAAU,wCAAI,sBAAWzB,SAAS,CAACI,SAArB,EAAgCkB,WAAhC,CAAJ,CAAV,CAF7C;AAHJ,QADF,EAUGN,IAAI,IACH,6BAAC,UAAD;AACE,QAAA,IAAI,EAAE;AAAG,UAAA,SAAS,EAAC;AAAb,UADR;AAEE,QAAA,OAAO,EAAEA;AAFX,QAXJ,EAgBGI,cAAc,GAAG,CAAjB,IACC,6BAAC,UAAD;AACE,QAAA,IAAI,EAAE;AAAG,UAAA,SAAS,EAAC;AAAb,UADR;AAEE,QAAA,OAAO,EAAE,gEAAuB,wCAAIM,IAAI,CAACC,KAAL,CAAWP,cAAX,CAAJ,CAAvB,CAFX;AAGE,QAAA,WAAW,EACT,2EAC8B,wCAAIM,IAAI,CAACC,KAAL,CAAWN,YAAY,GAAG,EAA1B,CAAJ,eAD9B,EAC+E,GAD/E,wBAEoB,wCAAIK,IAAI,CAACC,KAAL,CAAWR,YAAY,GAAG,EAA1B,CAAJ,eAFpB,EAEqE,GAFrE,iDAG8C,GAH9C,EAIE;AACE,UAAA,IAAI,EAAC,gFADP;AAEE,UAAA,MAAM,EAAC;AAFT,qEAJF;AAJJ,QAjBJ,CAFF,CADF;AAwCD;;;;EAjFuBS,gB;;IAoFpBC,U;;;;;AACJ,sBAAa9B,KAAb,EAAoB;AAAA;;AAAA;;AAClB,oFAAMA,KAAN;;AADkB,8DAOV;AAAA,aAAM,MAAK+B,KAAL,CAAWC,QAAX,GAAsB,MAAKC,YAAL,EAAtB,GAA4C,MAAKC,cAAL,EAAlD;AAAA,KAPU;;AAAA,qEASH,YAAM;AACrB,YAAKC,QAAL,CAAc;AAAEH,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACD,KAXmB;;AAAA,mEAaL,YAAM;AACnB,YAAKG,QAAL,CAAc;AAAEH,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACD,KAfmB;;AAElB,UAAKD,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE;AADC,KAAb;AAFkB;AAKnB;;;;6BAYS;AAAA,yBAC+B,KAAKhC,KADpC;AAAA,UACAoC,IADA,gBACAA,IADA;AAAA,UACMC,OADN,gBACMA,OADN;AAAA,UACeC,WADf,gBACeA,WADf;AAER,aACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SAAuBF,IAAvB,CADF,EAEE;AAAK,QAAA,SAAS,EAAC;AAAf,SACGC,OADH,EAEGC,WAAW,IACV,6BAAC,sBAAD;AACE,QAAA,SAAS,EAAC,uCADZ;AAEE,QAAA,OAAO,EAAE,KAAKC;AAFhB,SAIE;AAAG,QAAA,SAAS,EAAC;AAAb,QAJF,CAHJ,EAUE,6BAAC,sCAAD;AAAyB,QAAA,KAAK,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ,SAAhC;AAA0D,QAAA,KAAK,EAAE;AAACA,UAAAA,SAAS,EAAE;AAAZ;AAAjE,SACG,KAAKT,KAAL,CAAWC,QAAX,IACC;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,6BAAC,sBAAD;AACE,QAAA,SAAS,EAAC,qCADZ;AAEE,QAAA,OAAO,EAAE,KAAKC;AAFhB,SAIE;AAAG,QAAA,SAAS,EAAC;AAAb,QAJF,CADF,EAOGK,WAPH,CAFJ,CAVF,CAFF,CADF;AA6BD;;;;EAjDsBT,gB,GAoDzB;;;AAEA,IAAMY,eAAe,GAAG,SAAlBA,eAAkB,CAACV,KAAD,EAAQW,QAAR,EAAqB;AAC3C,SAAO;AACLhB,IAAAA,WAAW,EAAEK,KAAK,CAACY,GAAN,CAAUC,YAAV,CAAuBlB,WAD/B;AAELmB,IAAAA,GAAG,EAAEd,KAAK,CAACY,GAAN,CAAUE,GAFV;AAGL3C,IAAAA,UAAU,EAAE,yBAAc6B,KAAK,CAACY,GAAN,CAAUG,MAAxB,CAHP;AAIL3C,IAAAA,cAAc,EAAE,6BAAkB4B,KAAK,CAACY,GAAN,CAAUG,MAA5B;AAJX,GAAP;AAMD,CAPD;;eASe,yBAAQL,eAAR,EAAyB1C,WAAzB,C","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Button } from 'react-bootstrap'\nimport { VelocityTransitionGroup } from 'velocity-react'\nimport moment from 'moment'\n\nimport { calculateFares, calculatePhysicalActivity, getTimeZoneOffset } from '../../util/itinerary'\nimport { formatTime, getTimeFormat, getLongDateFormat } from '../../util/time'\n\nclass TripDetails extends Component {\n  render () {\n    const { itinerary, timeFormat, longDateFormat } = this.props\n    const date = moment(itinerary.startTime)\n\n    // process the transit fare\n    const { centsToString, dollarsToString, maxTNCFare, minTNCFare, transitFare } = calculateFares(itinerary)\n    let companies\n    itinerary.legs.forEach(leg => {\n      if (leg.tncData) {\n        companies = leg.tncData.company\n      }\n    })\n    let fare\n    if (transitFare || minTNCFare) {\n      fare = (\n        <span>\n          {transitFare && (\n            <span>Transit Fare: <b>{centsToString(transitFare)}</b></span>\n          )}\n          {minTNCFare !== 0 && (\n            <span>\n              <br />\n              <span style={{ textTransform: 'capitalize' }}>\n                {companies.toLowerCase()}\n              </span>{' '}\n              Fare: <b>{dollarsToString(minTNCFare)} - {dollarsToString(maxTNCFare)}</b>\n            </span>\n          )}\n        </span>\n      )\n    }\n\n    // Compute calories burned.\n    const { bikeDuration, caloriesBurned, walkDuration } = calculatePhysicalActivity(itinerary)\n\n    const timeOptions = {\n      format: timeFormat,\n      offset: getTimeZoneOffset(itinerary)\n    }\n\n    return (\n      <div className='trip-details'>\n        <div className='trip-details-header'>Trip Details</div>\n        <div className='trip-details-body'>\n          <TripDetail\n            icon={<i className='fa fa-calendar' />}\n            summary={\n              <span>\n                <span>Depart <b>{date.format(longDateFormat)}</b></span>\n                {this.props.routingType === 'ITINERARY' && <span> at <b>{formatTime(itinerary.startTime, timeOptions)}</b></span>}\n              </span>\n            }\n          />\n          {fare && (\n            <TripDetail\n              icon={<i className='fa fa-money' />}\n              summary={fare}\n            />\n          )}\n          {caloriesBurned > 0 && (\n            <TripDetail\n              icon={<i className='fa fa-heartbeat' />}\n              summary={<span>Calories Burned: <b>{Math.round(caloriesBurned)}</b></span>}\n              description={\n                <span>\n                  Calories burned is based on <b>{Math.round(walkDuration / 60)} minute(s)</b>{' '}\n                  spent walking and <b>{Math.round(bikeDuration / 60)} minute(s)</b>{' '}\n                  spent biking during this trip. Adapted from{' '}\n                  <a\n                    href='https://health.gov/dietaryguidelines/dga2005/document/html/chapter3.htm#table4'\n                    target='_blank'>\n                    Dietary Guidelines for Americans 2005, page 16, Table 4\n                  </a>.\n                </span>\n              }\n            />\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass TripDetail extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      expanded: false\n    }\n  }\n\n  _toggle = () => this.state.expanded ? this._onHideClick() : this._onExpandClick()\n\n  _onExpandClick = () => {\n    this.setState({ expanded: true })\n  }\n\n  _onHideClick = () => {\n    this.setState({ expanded: false })\n  }\n\n  render () {\n    const { icon, summary, description } = this.props\n    return (\n      <div className='trip-detail'>\n        <div className='icon'>{icon}</div>\n        <div className='summary'>\n          {summary}\n          {description && (\n            <Button\n              className='expand-button clear-button-formatting'\n              onClick={this._toggle}\n            >\n              <i className='fa fa-question-circle' />\n            </Button>\n          )}\n          <VelocityTransitionGroup enter={{animation: 'slideDown'}} leave={{animation: 'slideUp'}}>\n            {this.state.expanded && (\n              <div className='description'>\n                <Button\n                  className='hide-button clear-button-formatting'\n                  onClick={this._onHideClick}\n                >\n                  <i className='fa fa-close' />\n                </Button>\n                {description}\n              </div>\n            )}\n          </VelocityTransitionGroup>\n        </div>\n      </div>\n    )\n  }\n}\n\n// Connect main class to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    routingType: state.otp.currentQuery.routingType,\n    tnc: state.otp.tnc,\n    timeFormat: getTimeFormat(state.otp.config),\n    longDateFormat: getLongDateFormat(state.otp.config)\n  }\n}\n\nexport default connect(mapStateToProps)(TripDetails)\n"]}