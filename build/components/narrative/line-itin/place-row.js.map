{"version":3,"sources":["place-row.js"],"names":["defaultRouteColor","PlaceRow","leg","mode","backgroundColor","routeColor","props","config","customIcons","legIndex","place","time","timeOptions","followsTransit","stackIcon","name","color","size","fontSize","icon","interline","interlineWithPreviousLeg","rowKey","_createLegLine","companies","stopId","split","rentedVehicle","rentedBike","rentedCar","transitLeg","setActiveLeg","routingType","Component","mapStateToProps","state","ownProps","otp","mapDispatchToProps","RentedVehicleLeg","configCompanies","from","rentalDescription","vehicleName","modeString","networks","companiesLabel","PureComponent"],"mappings":"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","sourcesContent":["import React, { Component, PureComponent } from 'react'\nimport { connect } from 'react-redux'\n\nimport LocationIcon from '../../icons/location-icon'\nimport ViewStopButton from '../../viewers/view-stop-button'\nimport {\n  getCompaniesLabelFromNetworks,\n  getModeForPlace,\n  getPlaceName\n} from '../../../util/itinerary'\nimport { formatTime } from '../../../util/time'\n\nimport TransitLegBody from './transit-leg-body'\nimport AccessLegBody from './access-leg-body'\n\n// TODO: make this a prop\nconst defaultRouteColor = '#008'\n\nclass PlaceRow extends Component {\n  _createLegLine (leg) {\n    switch (leg.mode) {\n      case 'WALK': return <div className='leg-line leg-line-walk' />\n      case 'BICYCLE':\n      case 'BICYCLE_RENT':\n        return <div className='leg-line leg-line-bicycle' />\n      case 'CAR': return <div className='leg-line leg-line-car' />\n      case 'MICROMOBILITY':\n      case 'MICROMOBILITY_RENT':\n        return <div className='leg-line leg-line-micromobility' />\n      default:\n        return <div className='leg-line leg-line-transit' style={{\n          backgroundColor: leg.routeColor ? '#' + leg.routeColor : defaultRouteColor\n        }} />\n    }\n  }\n\n  /* eslint-disable complexity */\n  render () {\n    const { config, customIcons, leg, legIndex, place, time, timeOptions, followsTransit } = this.props\n    const stackIcon = (name, color, size) => <i className={`fa fa-${name} fa-stack-1x`} style={{ color, fontSize: size + 'px' }} />\n    let icon\n    if (!leg) { // This is the itinerary destination\n      icon = (\n        <span className='fa-stack place-icon-group'>\n          {stackIcon('circle', 'white', 26)}\n          <LocationIcon type='to' className='fa-stack-1x' style={{ fontSize: 20 }} />\n        </span>\n      )\n    } else if (legIndex === 0) { // The is the origin\n      icon = (\n        <span className='fa-stack place-icon-group'>\n          {stackIcon('circle', 'white', 26)}\n          <LocationIcon type='from' className='fa-stack-1x' style={{ fontSize: 20 }} />\n        </span>\n      )\n    } else { // This is an intermediate place\n      icon = (\n        <span className='fa-stack place-icon-group'>\n          {stackIcon('circle', 'white', 22)}\n          {stackIcon('circle-o', 'black', 22)}\n        </span>\n      )\n    }\n    // NOTE: Previously there was a check for itineraries that changed vehicles\n    // at a single stop, which would render the stop place the same as the\n    // interline stop. However, this prevents the user from being able to click\n    // on the stop viewer in this case, which they may want to do in order to\n    // check the real-time arrival information for the next leg of their journey.\n    const interline = leg && leg.interlineWithPreviousLeg\n    return (\n      <div className='place-row' key={this.rowKey++}>\n        <div className='time'>\n          {time && formatTime(time, timeOptions)}\n        </div>\n        <div className='line-container'>\n          {leg && this._createLegLine(leg) }\n          <div>{!interline && icon}</div>\n        </div>\n        <div className='place-details'>\n          {/* Dot separating interlined segments, if applicable */}\n          {interline && <div className='interline-dot'>&bull;</div>}\n\n          {/* The place name */}\n          <div className='place-name'>\n            {interline\n              ? <div className='interline-name'>Stay on Board at <b>{place.name}</b></div>\n              : <div>{getPlaceName(place, config.companies)}</div>\n            }\n          </div>\n\n          {/* Place subheading: Transit stop */}\n          {place.stopId && !interline && (\n            <div className='place-subheader'>\n              <span>Stop ID {place.stopId.split(':')[1]}</span>\n              <ViewStopButton stopId={place.stopId} />\n            </div>\n          )}\n\n          {/* Place subheading: rented vehicle (e.g., scooter, bike, car) pickup */}\n          {leg && (leg.rentedVehicle || leg.rentedBike || leg.rentedCar) && (\n            <RentedVehicleLeg config={config} leg={leg} />\n          )}\n\n          {/* Show the leg, if present */}\n          {leg && (\n            leg.transitLeg\n              ? (/* This is a transit leg */\n                <TransitLegBody\n                  leg={leg}\n                  legIndex={legIndex}\n                  setActiveLeg={this.props.setActiveLeg}\n                  customIcons={customIcons}\n                />\n              )\n              : (/* This is an access (e.g. walk/bike/etc.) leg */\n                <AccessLegBody\n                  config={config}\n                  customIcons={customIcons}\n                  followsTransit={followsTransit}\n                  leg={leg}\n                  legIndex={legIndex}\n                  routingType={this.props.routingType}\n                  setActiveLeg={this.props.setActiveLeg}\n                  timeOptions={timeOptions}\n                />\n              )\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    // Pass config in order to give access to companies definition (used to\n    // determine proper place names for rental vehicles).\n    config: state.otp.config\n  }\n}\n\nconst mapDispatchToProps = { }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaceRow)\n\n/**\n * A component to display vehicle rental data. The word \"Vehicle\" has been used\n * because a future refactor is intended to combine car rental, bike rental\n * and micromobility rental all within this component. The future refactor is\n * assuming that the leg.rentedCar and leg.rentedBike response elements from OTP\n * will eventually be merged into the leg.rentedVehicle element.\n */\nclass RentedVehicleLeg extends PureComponent {\n  render () {\n    const { config, leg } = this.props\n    const configCompanies = config.companies || []\n\n    // Sometimes rented vehicles can be walked over things like stairs or other\n    // ways that forbid the main mode of travel.\n    if (leg.mode === 'WALK') {\n      return (\n        <div className='place-subheader'>\n          Walk vehicle along {leg.from.name}\n        </div>\n      )\n    }\n\n    let rentalDescription = 'Pick up'\n    if (leg.rentedBike) {\n      // TODO: Special case for TriMet may need to be refactored.\n      rentalDescription += ` shared bike`\n    } else {\n      // Add company and vehicle labels.\n      let vehicleName = ''\n      // TODO allow more flexibility in customizing these mode strings\n      let modeString = leg.rentedVehicle\n        ? 'E-scooter'\n        : leg.rentedBike\n          ? 'bike'\n          : 'car'\n\n      // The networks attribute of the from data will only appear at the very\n      // beginning of the rental. It is possible that there will be some forced\n      // walking that occurs in the middle of the rental, so once the main mode\n      // resumes there won't be any network info. In that case we simply return\n      // that the rental is continuing.\n      if (leg.from.networks) {\n        const companiesLabel = getCompaniesLabelFromNetworks(\n          leg.from.networks,\n          configCompanies\n        )\n        rentalDescription += ` ${companiesLabel}`\n        // Only show vehicle name for car rentals. For bikes and E-scooters, these\n        // IDs/names tend to be less relevant (or entirely useless) in this context.\n        if (leg.rentedCar && leg.from.name) {\n          vehicleName = leg.from.name\n        }\n        modeString = getModeForPlace(leg.from)\n      } else {\n        rentalDescription = 'Continue using rental'\n      }\n\n      rentalDescription += ` ${modeString} ${vehicleName}`\n    }\n    // e.g., Pick up REACHNOW rented car XYZNDB OR\n    //       Pick up SPIN E-scooter\n    //       Pick up shared bike\n    return (\n      <div className='place-subheader'>\n        {rentalDescription}\n      </div>\n    )\n  }\n}\n"]}