{"version":3,"sources":["itin-body.js"],"names":["ItineraryBody","props","rowKey","nextProps","nextState","companies","itinerary","setActiveLeg","timeOptions","rows","followsTransit","legs","forEach","leg","i","push","from","startTime","length","to","endTime","transitLeg","Component","PropTypes","string","object","routingType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,a;;;;;AAOnB,yBAAaC,KAAb,EAAoB;AAAA;;AAAA;;AAClB,uFAAMA,KAAN;AACA,UAAKC,MAAL,GAAc,CAAd;AAFkB;AAGnB;;;;0CAEsBC,S,EAAWC,S,EAAW;AAC3C,aAAO,CAAC,qBAAQ,KAAKH,KAAL,CAAWI,SAAnB,EAA8BF,SAAS,CAACE,SAAxC,CAAD,IACL,CAAC,qBAAQ,KAAKJ,KAAL,CAAWK,SAAnB,EAA8BH,SAAS,CAACG,SAAxC,CADH;AAED;;;6BAES;AAAA;;AAAA,wBACyC,KAAKL,KAD9C;AAAA,UACAK,SADA,eACAA,SADA;AAAA,UACWC,YADX,eACWA,YADX;AAAA,UACyBC,WADzB,eACyBA,WADzB;AAGR,UAAMC,IAAI,GAAG,EAAb;AACA,UAAIC,cAAc,GAAG,KAArB;AACAJ,MAAAA,SAAS,CAACK,IAAV,CAAeC,OAAf,CAAuB,UAACC,GAAD,EAAMC,CAAN,EAAY;AACjC;AACAL,QAAAA,IAAI,CAACM,IAAL,CACE,6BAAC,iBAAD;AAAU,UAAA,GAAG,EAAED,CAAf;AACE,UAAA,KAAK,EAAED,GAAG,CAACG,IADb;AAEE,UAAA,IAAI,EAAEH,GAAG,CAACI,SAFZ;AAGE,UAAA,GAAG,EAAEJ,GAHP;AAIE,UAAA,QAAQ,EAAEC,CAJZ;AAKE,UAAA,cAAc,EAAEJ;AALlB,WAMM,MAAI,CAACT,KANX,EADF,EAFiC,CAYjC;;AACA,YAAIa,CAAC,KAAKR,SAAS,CAACK,IAAV,CAAeO,MAAf,GAAwB,CAAlC,EAAqC;AACnCT,UAAAA,IAAI,CAACM,IAAL,CACE,6BAAC,iBAAD;AACE,YAAA,KAAK,EAAEF,GAAG,CAACM,EADb;AAEE,YAAA,IAAI,EAAEN,GAAG,CAACO,OAFZ;AAGE,YAAA,WAAW,EAAEZ,WAHf;AAIE,YAAA,YAAY,EAAED,YAJhB;AAKE,YAAA,GAAG,EAAEO,CAAC,GAAG;AALX,YADF;AAOD;;AACD,YAAID,GAAG,CAACQ,UAAR,EAAoBX,cAAc,GAAG,IAAjB;AACrB,OAvBD;AAyBA,aACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACGD,IADH,EAEE,6BAAC,oBAAD;AAAa,QAAA,SAAS,EAAEH;AAAxB,QAFF,EAGE,6BAAC,kBAAD;AAAW,QAAA,SAAS,EAAEA;AAAtB,QAHF,CADF;AAOD;;;;EAtDwCgB,gB;;;;gBAAtBtB,a,eACA;AACjBK,EAAAA,SAAS,EAAEkB,mBAAUC,MADJ;AAEjBlB,EAAAA,SAAS,EAAEiB,mBAAUE,MAFJ;AAGjBC,EAAAA,WAAW,EAAEH,mBAAUC;AAHN,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport isEqual from 'lodash.isequal'\n\nimport TripDetails from '../trip-details'\nimport TripTools from '../trip-tools'\n\nimport PlaceRow from './place-row'\n\nexport default class ItineraryBody extends Component {\n  static propTypes = {\n    companies: PropTypes.string,\n    itinerary: PropTypes.object,\n    routingType: PropTypes.string\n  }\n\n  constructor (props) {\n    super(props)\n    this.rowKey = 0\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    return !isEqual(this.props.companies, nextProps.companies) ||\n      !isEqual(this.props.itinerary, nextProps.itinerary)\n  }\n\n  render () {\n    const { itinerary, setActiveLeg, timeOptions } = this.props\n\n    const rows = []\n    let followsTransit = false\n    itinerary.legs.forEach((leg, i) => {\n      // Create a row containing this leg's start place and leg traversal details\n      rows.push(\n        <PlaceRow key={i}\n          place={leg.from}\n          time={leg.startTime}\n          leg={leg}\n          legIndex={i}\n          followsTransit={followsTransit}\n          {...this.props}\n        />\n      )\n      // If this is the last leg, create a special PlaceRow for the destination only\n      if (i === itinerary.legs.length - 1) {\n        rows.push(\n          <PlaceRow\n            place={leg.to}\n            time={leg.endTime}\n            timeOptions={timeOptions}\n            setActiveLeg={setActiveLeg}\n            key={i + 1} />)\n      }\n      if (leg.transitLeg) followsTransit = true\n    })\n\n    return (\n      <div className='itin-body'>\n        {rows}\n        <TripDetails itinerary={itinerary} />\n        <TripTools itinerary={itinerary} />\n      </div>\n    )\n  }\n}\n"]}