{"version":3,"sources":["itin-summary.js"],"names":["defaultRouteColor","ItinerarySummary","props","onClick","customIcons","itinerary","timeOptions","centsToString","maxTNCFare","minTNCFare","transitFare","minTotalFare","maxTotalFare","caloriesBurned","_onSummaryClicked","duration","startTime","endTime","Math","round","transfers","legs","filter","leg","mode","transitTime","map","k","backgroundColor","getRouteColorForBadge","getRouteNameForBadge","height","overflow","Component","PropTypes","object","getRouteLongName","routes","length","longName","routeLongName","shortName","routeShortName","toLowerCase","startsWith","split","trim","routeColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { calculateFares, calculatePhysicalActivity, getLegIcon, isTransit } from '../../../util/itinerary'\nimport { formatDuration, formatTime } from '../../../util/time'\n\n// TODO: make this a prop\nconst defaultRouteColor = '#008'\n\nexport default class ItinerarySummary extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object\n  }\n\n  _onSummaryClicked = () => {\n    if (typeof this.props.onClick === 'function') this.props.onClick()\n  }\n\n  render () {\n    const { customIcons, itinerary, timeOptions } = this.props\n    const {\n      centsToString,\n      maxTNCFare,\n      minTNCFare,\n      transitFare\n    } = calculateFares(itinerary)\n    // TODO: support non-USD\n    const minTotalFare = minTNCFare * 100 + transitFare\n    const maxTotalFare = maxTNCFare * 100 + transitFare\n\n    const { caloriesBurned } = calculatePhysicalActivity(itinerary)\n\n    return (\n      <div className='itin-summary' onClick={this._onSummaryClicked}>\n        <div className='details'>\n          {/* Travel time in hrs/mins */}\n          <div className='header'>{formatDuration(itinerary.duration)}</div>\n\n          {/* Duration as time range */}\n          <div className='detail'>\n            {formatTime(itinerary.startTime, timeOptions)} - {formatTime(itinerary.endTime, timeOptions)}\n          </div>\n\n          {/* Fare / Calories */}\n          <div className='detail'>\n            {minTotalFare > 0 && <span>\n              {centsToString(minTotalFare)}\n              {minTotalFare !== maxTotalFare && <span> - {centsToString(maxTotalFare)}</span>}\n              <span> &bull; </span>\n            </span>}\n            {Math.round(caloriesBurned)} Cals\n          </div>\n\n          {/* Number of transfers, if applicable */}\n          {itinerary.transfers > 0 && (\n            <div className='detail'>\n              {itinerary.transfers} transfer{itinerary.transfers > 1 ? 's' : ''}\n            </div>\n          )}\n\n        </div>\n        <div className='routes'>\n          {itinerary.legs.filter(leg => {\n            return !(leg.mode === 'WALK' && itinerary.transitTime > 0)\n          }).map((leg, k) => {\n            return <div className='route-preview' key={k}>\n              <div className='mode-icon'>{getLegIcon(leg, customIcons)}</div>\n              {isTransit(leg.mode)\n                ? (\n                  <div className='short-name' style={{ backgroundColor: getRouteColorForBadge(leg) }}>\n                    {getRouteNameForBadge(leg)}\n                  </div>\n                )\n                : (<div style={{ height: 30, overflow: 'hidden' }} />)\n              }\n            </div>\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\n// Helper functions\n\nfunction getRouteLongName (leg) {\n  return leg.routes && leg.routes.length > 0\n    ? leg.routes[0].longName\n    : leg.routeLongName\n}\n\nfunction getRouteNameForBadge (leg) {\n  const shortName = leg.routes && leg.routes.length > 0\n    ? leg.routes[0].shortName : leg.routeShortName\n\n  const longName = getRouteLongName(leg)\n\n  // check for max\n  if (longName && longName.toLowerCase().startsWith('max')) return null\n\n  // check for streetcar\n  if (longName && longName.startsWith('Portland Streetcar')) return longName.split('-')[1].trim().split(' ')[0]\n\n  return shortName || longName\n}\n\nfunction getRouteColorForBadge (leg) {\n  return leg.routeColor ? '#' + leg.routeColor : defaultRouteColor\n}\n"]}