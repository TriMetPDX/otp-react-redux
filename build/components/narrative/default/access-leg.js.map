{"version":3,"sources":["access-leg.js"],"names":["AccessLeg","e","props","active","leg","index","setActiveLeg","step","activeStep","setActiveStep","_onLegClick","mode","duration","distance","steps","map","stepIndex","stepIsActive","_onStepClick","Component","PropTypes","number","object","func"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;IAGqBA,S;;;;;;;;;;;;;;;;;;kEAQL,UAACC,CAAD,EAAO;AAAA,wBACwB,MAAKC,KAD7B;AAAA,UACZC,MADY,eACZA,MADY;AAAA,UACJC,GADI,eACJA,GADI;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,YADR,eACQA,YADR;;AAEnB,UAAIH,MAAJ,EAAY;AACVG,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,OAFD,MAEO;AACLA,QAAAA,YAAY,CAACD,KAAD,EAAQD,GAAR,CAAZ;AACD;AACF,K;;;;;;;iCAEaH,C,EAAGM,I,EAAMF,K,EAAO;AAC5B,UAAIA,KAAK,KAAK,KAAKH,KAAL,CAAWM,UAAzB,EAAqC;AACnC,aAAKN,KAAL,CAAWO,aAAX,CAAyB,IAAzB;AACD,OAFD,MAEO;AACL,aAAKP,KAAL,CAAWO,aAAX,CAAyBJ,KAAzB,EAAgCE,IAAhC;AACD;AACF;;;6BAES;AAAA;;AAAA,yBACmC,KAAKL,KADxC;AAAA,UACAC,MADA,gBACAA,MADA;AAAA,UACQK,UADR,gBACQA,UADR;AAAA,UACoBH,KADpB,gBACoBA,KADpB;AAAA,UAC2BD,GAD3B,gBAC2BA,GAD3B;AAER,aACE;AACE,QAAA,GAAG,EAAEC,KADP;AAEE,QAAA,SAAS,eAAQF,MAAM,GAAG,SAAH,GAAe,EAA7B;AAFX,SAGE;AACE,QAAA,SAAS,EAAC,QADZ;AAEE,QAAA,OAAO,EAAE,KAAKO;AAFhB,SAGE,2CAAM,6BAAC,aAAD;AAAM,QAAA,IAAI,kBAAWP,MAAM,GAAG,MAAH,GAAY,OAA7B;AAAV,QAAN,CAHF,EAIE,2CAAM,wCAAIC,GAAG,CAACO,IAAR,CAAN,CAJF,EAKG,GALH,EAME;AAAM,QAAA,SAAS,EAAC;AAAhB,SAAgC,0BAAeP,GAAG,CAACQ,QAAnB,CAAhC,CANF,EAOG,GAPH,EAQE;AAAM,QAAA,SAAS,EAAC;AAAhB,cAAiC,8BAAeR,GAAG,CAACS,QAAnB,CAAjC,MARF,CAHF,EAaGV,MAAM,IACL;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACGC,GAAG,CAACU,KAAJ,CAAUC,GAAV,CAAc,UAACR,IAAD,EAAOS,SAAP,EAAqB;AAClC,YAAMC,YAAY,GAAGT,UAAU,KAAKQ,SAApC;AACA,eACE;AACE,UAAA,GAAG,EAAEA,SADP;AAEE,UAAA,SAAS,iBAAUC,YAAY,GAAG,QAAH,GAAc,EAApC,CAFX;AAGE,UAAA,OAAO,EAAE,iBAAChB,CAAD;AAAA,mBAAO,MAAI,CAACiB,YAAL,CAAkBjB,CAAlB,EAAqBM,IAArB,EAA2BS,SAA3B,CAAP;AAAA;AAHX,WAIE;AAAM,UAAA,SAAS,EAAC;AAAhB,WAAiC,8BAAeT,IAAI,CAACM,QAApB,CAAjC,CAJF,EAKE;AAAM,UAAA,SAAS,EAAC;AAAhB,WAA6B,oCAAoBN,IAApB,CAA7B,CALF,CADF;AASD,OAXA,CADH,CADF,CAdJ,EA+BE,6BAAC,0BAAD;AAAmB,QAAA,GAAG,EAAEH;AAAxB,QA/BF,CADF;AAmCD;;;;EA9DoCe,gB;;;;gBAAlBnB,S,eACA;AACjBQ,EAAAA,UAAU,EAAEY,iBAAUC,MADL;AAEjBjB,EAAAA,GAAG,EAAEgB,iBAAUE,MAFE;AAGjBhB,EAAAA,YAAY,EAAEc,iBAAUG,IAHP;AAIjBd,EAAAA,aAAa,EAAEW,iBAAUG;AAJR,C","sourcesContent":["import React, {PropTypes, Component} from 'react'\n\nimport Icon from '../icon'\n\nimport LegDiagramPreview from '../leg-diagram-preview'\nimport { distanceString } from '../../../util/distance'\nimport { getStepInstructions } from '../../../util/itinerary'\nimport { formatDuration } from '../../../util/time'\n\n/**\n * Default access leg component for narrative itinerary.\n */\nexport default class AccessLeg extends Component {\n  static propTypes = {\n    activeStep: PropTypes.number,\n    leg: PropTypes.object,\n    setActiveLeg: PropTypes.func,\n    setActiveStep: PropTypes.func\n  }\n\n  _onLegClick = (e) => {\n    const {active, leg, index, setActiveLeg} = this.props\n    if (active) {\n      setActiveLeg(null)\n    } else {\n      setActiveLeg(index, leg)\n    }\n  }\n\n  _onStepClick (e, step, index) {\n    if (index === this.props.activeStep) {\n      this.props.setActiveStep(null)\n    } else {\n      this.props.setActiveStep(index, step)\n    }\n  }\n\n  render () {\n    const { active, activeStep, index, leg } = this.props\n    return (\n      <div\n        key={index}\n        className={`leg${active ? ' active' : ''} access-leg`}>\n        <button\n          className='header'\n          onClick={this._onLegClick}>\n          <span><Icon type={`caret-${active ? 'down' : 'right'}`} /></span>\n          <span><b>{leg.mode}</b></span>\n          {' '}\n          <span className='leg-duration'>{formatDuration(leg.duration)}</span>\n          {' '}\n          <span className='leg-distance'>({distanceString(leg.distance)})</span>\n        </button>\n        {active &&\n          <div className='step-by-step'>\n            <div className='access-leg'>\n              {leg.steps.map((step, stepIndex) => {\n                const stepIsActive = activeStep === stepIndex\n                return (\n                  <button\n                    key={stepIndex}\n                    className={`step ${stepIsActive ? 'active' : ''}`}\n                    onClick={(e) => this._onStepClick(e, step, stepIndex)}>\n                    <span className='step-distance'>{distanceString(step.distance)}</span>\n                    <span className='step-text'>{getStepInstructions(step)}</span>\n                  </button>\n                )\n              })}\n            </div>\n          </div>\n        }\n        <LegDiagramPreview leg={leg} />\n      </div>\n    )\n  }\n}\n"]}