{"version":3,"sources":["itinerary-summary.js"],"names":["ItinerarySummary","itinerary","props","blocks","legs","forEach","leg","i","length","transitLeg","push","mode","routeShortName","routeLongName","Component","PropTypes","object"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,gB;;;;;;;;;;;;;6BAKT;AAAA,UACAC,SADA,GACc,KAAKC,KADnB,CACAD,SADA;AAGR,UAAME,MAAM,GAAG,EAAf;AACAF,MAAAA,SAAS,CAACG,IAAV,CAAeC,OAAf,CAAuB,UAACC,GAAD,EAAMC,CAAN,EAAY;AACjC;AACA,YACEA,CAAC,GAAG,CAAJ,IACAA,CAAC,GAAGN,SAAS,CAACG,IAAV,CAAeI,MAAf,GAAwB,CAD5B,IAEA,CAACF,GAAG,CAACG,UAFL,IAGAR,SAAS,CAACG,IAAV,CAAeG,CAAC,GAAG,CAAnB,EAAsBE,UAHtB,IAIAR,SAAS,CAACG,IAAV,CAAeG,CAAC,GAAG,CAAnB,EAAsBE,UALxB,EAKoC;AAClC,iBAAO,IAAP;AACD,SATgC,CAWjC;;;AACAN,QAAAA,MAAM,CAACO,IAAP,CACE;AAAK,UAAA,GAAG,EAAEP,MAAM,CAACK,MAAjB;AAAyB,UAAA,SAAS,EAAC;AAAnC,WACE,6BAAC,iBAAD;AAAU,UAAA,IAAI,EAAEF,GAAG,CAACK;AAApB,UADF,CADF,EAZiC,CAkBjC;;AACA,YAAIL,GAAG,CAACG,UAAR,EAAoB;AAClBN,UAAAA,MAAM,CAACO,IAAP,CACE;AAAK,YAAA,GAAG,EAAEP,MAAM,CAACK,MAAjB;AAAyB,YAAA,SAAS,EAAC;AAAnC,aACE;AAAM,YAAA,SAAS,EAAC;AAAhB,aACGF,GAAG,CAACM,cAAJ,IAAsBN,GAAG,CAACO,aAD7B,CADF,CADF;AAOD,SA3BgC,CA6BjC;;;AACA,YAAIN,CAAC,GAAGN,SAAS,CAACG,IAAV,CAAeI,MAAf,GAAwB,CAAhC,EAAmC;AACjCL,UAAAA,MAAM,CAACO,IAAP,CACE;AAAK,YAAA,GAAG,EAAEP,MAAM,CAACK,MAAjB;AAAyB,YAAA,SAAS,EAAC;AAAnC,sBADF;AAGD;AACF,OAnCD;AAqCA,aAAO;AAAK,QAAA,SAAS,EAAC;AAAf,SAA0BL,MAA1B,CAAP;AACD;;;;EA/C2CW,gB;;;;gBAAzBd,gB,eACA;AACjBC,EAAAA,SAAS,EAAEc,mBAAUC;AADJ,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport ModeIcon from '../../icons/mode-icon'\n\nexport default class ItinerarySummary extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object\n  }\n\n  render () {\n    const { itinerary } = this.props\n\n    const blocks = []\n    itinerary.legs.forEach((leg, i) => {\n      // Skip mid-itinerary walk transfer legs\n      if (\n        i > 0 &&\n        i < itinerary.legs.length - 1 &&\n        !leg.transitLeg &&\n        itinerary.legs[i - 1].transitLeg &&\n        itinerary.legs[i + 1].transitLeg) {\n        return null\n      }\n\n      // Add the mode icon\n      blocks.push(\n        <div key={blocks.length} className='summary-block mode-block'>\n          <ModeIcon mode={leg.mode} />\n        </div>\n      )\n\n      // If a transit leg, add the name (preferably short; long if needed)\n      if (leg.transitLeg) {\n        blocks.push(\n          <div key={blocks.length} className='summary-block name-block'>\n            <span className='route-short-name'>\n              {leg.routeShortName || leg.routeLongName}\n            </span>\n          </div>\n        )\n      }\n\n      // If not the last leg, add a '►'\n      if (i < itinerary.legs.length - 1) {\n        blocks.push(\n          <div key={blocks.length} className='summary-block arrow-block'>►</div>\n        )\n      }\n    })\n\n    return <div className='summary'>{blocks}</div>\n  }\n}\n"]}