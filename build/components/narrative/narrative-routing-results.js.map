{"version":3,"sources":["narrative-routing-results.js"],"names":["NarrativeRoutingResults","prevProps","itineraries","length","props","setMainPanelContent","error","customIcons","itineraryClass","itineraryFooter","pending","routingType","mainPanelContent","Component","PropTypes","object","func","string","mapStateToProps","state","ownProps","activeSearch","otp","ui","response","query","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,uB;;;;;;;;;;;;;uCAOgBC,S,EAAW;AAC7B,UAAI,CAAC,CAACA,SAAS,CAACC,WAAX,IAA0BD,SAAS,CAACC,WAAV,CAAsBC,MAAtB,KAAiC,CAA5D,KACC,KAAKC,KAAL,CAAWF,WAAX,IAA0B,KAAKE,KAAL,CAAWF,WAAX,CAAuBC,MAAvB,GAAgC,CAD/D,EACmE;AACjE,aAAKC,KAAL,CAAWC,mBAAX,CAA+B,IAA/B;AACD;;AACD,UAAI,CAACJ,SAAS,CAACK,KAAX,IAAoB,KAAKF,KAAL,CAAWE,KAAnC,EAA0C,KAAKF,KAAL,CAAWC,mBAAX,CAA+B,IAA/B;AAC3C;;;6BAES;AAAA,wBAC6G,KAAKD,KADlH;AAAA,UACAG,WADA,eACAA,WADA;AAAA,UACaD,KADb,eACaA,KADb;AAAA,UACoBE,cADpB,eACoBA,cADpB;AAAA,UACoCC,eADpC,eACoCA,eADpC;AAAA,UACqDC,OADrD,eACqDA,OADrD;AAAA,UAC8DC,WAD9D,eAC8DA,WAD9D;AAAA,UAC2ET,WAD3E,eAC2EA,WAD3E;AAAA,UACwFU,gBADxF,eACwFA,gBADxF;AAER,UAAIF,OAAJ,EAAa,OAAO,6BAAC,gBAAD,OAAP;AACb,UAAIJ,KAAJ,EAAW,OAAO,6BAAC,qBAAD,OAAP;AACX,UAAIM,gBAAJ,EAAsB,OAAO,IAAP;AAEtB,aACED,WAAW,KAAK,WAAhB,GACI,6BAAC,0BAAD;AAAmB,QAAA,cAAc,EAAEH,cAAnC;AAAmD,QAAA,eAAe,EAAEC,eAApE;AAAqF,QAAA,WAAW,EAAEP,WAAlG;AAA+G,QAAA,WAAW,EAAEK;AAA5H,QADJ,GAEI,6BAAC,gCAAD;AACA,QAAA,cAAc,EAAEC,cADhB;AAEA,QAAA,WAAW,EAAED;AAFb,QAHN;AAQD;;;;EA7BmCM,gB;;gBAAhCb,uB,eACe;AACjBO,EAAAA,WAAW,EAAEO,mBAAUC,MADN;AAEjBP,EAAAA,cAAc,EAAEM,mBAAUE,IAFT;AAGjBL,EAAAA,WAAW,EAAEG,mBAAUG;AAHN,C;;AA+BrB,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,MAAMC,YAAY,GAAG,4BAAgBF,KAAK,CAACG,GAAtB,CAArB;AACA,SAAO;AACLV,IAAAA,gBAAgB,EAAEO,KAAK,CAACG,GAAN,CAAUC,EAAV,CAAaX,gBAD1B;AAELN,IAAAA,KAAK,EAAEe,YAAY,IAAIA,YAAY,CAACG,QAA7B,IAAyCH,YAAY,CAACG,QAAb,CAAsBlB,KAFjE;AAGLJ,IAAAA,WAAW,EAAE,iCAAqBiB,KAAK,CAACG,GAA3B,CAHR;AAILZ,IAAAA,OAAO,EAAEW,YAAY,IAAIA,YAAY,CAACX,OAJjC;AAKLC,IAAAA,WAAW,EAAEU,YAAY,IAAIA,YAAY,CAACI,KAAb,CAAmBd;AAL3C,GAAP;AAOD,CATD;;AAWA,IAAMe,kBAAkB,GAAG;AACzBrB,EAAAA,mBAAmB,EAAnBA;AADyB,CAA3B;;eAIe,yBAAQa,eAAR,EAAyBQ,kBAAzB,EAA6C1B,uBAA7C,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport Loading from './loading'\nimport NarrativeProfileOptions from './narrative-profile-options'\nimport TabbedItineraries from './tabbed-itineraries'\nimport ErrorMessage from '../form/error-message'\n\nimport { getActiveSearch, getActiveItineraries } from '../../util/state'\nimport { setMainPanelContent } from '../../actions/ui'\n\nclass NarrativeRoutingResults extends Component {\n  static propTypes = {\n    customIcons: PropTypes.object,\n    itineraryClass: PropTypes.func,\n    routingType: PropTypes.string\n  }\n\n  componentDidUpdate (prevProps) {\n    if ((!prevProps.itineraries || prevProps.itineraries.length === 0) &&\n        (this.props.itineraries && this.props.itineraries.length > 0)) {\n      this.props.setMainPanelContent(null)\n    }\n    if (!prevProps.error && this.props.error) this.props.setMainPanelContent(null)\n  }\n\n  render () {\n    const { customIcons, error, itineraryClass, itineraryFooter, pending, routingType, itineraries, mainPanelContent } = this.props\n    if (pending) return <Loading />\n    if (error) return <ErrorMessage />\n    if (mainPanelContent) return null\n\n    return (\n      routingType === 'ITINERARY'\n        ? <TabbedItineraries itineraryClass={itineraryClass} itineraryFooter={itineraryFooter} itineraries={itineraries} customIcons={customIcons} />\n        : <NarrativeProfileOptions\n          itineraryClass={itineraryClass}\n          customIcons={customIcons}\n        />\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  return {\n    mainPanelContent: state.otp.ui.mainPanelContent,\n    error: activeSearch && activeSearch.response && activeSearch.response.error,\n    itineraries: getActiveItineraries(state.otp),\n    pending: activeSearch && activeSearch.pending,\n    routingType: activeSearch && activeSearch.query.routingType\n  }\n}\n\nconst mapDispatchToProps = {\n  setMainPanelContent\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NarrativeRoutingResults)\n"]}