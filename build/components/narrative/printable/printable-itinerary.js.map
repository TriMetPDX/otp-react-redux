{"version":3,"sources":["printable-itinerary.js"],"names":["PrintableItinerary","props","configCompanies","customIcons","itinerary","timeFormat","timeOptions","format","offset","legs","length","from","name","map","leg","k","transitLeg","interlineWithPreviousLeg","hailedCar","Component","PropTypes","object","TransitLeg","interlineFollows","routeShortName","routeLongName","to","endTime","startTime","AccessLeg","legModeLabel","rentedBike","rentedCar","companiesLabel","networks","rentedVehicle","distance","steps","step","TNCLeg","tncData","displayName","estimatedArrival","duration"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;IAUqBA,kB;;;;;;;;;;;;;6BAKT;AAAA,wBAMJ,KAAKC,KAND;AAAA,UAENC,eAFM,eAENA,eAFM;AAAA,UAGNC,WAHM,eAGNA,WAHM;AAAA,UAINC,SAJM,eAINA,SAJM;AAAA,UAKNC,UALM,eAKNA,UALM;AAQR,UAAMC,WAAW,GAAG;AAClBC,QAAAA,MAAM,EAAEF,UADU;AAElBG,QAAAA,MAAM,EAAE,kCAAkBJ,SAAlB;AAFU,OAApB;AAKA,aACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACGA,SAAS,CAACK,IAAV,CAAeC,MAAf,GAAwB,CAAxB,IACC;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,iDADF,YACqB,wCAAIN,SAAS,CAACK,IAAV,CAAe,CAAf,EAAkBE,IAAlB,CAAuBC,IAA3B,CADrB,CADF,CADF,CAFJ,EAUGR,SAAS,CAACK,IAAV,CAAeI,GAAf,CAAmB,UAACC,GAAD,EAAMC,CAAN;AAAA,eAAYD,GAAG,CAACE,UAAJ,GAC5B,6BAAC,UAAD;AACA,UAAA,GAAG,EAAED,CADL;AAEA,UAAA,WAAW,EAAEZ,WAFb;AAGA,UAAA,gBAAgB,EAAEY,CAAC,GAAGX,SAAS,CAACK,IAAV,CAAeC,MAAf,GAAwB,CAA5B,IAChBN,SAAS,CAACK,IAAV,CAAeM,CAAC,GAAG,CAAnB,EAAsBE,wBAJxB;AAMA,UAAA,GAAG,EAAEH,GANL;AAOA,UAAA,WAAW,EAAER;AAPb,UAD4B,GAS5BQ,GAAG,CAACI,SAAJ,GACE,6BAAC,MAAD;AACA,UAAA,WAAW,EAAEf,WADb;AAEA,UAAA,GAAG,EAAEW,GAFL;AAGA,UAAA,WAAW,EAAER;AAHb,UADF,GAKE,6BAAC,SAAD;AACA,UAAA,GAAG,EAAES,CADL;AAEA,UAAA,eAAe,EAAEb,eAFjB;AAGA,UAAA,WAAW,EAAEC,WAHb;AAIA,UAAA,GAAG,EAAEW,GAJL;AAKA,UAAA,WAAW,EAAER;AALb,UAdc;AAAA,OAAnB,CAVH,EAgCE,6BAAC,oBAAD;AAAa,QAAA,SAAS,EAAEF;AAAxB,QAhCF,CADF;AAoCD;;;;EAtD6Ce,gB;;;;gBAA3BnB,kB,eACA;AACjBI,EAAAA,SAAS,EAAEgB,mBAAUC;AADJ,C;;IAwDfC,U;;;;;;;;;;;;;6BAKM;AAAA,yBACoD,KAAKrB,KADzD;AAAA,UACAE,WADA,gBACAA,WADA;AAAA,UACaW,GADb,gBACaA,GADb;AAAA,UACkBS,gBADlB,gBACkBA,gBADlB;AAAA,UACoCjB,WADpC,gBACoCA,WADpC,EAGR;;AACA,UAAIQ,GAAG,CAACG,wBAAR,EAAkC;AAChC,eACE;AAAK,UAAA,SAAS,EAAC;AAAf,WACE;AAAK,UAAA,SAAS,EAAC;AAAf,WACE;AAAK,UAAA,SAAS,EAAC;AAAf,2BACe,GADf,EAEE,wCAAIH,GAAG,CAACU,cAAR,OAAyBV,GAAG,CAACW,aAA7B,CAFF,EAEkD,GAFlD,SAGK,wCAAIX,GAAG,CAACY,EAAJ,CAAOd,IAAX,CAHL,CADF,EAME;AAAK,UAAA,SAAS,EAAC;AAAf,WACE;AAAK,UAAA,SAAS,EAAC;AAAf,0BACa,wCAAIE,GAAG,CAACY,EAAJ,CAAOd,IAAX,CADb,EACkC,GADlC,SAEM,sBAAWE,GAAG,CAACa,OAAf,EAAwBrB,WAAxB,CAFN,CADF,CANF,CADF,CADF;AAiBD;;AAED,aACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SAA4B,2BAAWQ,GAAX,EAAgBX,WAAhB,CAA5B,CADF,EAEE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,wCAAIW,GAAG,CAACU,cAAR,OAAyBV,GAAG,CAACW,aAA7B,CADF,UACqD,wCAAIX,GAAG,CAACY,EAAJ,CAAOd,IAAX,CADrD,CADF,EAIE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,sBACW,wCAAIE,GAAG,CAACH,IAAJ,CAASC,IAAb,CADX,EACkC,GADlC,SAEM,sBAAWE,GAAG,CAACc,SAAf,EAA0BtB,WAA1B,CAFN,CADF,EAKE;AAAK,QAAA,SAAS,EAAC;AAAf,SACGiB,gBAAgB,GACb,gEAAuB,wCAAIT,GAAG,CAACY,EAAJ,CAAOd,IAAX,CAAvB,CADa,GAEb,0DACW,wCAAIE,GAAG,CAACY,EAAJ,CAAOd,IAAX,CADX,EACgC,GADhC,SAEI,sBAAWE,GAAG,CAACa,OAAf,EAAwBrB,WAAxB,CAFJ,CAHN,CALF,CAJF,CAFF,CADF;AAyBD;;;;EAtDsBa,gB;;gBAAnBG,U,eACe;AACjBR,EAAAA,GAAG,EAAEM,mBAAUC;AADE,C;;IAwDfQ,S;;;;;;;;;;;;;6BAKM;AAAA,yBACsC,KAAK5B,KAD3C;AAAA,UACAC,eADA,gBACAA,eADA;AAAA,UACiBC,WADjB,gBACiBA,WADjB;AAAA,UAC8BW,GAD9B,gBAC8BA,GAD9B,EAGR;;AACA,UAAIgB,YAAY,GAAG,gCAAgBhB,GAAhB,CAAnB;;AAEA,UAAIA,GAAG,CAACiB,UAAR,EAAoB;AAClB;AACA;AACAD,QAAAA,YAAY,GAAG,oBAAf;AACD,OAJD,MAIO,IAAIhB,GAAG,CAACkB,SAAR,EAAmB;AACxB;AACA;AACA,YAAMC,cAAc,GAAG,8CACrBnB,GAAG,CAACH,IAAJ,CAASuB,QADY,EAErBhC,eAFqB,CAAvB;AAIA4B,QAAAA,YAAY,mBAAYG,cAAZ,cAA8BnB,GAAG,CAACH,IAAJ,CAASC,IAAvC,CAAZ;AACD,OARM,MAQA,IAAIE,GAAG,CAACqB,aAAR,EAAuB;AAC5B,YAAMF,eAAc,GAAG,8CACrBnB,GAAG,CAACH,IAAJ,CAASuB,QADY,EAErBhC,eAFqB,CAAvB;;AAIA4B,QAAAA,YAAY,kBAAWG,eAAX,eAAZ;AACD;;AAED,aACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SAA4B,2BAAWnB,GAAX,EAAgBX,WAAhB,CAA5B,CADF,EAEE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,wCAAI2B,YAAJ,CADF,EACwB,GADxB,EAEG,CAAChB,GAAG,CAACI,SAAL,IACCJ,GAAG,CAACsB,QAAJ,GAAe,CADhB,IAEC,gDAAQ,8BAAetB,GAAG,CAACsB,QAAnB,CAAR,MAJJ,SAKK,wCAAI,6BAAatB,GAAG,CAACY,EAAjB,EAAqBxB,eAArB,CAAJ,CALL,CADF,EAQG,CAACY,GAAG,CAACI,SAAL,IACC;AAAK,QAAA,SAAS,EAAC;AAAf,SACGJ,GAAG,CAACuB,KAAJ,CAAUxB,GAAV,CAAc,UAACyB,IAAD,EAAOvB,CAAP,EAAa;AAC1B,eACE;AAAK,UAAA,GAAG,EAAEA,CAAV;AAAa,UAAA,SAAS,EAAC;AAAvB,WACG,iCAAiBuB,IAAjB,CADH,UAC8B,wCAAI,kCAAkBA,IAAlB,CAAJ,CAD9B,CADF;AAKD,OANA,CADH,CATJ,CAFF,CADF;AAyBD;;;;EAxDqBnB,gB;;gBAAlBU,S,eACe;AACjBf,EAAAA,GAAG,EAAEM,mBAAUC;AADE,C;;IA0DfkB,M;;;;;;;;;;;;;6BAKM;AAAA,yBACqB,KAAKtC,KAD1B;AAAA,UACAE,WADA,gBACAA,WADA;AAAA,UACaW,GADb,gBACaA,GADb;AAAA,UAEA0B,OAFA,GAEY1B,GAFZ,CAEA0B,OAFA;AAGR,UAAI,CAACA,OAAL,EAAc,OAAO,IAAP;AAEd,aACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SAA4B,2BAAW1B,GAAX,EAAgBX,WAAhB,CAA5B,CADF,EAEE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,iDAASqC,OAAO,CAACC,WAAjB,CADF,UACuC,wCAAI3B,GAAG,CAACY,EAAJ,CAAOd,IAAX,CADvC,CADF,EAIE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,4CACkC,GADlC,EAEE,wCAAI,0BAAe4B,OAAO,CAACE,gBAAvB,CAAJ,CAFF,CADF,EAKE;AAAK,QAAA,SAAS,EAAC;AAAf,mCACyB,GADzB,EAEE,wCAAI,0BAAe5B,GAAG,CAAC6B,QAAnB,CAAJ,CAFF,oCALF,CAJF,CAFF,CADF;AAoBD;;;;EA9BkBxB,gB;;gBAAfoB,M,eACe;AACjBzB,EAAAA,GAAG,EAAEM,mBAAUC;AADE,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport TripDetails from '../trip-details'\nimport { distanceString } from '../../../util/distance'\nimport { formatTime, formatDuration } from '../../../util/time'\nimport {\n  getCompaniesLabelFromNetworks,\n  getLegIcon,\n  getLegModeLabel,\n  getPlaceName,\n  getStepDirection,\n  getStepStreetName,\n  getTimeZoneOffset\n} from '../../../util/itinerary'\n\nexport default class PrintableItinerary extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object\n  }\n\n  render () {\n    const {\n      configCompanies,\n      customIcons,\n      itinerary,\n      timeFormat\n    } = this.props\n\n    const timeOptions = {\n      format: timeFormat,\n      offset: getTimeZoneOffset(itinerary)\n    }\n\n    return (\n      <div className='printable-itinerary'>\n        {itinerary.legs.length > 0 && (\n          <div className='leg collapse-top'>\n            <div className='leg-body'>\n              <div className='leg-header'>\n                <b>Depart</b> from <b>{itinerary.legs[0].from.name}</b>\n              </div>\n            </div>\n          </div>\n        )}\n        {itinerary.legs.map((leg, k) => leg.transitLeg\n          ? <TransitLeg\n            key={k}\n            customIcons={customIcons}\n            interlineFollows={k < itinerary.legs.length - 1 &&\n              itinerary.legs[k + 1].interlineWithPreviousLeg\n            }\n            leg={leg}\n            timeOptions={timeOptions} />\n          : leg.hailedCar\n            ? <TNCLeg\n              customIcons={customIcons}\n              leg={leg}\n              timeOptions={timeOptions} />\n            : <AccessLeg\n              key={k}\n              configCompanies={configCompanies}\n              customIcons={customIcons}\n              leg={leg}\n              timeOptions={timeOptions}\n            />\n        )}\n        <TripDetails itinerary={itinerary} />\n      </div>\n    )\n  }\n}\n\nclass TransitLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { customIcons, leg, interlineFollows, timeOptions } = this.props\n\n    // Handle case of transit leg interlined w/ previous\n    if (leg.interlineWithPreviousLeg) {\n      return (\n        <div className='leg collapse-top'>\n          <div className='leg-body'>\n            <div className='leg-header'>\n              Continues as{' '}\n              <b>{leg.routeShortName} {leg.routeLongName}</b>{' '}\n              to <b>{leg.to.name}</b>\n            </div>\n            <div className='leg-details'>\n              <div className='leg-detail'>\n                Get off at <b>{leg.to.name}</b>{' '}\n                at {formatTime(leg.endTime, timeOptions)}\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className='leg'>\n        <div className='mode-icon'>{getLegIcon(leg, customIcons)}</div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>{leg.routeShortName} {leg.routeLongName}</b> to <b>{leg.to.name}</b>\n          </div>\n          <div className='leg-details'>\n            <div className='leg-detail'>\n              Board at <b>{leg.from.name}</b>{' '}\n              at {formatTime(leg.startTime, timeOptions)}\n            </div>\n            <div className='leg-detail'>\n              {interlineFollows\n                ? <span>Stay on board at <b>{leg.to.name}</b></span>\n                : <span>\n                  Get off at <b>{leg.to.name}</b>{' '}\n                  at {formatTime(leg.endTime, timeOptions)}\n                </span>\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass AccessLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { configCompanies, customIcons, leg } = this.props\n\n    // calculate leg mode label in a special way for this component\n    let legModeLabel = getLegModeLabel(leg)\n\n    if (leg.rentedBike) {\n      // FIXME: Special case for TriMet that needs to be refactored to\n      // incorporate actual company.\n      legModeLabel = 'Ride BIKETOWN bike'\n    } else if (leg.rentedCar) {\n      // Add extra information to printview that would otherwise clutter up\n      // other places that use the getLegModeLabel function\n      const companiesLabel = getCompaniesLabelFromNetworks(\n        leg.from.networks,\n        configCompanies\n      )\n      legModeLabel = `Drive ${companiesLabel} ${leg.from.name}`\n    } else if (leg.rentedVehicle) {\n      const companiesLabel = getCompaniesLabelFromNetworks(\n        leg.from.networks,\n        configCompanies\n      )\n      legModeLabel = `Ride ${companiesLabel} E-scooter`\n    }\n\n    return (\n      <div className='leg'>\n        <div className='mode-icon'>{getLegIcon(leg, customIcons)}</div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>{legModeLabel}</b>{' '}\n            {!leg.hailedCar &&\n              leg.distance > 0 &&\n              <span> {distanceString(leg.distance)} </span>}\n            to <b>{getPlaceName(leg.to, configCompanies)}</b>\n          </div>\n          {!leg.hailedCar && (\n            <div className='leg-details'>\n              {leg.steps.map((step, k) => {\n                return (\n                  <div key={k} className='leg-detail'>\n                    {getStepDirection(step)} on <b>{getStepStreetName(step)}</b>\n                  </div>\n                )\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass TNCLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { customIcons, leg } = this.props\n    const { tncData } = leg\n    if (!tncData) return null\n\n    return (\n      <div className='leg'>\n        <div className='mode-icon'>{getLegIcon(leg, customIcons)}</div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>Take {tncData.displayName}</b> to <b>{leg.to.name}</b>\n          </div>\n          <div className='leg-details'>\n            <div className='leg-detail'>\n              Estimated wait time for pickup:{' '}\n              <b>{formatDuration(tncData.estimatedArrival)}</b>\n            </div>\n            <div className='leg-detail'>\n              Estimated travel time:{' '}\n              <b>{formatDuration(leg.duration)}</b> (does not account for traffic)\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n"]}